@c Copyright (C) 2002, 2003, 2004, 2007, 2008, 2009
@c Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@node 类型信息
@chapter 内存管理和类型信息
@cindex GGC
@findex GTY

GCC使用了一些相当复杂微妙的内存管理技术，包括从GCC源代码中确定GCC的
数据结构的信息，并使用该信息来执行垃圾收集和实现预编译头文件。

使用完整的C解析器来完成这项工作会非常复杂，因此只解析C的有限子集，
并且使用特定的标记来确定源代码的哪些部分需要分析。所有的 
@code{struct} 和 @code{union} 声明，如果所定义的数据结构要在垃圾收集
器的控制下进行分配，则必须被标记。所有的全局变量，如果所保存的指针是
指向垃圾收集的内存，则也必须被标记。最后，所有的全局变量，如果需要通
过预编译头文件来保存和恢复，则必须被标记。（预编译头文件机制只能保存
标量，复杂的数据结构必须被分配在垃圾收集内存中，从而被保存在预编译头
文件中。）

标记的完整格式是

@smallexample
GTY (([@var{option}] [(@var{param})], [@var{option}] [(@var{param})] @dots{}))
@end smallexample
@noindent
不过大多数情况下，不需要选项。虽然这样，外面的双括号依然是必须的：
@code{GTY(())}。标记可以出现在：

@itemize @bullet
@item
在结构体定义中，放在开括号之前；
@item
在全局变量声明中，放在关键词 @code{static} 或者 @code{extern} 之后；
@item
在结构体的域的定义里，在域的名字之前。
@end itemize

这里有一些标记简单数据结构和全局变量的例子。

@smallexample
struct @var{tag} GTY(())
@{
  @var{fields}@dots{}
@};

typedef struct @var{tag} GTY(())
@{
  @var{fields}@dots{}
@} *@var{typename};

static GTY(()) struct @var{tag} *@var{list};   /* @r{points to GC memory} */
static GTY(()) int @var{counter};        /* @r{save counter in a PCH} */
@end smallexample

解析器能够理解简单的typedef，例如 
@code{typedef struct @var{tag} *@var{name};} 和 
@code{typedef int @var{name};}。这些不需要被标记。

@menu
* GTY Options::         @code{GTY(())} 的内部。
* GGC Roots::           标记全局变量GGC roots。
* Files::               生成的文件如何工作。
* Invoking the garbage collector::   如何调用垃圾收集器。
@end menu

@node GTY Options
@section The Inside of a @code{GTY(())}

有时候C代码不足以完全描述类型结构体，这时可以使用 @code{GTY} 选项和
额外标记来提供额外的信息。一些选项接受一个参数，其可以为字符串或者类
型名。如果一个选项不需要参数，则可以完全省略参数，或者提供一个空字符
串作为参数。例如，@code{@w{GTY ((skip))}} 和 
@code{@w{GTY ((skip("")))}} 是等价的。

当参数为字符串时，通常为一个C代码片段。有四种特定换码符可以在字符串
中使用，用来指定被标记的数据结构体：

@cindex % in GTY option
@table @code
@item %h
当前结构体。 
@item %1
直接包含当前结构体的结构体。 
@item %0
包含当前结构体的最外层结构体。 
@item %a
@code{[i1][i2]@dots{}} 形式的部分表达式，用来索引当前被标记的数组项。
@end table

例如，假设有一个结构体
@smallexample
struct A @{
  @dots{}
@};
struct B @{
  struct A foo[12];
@};
@end smallexample
@noindent
并且 @code{b} 是 @code{struct B} 类型的变量。当标记 @samp{b.foo[11]} 
时，@code{%h} 将扩展为 @samp{b.foo[11]}，@code{%0} 和 @code{%1} 都会
扩展为 @samp{b}，@code{%a} 会扩展为 @samp{[11]}。

由于原始的C中，相邻的字符串会被连接；这对于复杂的表达式是有帮助的。

@smallexample
@group
GTY ((chain_next ("TREE_CODE (&%h.generic) == INTEGER_TYPE"
                  " ? TYPE_NEXT_VARIANT (&%h.generic)"
                  " : TREE_CHAIN (&%h.generic)")))
@end group
@end smallexample

可用的选项：

@table @code
@findex length
@item length ("@var{expression}")

有两个地方需要显示的告诉类型机构一个数组的长度。第一种情况是当一个结
构体结束于一个可变长度数组，像这样： 
@smallexample
struct rtvec_def GTY(()) @{
  int num_elem;         /* @r{number of elements} */
  rtx GTY ((length ("%h.num_elem"))) elem[1];
@};
@end smallexample

在这种情况下，@code{length} 选项用来覆盖指定数组的长度（通常本应该为 
@code{1}）。选项的参数是C代码片断用来计算长度。

第二种情况是当一个结构体或者全局变量包含一个指向数组的指针，像这样：

@smallexample
tree *
  GTY ((length ("%h.regno_pointer_align_length"))) regno_decl;
@end smallexample
在这种情况下，@code{regno_decl} 已经通过类似下面的方式被分配：
@smallexample
  x->regno_decl =
    ggc_alloc (x->regno_pointer_align_length * sizeof (tree));
@end smallexample
并且 @code{length} 提供了指定域的长度。

@code{lenght} 的第二种用法还包括在全局变量上，像这样：
@verbatim
  static GTY((length ("reg_base_value_size")))
    rtx *reg_base_value;
@end verbatim

@findex skip
@item skip

如果 @code{skip} 应用在一个域上，则类型机构将会忽略该域。这有些危险；
唯一安全的使用方式是在一个联合体中，当一个域确实不会被使用到的时候。 

@findex desc
@findex tag
@findex default
@item desc ("@var{expression}")
@itemx tag ("@var{constant}")
@itemx default

类型机构需要知道 @code{union} 的哪一个域是当前活跃的。这是通过赋给每个
域一个常数 @code{tag} 值，并且使用 @code{desc} 指定一个判别器来完成的。
由 @code{desc} 给出的表达式的值用来与每个 @code{tag} 值比较，每个 
@code{tag} 值应该不同。如果没有 @code{tag} 匹配，则会使用标记为 
@code{default} 的域。

在 @code{desc} 选项中，“当前结构体”是指要进行判别的联合体，可以使用 
@code{%1} 来指定。 @code{tag} 选项没有换码符可用，因为其为常数。

例如,

@smallexample
struct tree_binding GTY(())
@{
  struct tree_common common;
  union tree_binding_u @{
    tree GTY ((tag ("0"))) scope;
    struct cp_binding_level * GTY ((tag ("1"))) level;
  @} GTY ((desc ("BINDING_HAS_LEVEL_P ((tree)&%0)"))) xscope;
  tree value;
@};
@end smallexample

在这个例子中，当BINDING_HAS_LEVEL_P应用到 @code{struct tree_binding*} 
时，其值会被假设为0或者1。如果是1，类型机制则会认为域 @code{level} 存在，
如果是0，则会认为域 @code{scope} 存在。

@findex param_is
@findex use_param
@item param_is (@var{type})
@itemx use_param

有时候，定义某种数据结构作为通用指针（也就是 @code{PTR}），并且与特定
类型一起使用是比较方便的。@code{param_is} 指定了所指向的真正类型，
@code{use_param} 说明了该类型应该放在通用数据结构的哪个地方。

例如，为了让 @code{htab_t} 指向trees，则应该像这样来写 @code{htab_t} 
的定义：

@smallexample
typedef struct GTY(()) @{
  @dots{}
  void ** GTY ((use_param, @dots{})) entries;
  @dots{}
@} htab_t;
@end smallexample
然后按这种方式声明变量：
@smallexample
  static htab_t GTY ((param_is (union tree_node))) ict;
@end smallexample

@findex param@var{n}_is
@findex use_param@var{n}
@item param@var{n}_is (@var{type})
@itemx use_param@var{n}

在更复杂的情况下，数据结构可能需要工作在多个不同类型之上，而且这些类型
也不必都是指针。对于这样的，可以使用 @code{param1_is} 到 
@code{param9_is} 来指定由 @code{use_param1} 到 @code{use_param9} 标识的
实际类型域。

@findex use_params
@item use_params

当结构体包含另一个参数化的结构体时，不需要做特别的处理，内部结构体会继
承外部的参数。当结构体包含指向一个参数化的结构体的指针时，类型机构不会
自动检测到（是应该可以的，只是还没有实现），所以需要告诉类型机构所指向
的结构体将使用外部结构体的相同参数。这可以通过使用 @code{usr_params} 
选项来标识指针。

@findex deletable
@item deletable

将 @code{deletable} 应用到全局变量上时，表示当垃圾收集运行时，不需要标记
由该变量指向的任何对象，可以只是将其设为 @code{NULL}。这可以用来维护一个
可以重用的空闲结构体列表。

@findex if_marked
@item if_marked ("@var{expression}")

假设你想要一些类别的对象是唯一的，并且为此你将它们放在了哈希表中。如果垃
圾搜集标记了哈希表，这些对象将永远不会被释放掉，即使最后一个引用也不存在。
对此GCC有特定的处理方式：如果你使用 @code{if_marked} 选项在一个全局哈希表
上，GCC将会对每个哈希表项调用该选项参数命名的函数。如果函数返回非0，哈希
表项将按照通常的方式被标记，如果返回0，则哈希表项将会被删除。 

函数 @code{ggc_marded_p} 可以用来判断一个元素是否已经被标记。实际上，通常
的情况是使用 @code{if_marked ("ggc_marked_p")}。

@findex mark_hook
@item mark_hook ("@var{hook-routine-name}")

如果用在结构体或者联合体类型上，给出的（双引号之间的）
@var{hook-routine-name} 则为一个函数名，其在垃圾搜集器刚刚标记数据为可达
（reachable）时会被调用。该函数不应该改变数据，或者调用任何ggc函数。它的
唯一参数是一个指向刚刚被标记的结构体或联合体的指针。

@findex maybe_undef
@item maybe_undef

当应用到一个域时，@code{maybe_undef} 表示可以允许该域所指向的结构体没有被
定义，只要该域总是为 @code{NULL}。这可以用来避免要求后端去定义一些可选的
结构体。该选项对语言前端不起作用。

@findex nested_ptr
@item nested_ptr (@var{type}, "@var{to expression}", "@var{from expression}")

类型设备期望所有指针都指向一个对象的起始处。有时候出于抽象目的，使用指向
对象内部的指针是比较方便的。只要能够对原始对象和指针进行相互转换，这样的
指针还是可以使用的。@var{type} 是原始对象的类型，@var{to expression} 返回
给定原始对象的指针，@var{from expression} 返回给定指针的原始对象。指针可
以使用 @code{%h} 转换符得到。

@findex chain_next
@findex chain_prev
@findex chain_circular
@item chain_next ("@var{expression}")
@itemx chain_prev ("@var{expression}")
@itemx chain_circular ("@var{expression}")

让类型设备知道对象是否经常被链接在长的链表中是有帮助作用的。这可以让其
使用遍历链表的方式来替代递归调用，从而使得生成的代码使用很少的栈空间。 
@code{chain_next} 是链表中的下一项，@code{chain_prev} 是前一项。对于单
向链表，只使用 @code{chain_next}；对于双向链表，两者都使用。设备要求对
一个项求 @code{chain_prev}，然后 @code{chain_next}，可以得到原始的项。

@findex reorder
@item reorder ("@var{function name}")

一些数据结构依赖于相应的指针顺序。如果预编译头文件设备需要改变顺序，其
将会调用由 @code{reorder} 选项指定的函数。函数必须接收4个参数， 
@samp{@w{void *, void *, gt_pointer_operator, void *}}。第一个参数是指
向更新对象的结构体的指针，或者对象本身，如果没有包含的结构体。第二个参
数为一个cookie，目前被忽略。第三个参数是一个函数，给定指针，将会更新该
指针为正确的新值。第四个参数是一个cookie，且必须传给第二个参数。

PCH无法处理依赖于指针绝对值得数据结构。@code{reorder} 函数代价很高。在
可能的情况下，最好依赖于数据的属性，像ID号或者字符串的哈希值。

@findex special
@item special ("@var{name}")

@code{special} 选项用来标记类型必须由特定情况的机制来处理。参数是特定
情况的名字。详细信息参见 @file{gengtype.c}。应避免添加新的特定情况，除
非没有别的办法。
@end table

@node GGC Roots
@section Marking Roots for the Garbage Collector
@cindex roots, marking
@cindex marking roots

除了了解类型信息，类型机构（type machinery）还需要定位全局变量
（@dfn{roots}），作为垃圾搜集器开始的地方。Roots必须按照下面的语法之一
来声明：

@itemize @bullet
@item
@code{extern GTY(([@var{options}])) @var{type} @var{name};}
@item
@code{static GTY(([@var{options}])) @var{type} @var{name};}
@end itemize
@noindent
语法
@itemize @bullet
@item
@code{GTY(([@var{options}])) @var{type} @var{name};}
@end itemize
@noindent

是 @emph{不} 被接受的。对于这样的变量，应该在某个头文件中存在一个 
@code{extern} 声明——可以在那里标记，而不要在它的定义中标记。或者，
如果变量只在一个文件中使用，则将其定义为 @code{static}。

@node Files
@section Source Files Containing Type Information
@cindex generated files
@cindex files, generated

只要向之前没有 @code{GTY} 标记的源文件里添加 @code{GTY} 标记，或者
创建一个新的包含 @code{GTY} 标记的源文件，那么就有三件事情需要做：

@enumerate
@item
需要将文件添加到类型机构需要扫描的源文件列表中。有四种情况： 

@enumerate a
@item
对于一个后端文件，通常会自动完成。如果没有，则需要将其添加到 
@file{config.gcc} 里的适当port条目 @code{target_gtfiles} 中。

@item
对于所用前端共享的文件，将文件名添加到 @file{Makefile.in} 里的 
@code{GTFILES} 变量中。

@item
对于一个前端的文件，将文件名添加到在适当 @file{config-lang.in} 
里定义的 @code{gtfiles} 变量中。对于C，文件为 @file{c-config-lang.in}。

@item
对于一些而不是所有的前端的文件，将文件名添加到 @emph{所有} 使用
它的前端的 @code{gtfiles} 变量中。
@end enumerate

@item
如果是头文件，则需要检查是否被包含在正确的位置，使得对于生成文件
为可见的。对于一个后端文件，这应该是自动完成的。对于前端的头文件，
应该被包含 @file{gtype-@var{lang}.h} 的同一文件所包含。对于其它头
文件，需要被包含在 @file{gtype-desc.c} 中。@file{gtype-desc.c} 为
生成文件，所以需要将头文件名添加到 @file{gengtype.c} 里的 
@code{open_base_file} 里的 @code{ifiles} 中。

对于不是头文件的源文件，类型机构将会生成一个头文件，并且该头文件
应该被包含在所修改的源文件中。文件名为 @file{gt-@var{path}.h}，其
中 @var{path} 是相对于 @file{gcc} 目录的路径名，并且由 @verb{|-|} 
来替换斜线。例如，要被包含在 @file{cp/parser.c} 中的头文件命名为 
@file{gt-cp-parser.c}。生成的头文件应该被包含在源文件所有其它内容
之后。不要忘记将该文件在 @file{Makefile} 中作为一个依赖条件！

@end enumerate

对于语言前端，还有另一个文件需要在某处被包含。其为 
@file{gtype-@var{lang}.h}，其中 @var{lang} 是语言子目录的名字。

@node Invoking the garbage collector
@section How to invoke the garbage collector
@cindex garbage collector, invocation
@findex ggc_collect

The GCC garbage collector GGC is only invoked explicitly. In contrast
with many other garbage collectors, it is not implicitly invoked by
allocation routines when a lot of memory has been consumed. So the
only way to have GGC reclaim storage it to call the @code{ggc_collect}
function explicitly. This call is an expensive operation, as it may
have to scan the entire heap. Beware that local variables (on the GCC
call stack) are not followed by such an invocation (as many other
garbage collectors do): you should reference all your data from static
or external @code{GTY}-ed variables, and it is advised to call
@code{ggc_collect} with a shallow call stack. The GGC is an exact mark
and sweep garbage collector (so it does not scan the call stack for
pointers). In practice GCC passes don't often call @code{ggc_collect}
themselves, because it is called by the pass manager between passes.
