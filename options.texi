@c Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011
@c Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@en @node Options
@en @chapter Option specification files
@node Options
@chapter 选项描述文件
@cindex option specification files
@cindex @samp{optc-gen.awk}

@en Most GCC command-line options are described by special option
@en definition files, the names of which conventionally end in
@en @code{.opt}.  This chapter describes the format of these files.
大多数GCC命令行选项由特定的选项定义文件来描述，按照惯例命名为@code{.opt}。这章描述了这些文件的格式。

@en @menu
@en * Option file format::   The general layout of the files
@en * Option properties::    Supported option properties
@en @end menu
@menu
* Option file format::   文件的总体结构
* Option properties::    所支持的选项属性
@end menu

@en @node Option file format
@en @section Option file format
@node Option file format
@section 选项文件格式

@en Option files are a simple list of records in which each field occupies
@en its own line and in which the records themselves are separated by
@en blank lines.  Comments may appear on their own line anywhere within
@en the file and are preceded by semicolons.  Whitespace is allowed before
@en the semicolon.
选项文件是一个简单的记录列表，记录中的每个域独自占有一行，记录之间由空行分隔。注释独自占有一行，可以出现在文件的任何地方，并且由分号开头。分号前允许有空格。

@en The files can contain the following types of record:
文件中可以包含下列类型的记录：

@itemize @bullet
@item
@en A language definition record.  These records have two fields: the
@en string @samp{Language} and the name of the language.  Once a language
@en has been declared in this way, it can be used as an option property.
@en @xref{Option properties}.
语言定义记录。这些记录有两个域：字符串@samp{Language}和语言的名字。一旦通过这种方式声明了一个语言，则可以作为选项属性来使用。@xref{Option properties}。

@item
@en A target specific save record to save additional information. These
@en records have two fields: the string @samp{TargetSave}, and a
@en declaration type to go in the @code{cl_target_option} structure.
一个目标相关的保存记录用来保存额外信息。这些记录有两个域：字符串 @samp{TargetSave}，和一个在@code{cl_target_option} 中结构的类型声明。

@item
@en A variable record to define a variable used to store option
@en information.  These records have two fields: the string
@en @samp{Variable}, and a declaration of the type and name of the
@en variable, optionally with an initializer (but without any trailing
@en @samp{;}).  These records may be used for variables used for many
@en options where declaring the initializer in a single option definition
@en record, or duplicating it in many records, would be inappropriate, or
@en for variables set in option handlers rather than referenced by
@en @code{Var} properties.
定义一个变量记录用来存储选项信息。这些记录有两个领域：字符串 @samp{变量}，和这个变量类型和名称的声明，也许还有可选初始化值（但没有任何结束符@samp{;}）。在声明一个初始化单独选项的时候，这些记录可以被很多选项使用，或者在很多选项中复制它，都是不适当的，设置变量应该在选项处理程序而不是对 @code{Var} 属性的直接引用。

@item
@en A variable record to define a variable used to store option
@en information.  These records have two fields: the string
@en @samp{TargetVariable}, and a declaration of the type and name of the
@en variable, optionally with an initializer (but without any trailing
@en @samp{;}).  @samp{TargetVariable} is a combination of @samp{Variable}
@en and @samp{TargetSave} records in that the variable is defined in the
@en @code{gcc_options} structure, but these variables are also stored in
@en the @code{cl_target_option} structure.  The variables are saved in the
@en target save code and restored in the target restore code.
用变量记录定义的变量用来存储选项信息。这些记录有两个字段：字符串 @samp{TargetVariable}，和这个变量类型和名称的声明，也许还有可选的初始化值（但没有任何结束符 @samp{;}）。@samp{TargetVariable} 是 @samp{Variable} 和 @code{gcc_options}结构中的 @samp{TargetSave} 记录变量定义的组合，但这些变量也存储在 @code{cl_target_option} 结构中。这些变量保存在target save code和target restore code中。

@item
@en A variable record to record any additional files that the
@en @file{options.h} file should include.  This is useful to provide
@en enumeration or structure definitions needed for target variables.
@en These records have two fields: the string @samp{HeaderInclude} and the
@en name of the include file.
变量记录用来记录任何 @file{options.h} 中应该包含的附加文件。这在提供目标变量的枚举或结构的定义的时候非常有用。这些记录有两个域：字符串 @samp{HeaderInclude} 和头文件的名称。

@item
@en A variable record to record any additional files that the
@en @file{options.c} file should include.  This is useful to provide
@en inline functions needed for target variables and/or @code{#ifdef}
@en sequences to properly set up the initialization.  These records have
@en two fields: the string @samp{SourceInclude} and the name of the
@en include file.
变量记录用来记录任何 @file{options.c} 中应该包含的附加文件。这在提供目标变量需要的内联函数和正确设置初始化 @code{＃ifdef} 序列的时候非常有用。这些记录有两个域：字符串 @samp{SourceInclude}和头文件名称。

@item
@en An enumeration record to define a set of strings that may be used as
@en arguments to an option or options.  These records have three fields:
@en the string @samp{Enum}, a space-separated list of properties and help
@en text used to describe the set of strings in @option{--help} output.
@en Properties use the same format as option properties; the following are
@en valid:
枚举记录定义了一套可以用来作为字符串选项的参数。这些记录有三个域：
字符串 @samp{Enum}，空格分隔的属性列表，描述 @option{--help} 输出的帮助
文字。属性选项属性使用相同的格式，以下是有效选项：

@table @code
@item Name(@var{name})
@en This property is required; @var{name} must be a name (suitable for use
@en in C identifiers) used to identify the set of strings in @code{Enum}
@en option properties.
此属性是必需的，@var{name} 必须是一个名称（合法的C标识符）用来确定在 @code{Enum} 选项属性中的字符串。

@item Type(@var{type})
@en This property is required; @var{type} is the C type for variables set
@en by options using this enumeration together with @code{Var}.
此属性是必需的，@var{type} 是一个被选项用 @code{Var} 中的值设置的变量的C类型。

@item UnknownError(@var{message})
@en The message @var{message} will be used as an error message if the
@en argument is invalid; for enumerations without @code{UnknownError}, a
@en generic error message is used.  @var{message} should contain a single
@en @samp{%qs} format, which will be used to format the invalid argument.
@var{message} 将被用作参数无效时的错误消息，枚举中不存在 @code{UnknownError} 的时候使用一般性错误消息。@var{message} 应该包含一个用于格式化无效参数的 @samp{％qs}格式。
@end table

@item
@en An enumeration value record to define one of the strings in a set
@en given in an @samp{Enum} record.  These records have two fields: the
@en string @samp{EnumValue} and a space-separated list of properties.
@en Properties use the same format as option properties; the following are
@en valid:
枚举值记录用来定义一个 @samp{Enum} 记录中给定一组字符串。这些记录有两个字段：
字符串 @samp{EnumValue} 和空格分隔的属性列表。属性选项属性使用相同的格式，以下是有效选项：

@table @code
@item Enum(@var{name})
@en This property is required; @var{name} says which @samp{Enum} record
@en this @samp{EnumValue} record corresponds to.
此属性是必需的，@var{name} 是 @samp{Enum} 中 @samp{EnumValue} 的对应记录。

@item String(@var{string})
@en This property is required; @var{string} is the string option argument
@en being described by this record.
此属性是必需的，@var{string}是记录中存储的字符串选项内容。

@item Value(@var{value})
@en This property is required; it says what value (representable as
@en @code{int}) should be used for the given string.
此属性是必需的，它表示给定的字符串的值（表示为@code{int}）。

@item Canonical
@en This property is optional.  If present, it says the present string is
@en the canonical one among all those with the given value.  Other strings
@en yielding that value will be mapped to this one so specs do not need to
@en handle them.
此属性是可选的。如果存在，表示当前字符串是所有给定值的典型之一。其他字符串
产生的值将被映射到这里，以至于specs不需要处理它们。

@item DriverOnly
@en This property is optional.  If present, the present string will only
@en be accepted by the driver.  This is used for cases such as
@en @option{-march=native} that are processed by the driver so that
@en @samp{gcc -v} shows how the options chosen depended on the system on
@en which the compiler was run.
该属性是可选的。当前，这些字符串仅仅被driver接受。用来在 @option{-march=native} 的时候传递给driver，导致运行 @samp{gcc -v} 可以显示当前系统使用的选项。
@end table

@item
@en An option definition record.  These records have the following fields:
选项定义记录。这些记录有如下域：
@enumerate
@item
@en the name of the option, with the leading ``-'' removed
选项的名字，去掉前导符“-”
@item
@en a space-separated list of option properties (@pxref{Option properties})
空格分隔的选项属性列表 (@pxref{Option properties})
@item
@en the help text to use for @option{--help} (omitted if the second field
@en contains the @code{Undocumented} property).
帮助文本，用于@option{--help}（如果第二个域包含@code{Undocumented}属性，则会忽略该域）
@end enumerate

@en By default, all options beginning with ``f'', ``W'' or ``m'' are
@en implicitly assumed to take a ``no-'' form.  This form should not be
@en listed separately.  If an option beginning with one of these letters
@en does not have a ``no-'' form, you can use the @code{RejectNegative}
@en property to reject it.
缺省的，所有以“f”，“W”或者“m”开头的选项被隐式的假设会有一个“no-”形式。该形式不必再单独列出来。如果以这些字母开头的选项没有“no-”形式，可以使用@code{RejectNegative}属性来去掉。

@en The help text is automatically line-wrapped before being displayed.
@en Normally the name of the option is printed on the left-hand side of
@en the output and the help text is printed on the right.  However, if the
@en help text contains a tab character, the text to the left of the tab is
@en used instead of the option's name and the text to the right of the
@en tab forms the help text.  This allows you to elaborate on what type
@en of argument the option takes.
帮助文本在显示前会被自动换行。正常情况下，选项的名字会被打印在输出的左边，帮助文本被打印在右边。但是，如果帮助文本包含一个tab字符，则tab左边的文本会被用来替代选项的名字，tab右边的文本作为帮助文本。这样就可以用来详尽的阐述选项会使用什么类型的参数。

@item
@en A target mask record.  These records have one field of the form
@en @samp{Mask(@var{x})}.  The options-processing script will automatically
@en allocate a bit in @code{target_flags} (@pxref{Run-time Target}) for
@en each mask name @var{x} and set the macro @code{MASK_@var{x}} to the
@en appropriate bitmask.  It will also declare a @code{TARGET_@var{x}}
@en macro that has the value 1 when bit @code{MASK_@var{x}} is set and
@en 0 otherwise.
目标掩码记录。这些记录有一个域，形式为@samp{Mask(@var{x})}。选项处理脚本将会自动在target_flags（@pxref{Run-time Target}）中为每个掩码名字x分配一个位，并且将@code{MASK_@var{x}}宏对应的位置位。同时，会声明一个@code{TARGET_@var{x}}宏，当@code{MASK_@var{x}}位被置位时其值为1，否则为0。

@en They are primarily intended to declare target masks that are not
@en associated with user options, either because these masks represent
@en internal switches or because the options are not available on all
@en configurations and yet the masks always need to be defined.
它们最初是为了声明与用户选项没有联系的目标掩码，或者是因为这些掩码表示内部的开关，或者是因为这些选项不在所有的配置中，但是还需要定义掩码的。
@end itemize

@en @node Option properties
@en @section Option properties
@node Option properties
@section 选项属性

@en The second field of an option record can specify any of the following
@en properties.  When an option takes an argument, it is enclosed in parentheses
@en following the option property name.  The parser that handles option files
@en is quite simplistic, and will be tricked by any nested parentheses within
@en the argument text itself; in this case, the entire option argument can
@en be wrapped in curly braces within the parentheses to demarcate it, e.g.:

@smallexample
Condition(@{defined (USE_CYGWIN_LIBSTDCXX_WRAPPERS)@})
@end smallexample

选项记录的第二个域可以指定下列属性：

@table @code
@item Common
@en The option is available for all languages and targets.
选项对所有语言和目标都有效。

@item Target
@en The option is available for all languages but is target-specific.
选项对所有语言都有效，但是目标特定的。

@item Driver
@en The option is handled by the compiler driver using code not shared
@en with the compilers proper (@file{cc1} etc.).

@item @var{language}
@en The option is available when compiling for the given language.
当编译给定语言时，选项有效。

@en It is possible to specify several different languages for the same
@en option.  Each @var{language} must have been declared by an earlier
@en @code{Language} record.  @xref{Option file format}.

可以为多个不同的语言指定同一个选项。每个语言@var{language}必须已经被之前的@code{Language}记录声明过。@xref{Option file format}。

@item RejectDriver
@en The option is only handled by the compilers proper (@file{cc1} etc.)@:
@en and should not be accepted by the driver.
该选项仅被 （@file{cc1}.）@: 之类编译器属性使用，不应该被driver接受。

@item RejectNegative
@en The option does not have a ``no-'' form.  All options beginning with
@en ``f'', ``W'' or ``m'' are assumed to have a ``no-'' form unless this
@en property is used.
选项没有“no-”形式。所有由“f”，“W”或者“m”开始的选项都被假设具有“no-”形式，除非使用这个属性。

@item Negative(@var{othername})
@en The option will turn off another option @var{othername}, which is
@en the option name with the leading ``-'' removed.  This chain action will
@en propagate through the @code{Negative} property of the option to be
@en turned off.
选项将会关掉另一个选项@var{othername}，这是去掉前导符“-”的选项名字。这会通过@code{Negative}属性来传播一连串的选项关闭行为。

@item Joined
@itemx Separate
@en The option takes a mandatory argument.  @code{Joined} indicates
@en that the option and argument can be included in the same @code{argv}
@en entry (as with @code{-mflush-func=@var{name}}, for example).
@en @code{Separate} indicates that the option and argument can be
@en separate @code{argv} entries (as with @code{-o}).  An option is
@en allowed to have both of these properties.
选项接受一个强制参数。@code{Joined}指示选项和参数可以被包含在同一个@code{argv}项中（例如 @code{-mflush-func=@var{name}}）。@code{Separate}指示选项和参数可以为分开的@code{argv}项（如@code{-o}）。一个选项允许同时具有这两个属性。

@item JoinedOrMissing
@en The option takes an optional argument.  If the argument is given,
@en it will be part of the same @code{argv} entry as the option itself.

@en This property cannot be used alongside @code{Joined} or @code{Separate}.
选项接受一个可选参数。如果参数给出，则会作为选项本身的@code{argv}项的一部分。

该属性不能和@code{Joined}或@code{Separate}一起使用。

@item MissingArgError(@var{message})
@en For an option marked @code{Joined} or @code{Separate}, the message
@en @var{message} will be used as an error message if the mandatory
@en argument is missing; for options without @code{MissingArgError}, a
@en generic error message is used.  @var{message} should contain a single
@en @samp{%qs} format, which will be used to format the name of the option
@en passed.
如果一个选项被标记为 @code{Joined} 或 @code{Separate}，在强制性参数丢失的时候 @var{message} 将被当作错误信息，没有 @code{MissingArgError} 的选项将会使用通用错误。@var{message} 应该包含一个单独的 @samp{%qs} 格式，用来格式化传入的参数。

@item Args(@var{n})
@en For an option marked @code{Separate}, indicate that it takes @var{n}
@en arguments.  The default is 1.
如果一个选项被标记为 @code{Separate}，通过 @var{n} 来区分他，默认是1。

@item UInteger
@en The option's argument is a non-negative integer.  The option parser
@en will check and convert the argument before passing it to the relevant
@en option handler.  @code{UInteger} should also be used on options like
@en @code{-falign-loops} where both @code{-falign-loops} and
@en @code{-falign-loops}=@var{n} are supported to make sure the saved
@en options are given a full integer.
选项的参数是一个非负整数。选项解析器将会在传给选项处理前检测并转换参数。

@item NoDriverArg
@en For an option marked @code{Separate}, the option only takes an
@en argument in the compiler proper, not in the driver.  This is for
@en compatibility with existing options that are used both directly and
@en via @option{-Wp,}; new options should not have this property.
如果一个选项标记为 @code{Separate}，该选项仅对编译器有效，而对driver无效。主要是为 @option{-Wp,} 之类的参数兼容性考虑，新选项没有这个属性了。

@item Var(@var{var})
@en The state of this option should be stored in variable @var{var}
@en (actually a macro for @code{global_options.x_@var{var}}).
@en The way that the state is stored depends on the type of option:
该选项的状态将被存储在变量@var{var}(actually a macro for @code{global_options.x_@var{var}})中。存储状态的方式取决于选项的类型：

@itemize @bullet
@item
@en If the option uses the @code{Mask} or @code{InverseMask} properties,
@en @var{var} is the integer variable that contains the mask.
如果使用了@code{Mask}或者@code{InverseMask}属性，则@var{var}为包含
mask的整数变量。

@item
@en If the option is a normal on/off switch, @var{var} is an integer
@en variable that is nonzero when the option is enabled.  The options
@en parser will set the variable to 1 when the positive form of the
@en option is used and 0 when the ``no-'' form is used.
如果选项是一个正常的on/off开关，则@var{var}为整数变量，并且当启用该选项时其值为非零。当使用选项的正面形式时，选项解析器会把变量置为1，当使用“no-”形式的时候，置为0。

@item
@en If the option takes an argument and has the @code{UInteger} property,
@en @var{var} is an integer variable that stores the value of the argument.
如果选项接受一个参数，并且具有@code{UInteger}属性，则@var{var}为整数变量，并且存储了参数的值。

@item
@en If the option takes an argument and has the @code{Enum} property,
@en @var{var} is a variable (type given in the @code{Type} property of the
@en @samp{Enum} record whose @code{Name} property has the same argument as
@en the @code{Enum} property of this option) that stores the value of the
@en argument.
如果该选项接受一个参数，并具有 @code{Enum}属性，
@var{var} 是一个用来存储参数值的变量（@samp{Enum}记录中的 @code{Name} 属性和 @code{Enum} 属性拥有同样参数的 @code{Type} 属性中的给定类型）。

@item
@en If the option has the @code{Defer} property, @var{var} is a pointer to
@en a @code{VEC(cl_deferred_option,heap)} that stores the option for later
@en processing.  (@var{var} is declared with type @code{void *} and needs
@en to be cast to @code{VEC(cl_deferred_option,heap)} before use.)
如果选项中有@code{Defer}属性，@var{var} 是一个指向用来存储后续过程使用的选项 @code{VEC(cl_deferred_option,heap)} 指针。（@var{var}被声明成 @code{void *} 类型，并且在使用之前需要转化成 @code{VEC(cl_deferred_option,heap)}）

@item
@en Otherwise, if the option takes an argument, @var{var} is a pointer to
@en the argument string.  The pointer will be null if the argument is optional
@en and wasn't given.
否则，如果选项接受一个参数，则@var{var}为指向参数字符串的指针。如果参数是可选的并且没有给出，则该指针将为null。
@end itemize

@en The option-processing script will usually zero-initialize @var{var}.
选项处理脚本通常把 @var{var} 初始化为0。
@en You can modify this behavior using @code{Init}.
你可以通过修改 @code{Init} 来到达修改默认行为的目的。

@item Var(@var{var}, @var{set})
@en The option controls an integer variable @var{var} and is active when
@en @var{var} equals @var{set}.  The option parser will set @var{var} to
@en @var{set} when the positive form of the option is used and @code{!@var{set}}
@en when the ``no-'' form is used.
选项控制一个整数变量@var{var}，并且当@var{var}等于@var{set}时起作用。当使用选项的正面形式时，选项解析器会把变量置为@var{set}，当使用“no-”形式的时候，置为@code{!@var{set}}。

@en @var{var} is declared in the same way as for the single-argument form
@en described above.
@var{var}的声明方式与上面描述的单一参数形式的具有相同的方式。

@item Init(@var{value})
@en The variable specified by the @code{Var} property should be statically
@en initialized to @var{value}.  If more than one option using the same
@en variable specifies @code{Init}, all must specify the same initializer.
由属性@code{Var}指定的变量应该被静态初始化为@var{value}。

@item Mask(@var{name})
@en The option is associated with a bit in the @code{target_flags}
@en variable (@pxref{Run-time Target}) and is active when that bit is set.
@en You may also specify @code{Var} to select a variable other than
@en @code{target_flags}.
选项与@code{target_flags}变量（@pxref{Run-time Target}）中的一个位相关联，并且当该位被置位时才起作用。你还可以指定@code{Var}去选择一个变量，而不只是@code{target_flags}。

@en The options-processing script will automatically allocate a unique bit
@en for the option.  If the option is attached to @samp{target_flags},
@en the script will set the macro @code{MASK_@var{name}} to the appropriate
@en bitmask.  It will also declare a @code{TARGET_@var{name}} macro that has
@en the value 1 when the option is active and 0 otherwise.  If you use @code{Var}
@en to attach the option to a different variable, the associated macros are
@en called @code{OPTION_MASK_@var{name}} and @code{OPTION_@var{name}} respectively.
选项处理脚本将会自动为选项分配一个唯一的位。如果选项与@samp{target_flags}关联，则脚本会将宏@code{MASK_@var{name}}设为合适的位掩码。它还会声明一个@code{TARGET_@var{name}}宏，当选项起作用时其值为1，否则为0。如果使用@var{Var}将选项关联到不同的变量上，则相关的宏分别叫做@code{OPTION_MASK_@var{name}}和@code{OPTION_@var{name}}。

@en You can disable automatic bit allocation using @code{MaskExists}.
可以使用 @code{MaskExists} 来禁止自动位分配。

@item InverseMask(@var{othername})
@itemx InverseMask(@var{othername}, @var{thisname})
@en The option is the inverse of another option that has the
@en @code{Mask(@var{othername})} property.  If @var{thisname} is given,
@en the options-processing script will declare a @code{TARGET_@var{thisname}}
@en macro that is 1 when the option is active and 0 otherwise.
选项是具有@code{Mask(@var{othername})}属性的另一个选项的反面。如果给出了@var{thisname}，则选项处理脚本会声明一个@code{TARGET_@var{thisname}}宏，当选项起作用时其为1，否则为0。

@item MaskExists
@en The mask specified by the @code{Mask} property already exists.
@en No @code{MASK} or @code{TARGET} definitions should be added to
@en @file{options.h} in response to this option record.
由@code{Mask}属性指定的掩码已经存在。这样，就不会有@code{MASK}和@code{TARGET}定义被增加到@file{options.h}中。

@en The main purpose of this property is to support synonymous options.
@en The first option should use @samp{Mask(@var{name})} and the others
@en should use @samp{Mask(@var{name}) MaskExists}.
该属性的主要目的用来支持同义选项。第一个选项应该使用@samp{Mask(@var{name})}并且其它的应该使用@samp{Mask(@var{name}) MaskExists}。

@item Enum(@var{name})
@en The option's argument is a string from the set of strings associated
@en with the corresponding @samp{Enum} record.  The string is checked and
@en converted to the integer specified in the corresponding
@en @samp{EnumValue} record before being passed to option handlers.

该选项的参数是一个@samp{Enum} 记录中对应的字符串。在纪录传递选项处理之前，该字符串被选中并根据 @samp{EnumValue}中的值转化为相应整数。

@item Defer
@en The option should be stored in a vector, specified with @code{Var},
@en for later processing.
这个选项应该存储为一个向量，和 @code{Var} 一样，在后续过程中使用。

@item Alias(@var{opt})
@itemx Alias(@var{opt}, @var{arg})
@itemx Alias(@var{opt}, @var{posarg}, @var{negarg})
@en The option is an alias for @option{-@var{opt}}.  In the first form,
@en any argument passed to the alias is considered to be passed to
@en @option{-@var{opt}}, and @option{-@var{opt}} is considered to be
@en negated if the alias is used in negated form.  In the second form, the
@en alias may not be negated or have an argument, and @var{posarg} is
@en considered to be passed as an argument to @option{-@var{opt}}.  In the
@en third form, the alias may not have an argument, if the alias is used
@en in the positive form then @var{posarg} is considered to be passed to
@en @option{-@var{opt}}, and if the alias is used in the negative form
@en then @var{negarg} is considered to be passed to @option{-@var{opt}}.
别名的选项 @option{-@var{opt}}。第一种形式，被传递给别名的任何参数被认为传递给了@option{-@var{opt}}，@option{-@var{opt}} 被认为是否定形式如果别名是否定形式。第二种形式，别名可能不是否定或者没有任何参数，并且 @var{posarg} 被认为当作一个参数传递给 @option{-@var{opt}}。第三中形式，别名可能没有任何参数，如果别名被在积极形式中使用，则 @var{posarg} 被视为传递给@option{-@var{opt}}，并且如果别名被在否定形式中使用，则 @var{negarg} 被视为传递给@option{-@var{opt}}。

@en Aliases should not specify @code{Var} or @code{Mask} or
@en @code{UInteger}.  Aliases should normally specify the same languages
@en as the target of the alias; the flags on the target will be used to
@en determine any diagnostic for use of an option for the wrong language,
@en while those on the alias will be used to identify what command-line
@en text is the option and what text is any argument to that option.
别名不应该被制定为@code{Var} 或 @code{Mask} 或 @code{UInteger}。别名通常应该被制定为相同语言，然而这些别名在命令行是不被区分的。

@en When an @code{Alias} definition is used for an option, driver specs do
@en not need to handle it and no @samp{OPT_} enumeration value is defined
@en for it; only the canonical form of the option will be seen in those
@en places.
当 @code{Alias} 定义被一个选项使用的时候，driver specs不必做处理，并且没有对应 @samp{OPT_} 枚举值被定义，仅传统形式下的选项是可见的。

@item Ignore
@en This option is ignored apart from printing any warning specified using
@en @code{Warn}.  The option will not be seen by specs and no @samp{OPT_}
@en enumeration value is defined for it.
该选项在使用 @code{Warn} 时被忽略，该选项在specs中不可见，并且没有 @samp{OPT_} 对应的值。

@item SeparateAlias
@en For an option marked with @code{Joined}, @code{Separate} and
@en @code{Alias}, the option only acts as an alias when passed a separate
@en argument; with a joined argument it acts as a normal option, with an
@en @samp{OPT_} enumeration value.  This is for compatibility with the
@en Java @option{-d} option and should not be used for new options.
如果一个选项被标记为 @code{Joined}，@code{Separate} 和 @code{Alias}，该选项将仅作为一个传递分割参数时的时别名，每个参数就是一个普通选项，可以取 @samp{OPT_} 枚举值。因为兼容原因保留的Java @option{-d} 选项应该不再被使用。

@item Warn(@var{message})
@en If this option is used, output the warning @var{message}.
@en @var{message} is a format string, either taking a single operand with
@en a @samp{%qs} format which is the option name, or not taking any
@en operands, which is passed to the @samp{warning} function.  If an alias
@en is marked @code{Warn}, the target of the alias must not also be marked
@en @code{Warn}.
如果使用了该选项，输出警告信息 @var{message}。@var{message} 是一串格式化的字符串，要么是一个 @samp{%qs} 格式的单操作数选项名，要么是传递给 @samp{warning} 函数的多操作数组合。如果一个别名被标记成 @code{Warn} 了，那么该别名的目标也应该被标记成 @code{Warn}。

@item Report
@en The state of the option should be printed by @option{-fverbose-asm}.
选项的说明应该通过@option{-fverbose-asm}来打印。

@item Warning
@en This is a warning option and should be shown as such in
@en @option{--help} output.  This flag does not currently affect anything
@en other than @option{--help}.
警告选项，@option{--help} 输出中应该有相关内容。该参数目前无效。

@item Optimization
@en This is an optimization option.  It should be shown as such in
@en @option{--help} output, and any associated variable named using
@en @code{Var} should be saved and restored when the optimization level is
changed with @code{optimize} attributes.
优化选项。@option{--help} 输出中应该有相关内容，任何赋给该变量 @code{Var} 的值应该在优化等级  @code{optimize} 改变时被保存/恢复。

@item Undocumented
@en The option is deliberately missing documentation and should not
@en be included in the @option{--help} output.
选项有意的不提供文档，并且不应该包括在@option{--help}输出中。

@item Condition(@var{cond})
@en The option should only be accepted if preprocessor condition
@en @var{cond} is true.  Note that any C declarations associated with the
@en option will be present even if @var{cond} is false; @var{cond} simply
@en controls whether the option is accepted and whether it is printed in
@en the @option{--help} output.
选项应该只在预处理程序条件@var{cond}为真时才被接受。注意即使@var{cond}为假时，任何与选项相关的C声明也会存在；@var{cond}只是简单的控制选项是否被接受，以及是否在@option{--help}输出中被打印。

@item Save
@en Build the @code{cl_target_option} structure to hold a copy of the
@en option, add the functions @code{cl_target_option_save} and
@en @code{cl_target_option_restore} to save and restore the options.
@code{cl_target_option} 结构保存了一个选项的副本，增加 @code{cl_target_option_save} 和@code{cl_target_option_restore} 函数用来保存和恢复这个选项。

@item SetByCombined
@en The option may also be set by a combined option such as
@en @option{-ffast-math}.  This causes the @code{gcc_options} struct to
@en have a field @code{frontend_set_@var{name}}, where @code{@var{name}}
@en is the name of the field holding the value of this option (without the
@en leading @code{x_}).  This gives the front end a way to indicate that
@en the value has been set explicitly and should not be changed by the
@en combined option.  For example, some front ends use this to prevent
@en @option{-ffast-math} and @option{-fno-fast-math} from changing the
@en value of @option{-fmath-errno} for languages that do not use
@en @code{errno}.
该选项也可以通过 @option{-ffast-math} 一类的组合选项来设置。这导致 @code{gcc_options} 结构中保存一个 @code{frontend_set_@var{name}} 域，其中 @code{@var{name}} 是当前保持的这个选项（没有前缀 @code{x_}）值的名字。这样，前端就可以有办法分辨显式设置，以及不能被组合选项改变值。
例如，有些不直接使用 @code{errno} 的前端，通过使用 @option{-ffast-math} 和 @option{-fno-fast-math} 来改变 @option{-fmath-errno} 的值。
@end table
