@c Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008
@c Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@node 选项
@chapter 选项描述文件
@cindex option specification files
@cindex @samp{optc-gen.awk}

大多数GCC命令行选项由特定的选项定义文件来描述，按照惯例命名
为 @code{.opt}。这章描述了这些文件的格式。

@menu
* 选项文件格式::   文件的总体结构
* 选项属性::    所支持的选项属性
@end menu

@node 选项文件格式
@section 选项文件格式

选项文件是一个简单的记录列表，记录中的每个域独自占有一行，记录之间
由空行分隔。注释独自占有一行，可以出现在文件的任何地方，并且由分号
开头。分号前允许有空格。

文件中可以包含下列类型的记录：

@itemize @bullet
@item
语言定义记录。这些记录有两个域：字符串 @samp{Language} 和语言的名字。
一旦通过这种方式声明了一个语言，则可以作为选项属性来使用。
参见 @ref{选项属性}。

@item
A target specific save record to save additional information. These
records have two fields: the string @samp{TargetSave}, and a
declaration type to go in the @code{cl_target_option} structure.

@item
选项定义记录。这些记录有如下域： 
@enumerate
@item
选项的名字，去掉前导符“-”
@item
空格分隔的选项属性列表 (参见 @ref{选项属性})
@item
帮助文本，用于 @option{--help}（如果第二个域包含 @code{Undocumented} 
属性，则会忽略该域）
@end enumerate

缺省的，所有以“f”，“W”或者“m”开头的选项被隐式的假设会有一个“no-”形式。
该形式不必再单独列出来。如果以这些字母开头的选项没有“no-”形式，可以使
用 @code{RejectNegative} 属性来去掉。

帮助文本在显示前会被自动换行。正常情况下，选项的名字会被打印在输出的左
边，帮助文本被打印在右边。但是，如果帮助文本包含一个tab字符，则tab左边
的文本会被用来替代选项的名字，tab右边的文本作为帮助文本。这样就可以用来
详尽的阐述选项会使用什么类型的参数。

@item
目标掩码记录。这些记录有一个域，形式为 @samp{Mask(@var{x})}。选项处理脚
本将会自动在target_flags（参见运行时目标）中为每个掩码名字x分配一个位，
并且将 @code{MASK_@var{x}} 宏对应的位置位。同时，会声明一个 
@code{TARGET_@var{x}} 宏，当 @code{MASK_@var{x}} 位被置位时其值为1，否则为0。

它们最初是为了声明与用户选项没有联系的目标掩码，或者是因为这些掩码表示内
部的开关，或者是因为这些选项不在所有的配置中，但是还需要定义掩码的。
@end itemize

@node 选项属性
@section 选项属性

选项记录的第二个域可以指定下列属性：

@table @code
@item Common
选项对所有语言和目标都有效。 

@item Target
选项对所有语言都有效，但是目标特定的。 

@item @var{language}
当编译给定语言时，选项有效。

可以为多个不同的语言指定同一个选项。每个语言 @var{language} 必须
已经被之前的 @code{Language} 记录声明过。参见 @ref{选项文件格式}。

@item RejectNegative
选项没有“no-”形式。所有由“f”，“W”或者“m”开始的选项都被假设具有“no-”形式，
除非使用这个属性。

@item Negative(@var{othername})
选项将会关掉另一个选项 @var{othername}，这是去掉前导符“-”的选项名字。
这会通过 @code{Negative} 属性来传播一连串的选项关闭行为。

@item Joined
@itemx Separate
选项接受一个强制参数。@code{Joined} 指示选项和参数可以被包含在同一个
@code{argv} 项中（例如 @code{-mflush-func=@var{name}}）。
@code{Separate} 指示选项和参数可以为分开的 @code{argv} 项（如 @code{-o}）。
一个选项允许同时具有这两个属性。 

@item JoinedOrMissing
选项接受一个可选参数。如果参数给出，则会作为选项本身的 @code{argv} 项
的一部分。

该属性不能和 @code{Joined} 或 @code{Separate} 一起使用。

@item UInteger
选项的参数是一个非负整数。选项解析器将会在传给选项处理前检测并转换参数。

@item Var(@var{var})
该选项的状态将被存储在变量 @var{var} 中。存储状态的方式取决于选项的类型：

@itemize @bullet
@item
如果使用了 @code{Mask} 或者 @code{InverseMask} 属性，则 @var{var} 为包含
mask的整数变量。

@item
如果选项是一个正常的on/off开关，则 @var{var} 为整数变量，并且当启用该选
项时其值为非零。当使用选项的正面形式时，选项解析器会把变量置为1，当使用
“no-”形式的时候，置为0。

@item
如果选项接受一个参数，并且具有 @code{UInteger} 属性，则 @var{var} 为整数
变量，并且存储了参数的值。

@item
否则，如果选项接受一个参数，则 @var{var} 为指向参数字符串的指针。如果参数
是可选的并且没有给出，则该指针将为null。
@end itemize

选项处理脚本通常会在 @file{options.c} 中声明 @var{var}，并且在起动时间将
其初始化为0。你可以使用 @code{VarExists} 和 @code{Init} 来修改这种行为。

@item Var(@var{var}, @var{set})
选项控制一个整数变量 @var{var}，并且当 @var{var} 等于 @var{set} 时起作用。
当使用选项的正面形式时，选项解析器会把变量置为 @var{set}，当使用“no-”形式
的时候，置为 @code{!@var{set}}。

@var{var} 的声明方式与上面描述的单一参数形式的具有相同的方式。

@item VarExists
由 @var{Var} 属性指定的变量已经存在。这样，就不会有任何定义被增加到 
@file{options.c} 中。

应该只有在 @file{options.c} 之外声明了该变量的时候，才使用这个属性。

@item Init(@var{value})
由属性 @code{Var} 指定的变量应该被静态初始化为 @var{value}。

@item Mask(@var{name})
选项与 @code{target_flags} 变量（@pxref{运行时目标机}）中的一个位
相关联，并且当该位被置位时才起作用。你还可以指定 @code{Var} 去选择一
个变量，而不只是 @code{target_flags}。

选项处理脚本将会自动为选项分配一个唯一的位。如果选项与 @samp{target_flags}
关联，则脚本会将宏 @code{MASK_@var{name}} 设为合适的位掩码。它还会声明一个
@code{TARGET_@var{name}} 宏，当选项起作用时其值为1，否则为0。如果使用 
@var{Var} 将选项关联到不同的变量上，则相关的宏分别叫做 
@code{OPTION_MASK_@var{name}} 和 @code{OPTION_@var{name}}。

可以使用 @code{MaskExists} 来禁止自动位分配。

@item InverseMask(@var{othername})
@itemx InverseMask(@var{othername}, @var{thisname})
选项是具有 @code{Mask(@var{othername})}属性的另一个选项的反面。如果给出了
@var{thisname}，则选项处理脚本会声明一个 @code{TARGET_@var{thisname}} 宏，
当选项起作用时其为1，否则为0。

@item MaskExists
由 @code{Mask} 属性指定的掩码已经存在。这样，就不会有 @code{MASK} 和 
@code{TARGET} 定义被增加到 @file{options.h} 中。

该属性的主要目的用来支持同义选项。第一个选项应该使用 @samp{Mask(@var{name})} 
并且其它的应该使用 @samp{Mask(@var{name}) MaskExists}。

@item Report
选项的说明应该通过 @option{-fverbose-asm} 来打印。 

@item Undocumented
选项有意的不提供文档，并且不应该包括在 @option{--help} 输出中。 

@item Condition(@var{cond})
选项应该只在预处理程序条件 @var{cond} 为真时才被接受。注意即使 @var{cond} 为
假时，任何与选项相关的C声明也会存在；@var{cond}只是简单的控制选项是否被接受，
以及是否在 @option{--help} 输出中被打印。

@item Save
Build the @code{cl_target_option} structure to hold a copy of the
option, add the functions @code{cl_target_option_save} and
@code{cl_target_option_restore} to save and restore the options.
@end table
