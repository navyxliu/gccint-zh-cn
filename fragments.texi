@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
@c 1999, 2000, 2001, 2003, 2004, 2005, 2008 Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@en @node Fragments
@en @chapter Makefile Fragments
@node Fragments
@chapter Makefile片段
@cindex makefile fragment

@en When you configure GCC using the @file{configure} script, it will
@en construct the file @file{Makefile} from the template file
@en @file{Makefile.in}.  When it does this, it can incorporate makefile
@en fragments from the @file{config} directory.  These are used to set
@en Makefile parameters that are not amenable to being calculated by
@en autoconf.  The list of fragments to incorporate is set by
@en @file{config.gcc} (and occasionally @file{config.build}
@en and @file{config.host}); @xref{System Config}.
当使用 @file{configure} 脚本配置GCC时，将会从模版文件 
@file{Makefile.in} 中构建 @file{Makefile} 文件。这个时候，会将 
@file{config} 目录下的makefile片段合在一起。这些片段用来设置不
能被autoconf检测计算出的Makefile参数。要合并的片段列表由 
@file{config.gcc}（以及偶尔由 @file{config.build} 和 
@file{config.host}）设置；@xref{System Config}。

@en Fragments are named either @file{t-@var{target}} or @file{x-@var{host}},
@en depending on whether they are relevant to configuring GCC to produce
@en code for a particular target, or to configuring GCC to run on a
@en particular host.  Here @var{target} and @var{host} are mnemonics
@en which usually have some relationship to the canonical system name, but
@en no formal connection.
片段命名为 @file{t-@var{target}} 或者 @file{x-@var{host}}，取决
于它们是否与配置GCC来产生特定目标代码相关，或者配置GCC来运行在
特定主机。这里的 @var{target} 和 @var{host} 是（Here target and 
host are mnemonics which usually have some relationship to the 
canonical system name, but no formal connection.）

@en If these files do not exist, it means nothing needs to be added for a
@en given target or host.  Most targets need a few @file{t-@var{target}}
@en fragments, but needing @file{x-@var{host}} fragments is rare.
如果不存在这些文件，则意味着不需要对给定目标或主机添加什么。大多
数目标机需要一些 @file{t-@var{target}} 片段，不过需要 
@file{x-@var{host}} 片段的很少。

@en @menu
@en * Target Fragment:: Writing @file{t-@var{target}} files.
@en * Host Fragment::   Writing @file{x-@var{host}} files.
@en @end menu
@menu
* Target Fragment:: 写 @file{t-@var{target}} 文件。
* Host Fragment::   写 @file{x-@var{host}} 文件。
@end menu

@en @node Target Fragment
@en @section Target Makefile Fragments
@node Target Fragment
@section 目标机Makefile片段
@cindex target makefile fragment
@cindex @file{t-@var{target}}

@en Target makefile fragments can set these Makefile variables.
目标makefile片段能够设置这些Makefile变量。

@en @table @code
@en @findex LIBGCC2_CFLAGS
@en @item LIBGCC2_CFLAGS
@en Compiler flags to use when compiling @file{libgcc2.c}.
@en 
@en @findex LIB2FUNCS_EXTRA
@en @item LIB2FUNCS_EXTRA
@en A list of source file names to be compiled or assembled and inserted
@en into @file{libgcc.a}.
@en 
@en @findex Floating Point Emulation
@en @item Floating Point Emulation
@en To have GCC include software floating point libraries in @file{libgcc.a}
@en define @code{FPBIT} and @code{DPBIT} along with a few rules as follows:
@en @smallexample
@en # We want fine grained libraries, so use the new code
@en # to build the floating point emulation libraries.
@en FPBIT = fp-bit.c
@en DPBIT = dp-bit.c
@en 
@en 
@en fp-bit.c: $(srcdir)/config/fp-bit.c
@en         echo '#define FLOAT' > fp-bit.c
@en         cat $(srcdir)/config/fp-bit.c >> fp-bit.c
@en 
@en dp-bit.c: $(srcdir)/config/fp-bit.c
@en         cat $(srcdir)/config/fp-bit.c > dp-bit.c
@en @end smallexample
@en 
@en You may need to provide additional #defines at the beginning of @file{fp-bit.c}
@en and @file{dp-bit.c} to control target endianness and other options.
@en 
@en 
@en @findex CRTSTUFF_T_CFLAGS
@en @item CRTSTUFF_T_CFLAGS
@en Special flags used when compiling @file{crtstuff.c}.
@en @xref{Initialization}.
@en 
@en @findex CRTSTUFF_T_CFLAGS_S
@en @item CRTSTUFF_T_CFLAGS_S
@en Special flags used when compiling @file{crtstuff.c} for shared
@en linking.  Used if you use @file{crtbeginS.o} and @file{crtendS.o}
@en in @code{EXTRA-PARTS}.
@en @xref{Initialization}.
@en 
@en @findex MULTILIB_OPTIONS
@en @item MULTILIB_OPTIONS
@en For some targets, invoking GCC in different ways produces objects
@en that can not be linked together.  For example, for some targets GCC
@en produces both big and little endian code.  For these targets, you must
@en arrange for multiple versions of @file{libgcc.a} to be compiled, one for
@en each set of incompatible options.  When GCC invokes the linker, it
@en arranges to link in the right version of @file{libgcc.a}, based on
@en the command line options used.
@en 
@en The @code{MULTILIB_OPTIONS} macro lists the set of options for which
@en special versions of @file{libgcc.a} must be built.  Write options that
@en are mutually incompatible side by side, separated by a slash.  Write
@en options that may be used together separated by a space.  The build
@en procedure will build all combinations of compatible options.
@en 
@en For example, if you set @code{MULTILIB_OPTIONS} to @samp{m68000/m68020
@en msoft-float}, @file{Makefile} will build special versions of
@en @file{libgcc.a} using the following sets of options:  @option{-m68000},
@en @option{-m68020}, @option{-msoft-float}, @samp{-m68000 -msoft-float}, and
@en @samp{-m68020 -msoft-float}.
@en 
@en @findex MULTILIB_DIRNAMES
@en @item MULTILIB_DIRNAMES
@en If @code{MULTILIB_OPTIONS} is used, this variable specifies the
@en directory names that should be used to hold the various libraries.
@en Write one element in @code{MULTILIB_DIRNAMES} for each element in
@en @code{MULTILIB_OPTIONS}.  If @code{MULTILIB_DIRNAMES} is not used, the
@en default value will be @code{MULTILIB_OPTIONS}, with all slashes treated
@en as spaces.
@en 
@en For example, if @code{MULTILIB_OPTIONS} is set to @samp{m68000/m68020
@en msoft-float}, then the default value of @code{MULTILIB_DIRNAMES} is
@en @samp{m68000 m68020 msoft-float}.  You may specify a different value if
@en you desire a different set of directory names.
@en 
@en @findex MULTILIB_MATCHES
@en @item MULTILIB_MATCHES
@en Sometimes the same option may be written in two different ways.  If an
@en option is listed in @code{MULTILIB_OPTIONS}, GCC needs to know about
@en any synonyms.  In that case, set @code{MULTILIB_MATCHES} to a list of
@en items of the form @samp{option=option} to describe all relevant
@en synonyms.  For example, @samp{m68000=mc68000 m68020=mc68020}.
@en 
@en @findex MULTILIB_EXCEPTIONS
@en @item MULTILIB_EXCEPTIONS
@en Sometimes when there are multiple sets of @code{MULTILIB_OPTIONS} being
@en specified, there are combinations that should not be built.  In that
@en case, set @code{MULTILIB_EXCEPTIONS} to be all of the switch exceptions
@en in shell case syntax that should not be built.
@en 
@en For example the ARM processor cannot execute both hardware floating
@en point instructions and the reduced size THUMB instructions at the same
@en time, so there is no need to build libraries with both of these
@en options enabled.  Therefore @code{MULTILIB_EXCEPTIONS} is set to:
@en @smallexample
@en *mthumb/*mhard-float*
@en @end smallexample
@en 
@en @findex MULTILIB_EXTRA_OPTS
@en @item MULTILIB_EXTRA_OPTS
@en Sometimes it is desirable that when building multiple versions of
@en @file{libgcc.a} certain options should always be passed on to the
@en compiler.  In that case, set @code{MULTILIB_EXTRA_OPTS} to be the list
@en of options to be used for all builds.  If you set this, you should
@en probably set @code{CRTSTUFF_T_CFLAGS} to a dash followed by it.
@en 
@en @findex NATIVE_SYSTEM_HEADER_DIR
@en @item NATIVE_SYSTEM_HEADER_DIR
@en If the default location for system headers is not @file{/usr/include},
@en you must set this to the directory containing the headers.  This value
@en should match the value of the @code{SYSTEM_INCLUDE_DIR} macro.
@en 
@en @findex SPECS
@en @item SPECS
@en Unfortunately, setting @code{MULTILIB_EXTRA_OPTS} is not enough, since
@en it does not affect the build of target libraries, at least not the
@en build of the default multilib.  One possible work-around is to use
@en @code{DRIVER_SELF_SPECS} to bring options from the @file{specs} file
@en as if they had been passed in the compiler driver command line.
@en However, you don't want to be adding these options after the toolchain
@en is installed, so you can instead tweak the @file{specs} file that will
@en be used during the toolchain build, while you still install the
@en original, built-in @file{specs}.  The trick is to set @code{SPECS} to
@en some other filename (say @file{specs.install}), that will then be
@en created out of the built-in specs, and introduce a @file{Makefile}
@en rule to generate the @file{specs} file that's going to be used at
@en build time out of your @file{specs.install}.
@en 
@en @item T_CFLAGS
@en These are extra flags to pass to the C compiler.  They are used both
@en when building GCC, and when compiling things with the just-built GCC@.
@en This variable is deprecated and should not be used.
@en @end table
@table @code
@findex LIBGCC2_CFLAGS
@item LIBGCC2_CFLAGS
编译 @file{libgcc2.c} 时使用的编译器标记。
@findex LIB2FUNCS_EXTRA
@item LIB2FUNCS_EXTRA
将被编译或汇编，并插入 @file{libgcc.a} 的源文件名列表。
@findex Floating Point Emulation
@item Floating Point Emulation
要使GCC在 @file{libgcc.a} 中包括软浮点库，则使用下面的一些规则
来定义 @code{FPBIT} 和 @code{DPBIT}：

@smallexample
# We want fine grained libraries, so use the new code
# to build the floating point emulation libraries.
FPBIT = fp-bit.c
DPBIT = dp-bit.c


fp-bit.c: $(srcdir)/config/fp-bit.c
        echo '#define FLOAT' > fp-bit.c
        cat $(srcdir)/config/fp-bit.c >> fp-bit.c

dp-bit.c: $(srcdir)/config/fp-bit.c
        cat $(srcdir)/config/fp-bit.c > dp-bit.c
@end smallexample

可能需要在 @file{fp-bit.c} 和 @file{dp-bit.c} 的开始处提供额外的
#define来控制目标机大小端和其它选项。
@findex CRTSTUFF_T_CFLAGS
@item CRTSTUFF_T_CFLAGS
编译 @file{crtstuff.c} 时使用的特定标记。@xref{Initialization}。
@findex CRTSTUFF_T_CFLAGS_S
@item CRTSTUFF_T_CFLAGS_S
编译共享连接的 @file{crtstuff.c} 时使用的特定标记。用于在 
@code{EXTRA-PARTS} 中使用 @file{crtbeginS.o} 和 @file{crtendS.o} 
时。@xref{Initialization}。
@findex MULTILIB_OPTIONS
@item MULTILIB_OPTIONS
对于一些目标机，使用不同方式调用GCC所产生的目标对象不能被一起连接。
例如，对于一些目标机，GCC可产生大端和小端代码。对于这些目标机，必须
安排编译多个版本的 @file{libgcc.a}，对应于每个不相兼容的选项集。当
GCC调用连接器时，它会根据使用的命令行选项来安排连接正确版本的 
@file{libgcc.a}。

@code{MULTILIB_OPTIONS} 宏列出了必须构建特定版本 @file{libgcc.a} 的
选项集。将互不兼容的选项并排写出，并由斜线分隔。将可以一起使用的选项
由空格分开。构建程序将会构建所有兼容选项的组合。

例如，如果将 @code{MULTILIB_OPTIONS} 设置为 
@samp{m68000/m68020 msoft-float}，@file{Makefile} 将会使用下列选项集
来构建特定版本的 @file{libgcc.a}：@option{-m68000}, @option{-m68020}, 
@option{-msoft-float}, @samp{-m68000 -msoft-float}, 和 
@samp{-m68020 -msoft-float}。
@findex MULTILIB_DIRNAMES
@item MULTILIB_DIRNAMES
如果使用了 @code{MULTILIB_OPTIONS}，该变量指定了用于存放不同库的目录名。
@code{MULTILIB_OPTIONS} 中的每个元素，对应于 @code{MULTILIB_DIRNAMES} 中
的每个元素。如果没有使用 @code{MULTILIB_DIRNAMES}，缺省值将为 
@code{MULTILIB_OPTIONS}，并使用斜线来替代空格。

例如，如果 @code{MULTILIB_OPTIONS} 设置为 @samp{m68000/m68020 msoft-float}，
则 @code{MULTILIB_DIRNAMES} 的缺省值为 @samp{m68000 m68020 msoft-float}。
如果需要不同的目录名时，可以指定不同的值。
@findex MULTILIB_MATCHES
@item MULTILIB_MATCHES
有时，相同的选项可以被写成两种不同的方式。如果一个选项在 
@code{MULTILIB_OPTIONS} 式列出，GCC需要知道它的任何同义形式。这种情况下，
将 @code{MULTILIB_MATCHES} 设置为 @samp{option=option} 形式的列表来描述
所有相关的同义词。例如，@samp{m68000=mc68000 m68020=mc68020}。
@findex MULTILIB_EXCEPTIONS
@item MULTILIB_EXCEPTIONS
有时，当 @code{MULTILIB_OPTIONS} 中指定了多个选项集时，会有些组合不能被
构建。这种情况下，将 @code{MULTILIB_EXCEPTIONS} 设置为所有不被构建的例外。

例如ARM处理器不能执行同时执行硬件浮点指令和缩减大小的THUMB指令，这样就没
有必要构建这些选项组合的库。因此将 @code{MULTILIB_EXCEPTIONS} 设为：

@smallexample
*mthumb/*mhard-float*
@end smallexample
@findex MULTILIB_EXTRA_OPTS
@item MULTILIB_EXTRA_OPTS
有时当构建多版本 @file{libgcc.a} 时，有些选项需要总是被传给编译器。这种情
况下，将 @code{MULTILIB_EXTRA_OPTS} 设置为用于所有构建时的选项列表。如果设
置了该宏，则可能要将 @code{CRTSTUFF_T_CFLAGS} 设置为跟在其后的破折号。
@findex NATIVE_SYSTEM_HEADER_DIR
@item NATIVE_SYSTEM_HEADER_DIR
如果系统头文件的缺省位置不是 @file{/usr/include}，则必须将该宏设置为包含头
文件的目录。该值应该匹配 @code{SYSTEM_INCLUDE_DIR} 宏的值。
@findex SPECS
@item SPECS
不幸的是，设置 @code{MULTILIB_EXTRA_OPTS} 并不足够，因为它并不影响目标库的
构建，最起码对于缺省multilib的构建是这样的。一种可能的方法是使用 
@code{DRIVER_SELF_SPECS} 从 @file{specs} 文件中取得选项，就像是它们被传给了
编译器驱动程序的命令行。但是，你不想在安装工具链之后再增加这些选项，所以你
可以在安装原始的内嵌 @file{specs} 时，调节在构建工具链时使用的 @file{specs} 
文件。诀窍是将 @code{SPECS} 设置为其它文件名（例如 @file{specs.install}），
然后该文件将会由内建 @file{specs} 创建出来，并且引出一个 @file{Makefile} 规
则来生成 @file{specs} 文件，在构建时候使用。
@item T_CFLAGS
These are extra flags to pass to the C compiler.  They are used both
when building GCC, and when compiling things with the just-built GCC@.
This variable is deprecated and should not be used.
@end table

@en @node Host Fragment
@en @section Host Makefile Fragments
@node Host Fragment
@section 主机Makefile片段
@cindex host makefile fragment
@cindex @file{x-@var{host}}

@en The use of @file{x-@var{host}} fragments is discouraged.  You should only
@en use it for makefile dependencies.
不鼓励使用 @file{x-@var{host}} 片段。应该只在没有其它机制可以获得所需要的时候
才使用。
