@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
@c 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@node Portability
@chapter GCC的可移植性
@cindex portability
@cindex GCC and portability

GCC自身移植的目标是任何 @code{int} 长度不小于32位的机器。
GCC要求的数据内存地址空间是以字节为单位的线性（flat）非分段的地址空间，代码地址空间没有这个限制。
目标机的ABI可以是8、16、32或64-bit @code{int} 类型。 @code{char} 类型可以大于8bit。

GCC从机器描述文件（Machine Description，MD）中获取目标机的信息。
MD文件里包含目标机支持的指令的代数规则（algebraic formula）。
这种描述目标机的方法很清晰，但是有时候不足以描述目标机的所有信息。
这个时候就定义一些拼凑的（ad-hoc）参数来填补。
可移植性的目的是为了减少编译器的开发负担，而不是为了可移植而可移植。

@cindex endianness
@cindex autoincrement addressing, availability
@findex abort

GCC本身没有任何特定平台相关的代码，但是它确实有一些代码依赖于机器的参数特性（parameters），
例如大头格式还是小头格式、是否支持递增寻址。
在RTL生成（RTL-generation）的pass中，
往往需要多个策略（strategies）来为一个特定的语法树（syntax tree）生成代码。
目前普遍的和一些特定的参数组合能被正确处理，不是所有可能的参数组合都被考虑到了。
一个新的目标平台（target）可能需要额外的处理策略。
你可以通过GCC是否异常退出（@code{abort}）来判断这一点。
幸运的是新的策略可以以一种机器无关的方式加入，而且仅仅影响使用这个策略的目标平台。

