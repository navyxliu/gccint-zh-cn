@c Copyright (C) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
@c 1999, 2000, 2001, 2002, 2004 Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@en @node Portability
@en @chapter GCC and Portability
@node Portability
@chapter GCC与可移植性
@cindex portability
@cindex GCC and portability

@en GCC itself aims to be portable to any machine where @code{int} is at least
@en a 32-bit type.  It aims to target machines with a flat (non-segmented) byte
@en addressed data address space (the code address space can be separate).
@en Target ABIs may have 8, 16, 32 or 64-bit @code{int} type.  @code{char}
@en can be wider than 8 bits.
GCC自身的目标是可以移植到任何 @code{int} 类型最小为32位的机器上。它是针对具有平坦（不是分段的）字节寻址的数据地址空间的目标机器（代码地址空间可以单独分开）。目标机器的ABI可以具有8，16，32或者64位的 @code{int} 类型。 @code{char} 可以大于8位。

@en GCC gets most of the information about the target machine from a machine
@en description which gives an algebraic formula for each of the machine's
@en instructions.  This is a very clean way to describe the target.  But when
@en the compiler needs information that is difficult to express in this
@en fashion, ad-hoc parameters have been defined for machine descriptions.
@en The purpose of portability is to reduce the total work needed on the
@en compiler; it was not of interest for its own sake.
GCC通过机器描述来获得目标机器的大部分信息。机器描述给出了每条机器指令的代数方程式表示。这是一种非常整洁的描述目标机器的方法。但是当编译器所需要的信息难以通过这种形式来表示的时候，便需要为机器描述定义一些临时的（ad-hoc）参数。可移植性的目的是为了减少编译器的总的工作量，对本身没有什么用处。

@cindex endianness
@cindex autoincrement addressing, availability
@findex abort
@en GCC does not contain machine dependent code, but it does contain code
@en that depends on machine parameters such as endianness (whether the most
@en significant byte has the highest or lowest address of the bytes in a word)
@en and the availability of autoincrement addressing.  In the RTL-generation
@en pass, it is often necessary to have multiple strategies for generating code
@en for a particular kind of syntax tree, strategies that are usable for different
@en combinations of parameters.  Often, not all possible cases have been
@en addressed, but only the common ones or only the ones that have been
@en encountered.  As a result, a new target may require additional
@en strategies.  You will know
@en if this happens because the compiler will call @code{abort}.  Fortunately,
@en the new strategies can be added in a machine-independent fashion, and will
@en affect only the target machines that need them.
GCC不含有机器相关的代码，但是它确实含有依赖于机器参数的代码，例如大小端（在一个字中，最高有效位是位于地址最高的字节中还是最低的字节中）以及是否可以自动递增寻址。在RTL生成过程，经常需要有多种策略来针对特定类别的语法树生成代码。策略适用于不同的参数组合。通常，并不是所有可能的情况都会被覆盖到，而只是最常见的一些或者是已经遇到的一些。这样的话，一个新的目标机可能需要额外的策略。当这种情况发生时，编译器便会调用 @code{abort}。幸运的是一个新的策略可以通过机器无关的方式添加，并且只会影响到需要它们的目标机器。
