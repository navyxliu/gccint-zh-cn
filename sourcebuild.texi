@c Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009
@c Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@node 源目录
@chapter 源目录结构和构建系统

这一章描述了GCC的源文件目录结构，以及GCC是如何被构建的。关于构建
和安装GCC的用户文档在另一个单独的手册里作介绍
（@uref{http://gcc.gnu.org/install/}），这里假设你对此已经有所了
解。

@menu
* 配置术语::    有关配置的术语和历史。
* 顶层目录::    顶层源文件目录。
* gcc目录::     @file{gcc} 子目录。
* 测试包::      GCC测试包。
@end menu

@include configterms.texi

@node 顶层目录
@section 顶层源文件目录

在GCC发行版本中，顶层源目录下包含了几个与其它软件发行版本，比如
GNU Binutils，共享的文件和目录。另外还包含几个子目录，里面包含了
GCC的各个部分以及运行时库。

@table @file
@item boehm-gc
Boehm保守垃圾收集器，作为Java运行时库的一部分。

@item contrib
贡献的脚本，可以用来和GCC一起使用。其中，@file{contrib/texi2pod.pl} 
作为GCC构建过程的一部分，可以用来将Texinfo手册生成为man页。

@item fastjar
@command{jar} 命令的一个实现，和Java前端一起使用。

@item fixincludes
用于修订系统头文件，使得可以和GCC一起工作。更多信息参见
@file{fixincludes/README} 。通过这种机制修订的头文件被安装在
@file{@var{libsubdir}/include-fixed}下。
@file{README-fixinc}也一起被安装，作为
@file{@var{libsubdir}/include-fixed/README}。

@item gcc
GCC本身的主要源文件（运行时库除外），包括优化器，不同目标体系结构
的支持，语言前端和测试包。
参见@ref{gcc目录, , @file{gcc} 子目录}。

@item include
@code{libiberty} 库的头文件。

@item intl
GNU @code{libintl}，来自GNU @code{gettext}，用于在libc中不包含它的系统上。

@item libada
Ada运行时库。

@item libcpp
C预处理器库。

@item libgfortran
Fortran运行时库。

@item libffi
@code{libffi} 库，作为Java运行时库的一部分。

@item libiberty
@code{libiberty} 库，实现了一些常用的数据结构和算法，用于提高可移植性。
@pxref{Top, ,Introduction, libiberty, @sc{gnu} libiberty}。

@item libjava
Java运行时库。

@item libmudflap
@code{libmudflap} 库用于instrument指针和数组的dereferencing操作。

@item libobjc
Objective-C和Objective-C++运行时库。

@item libstdc++-v3
C++运行时库。

@item maintainer-scripts
@code{gcc.gnu.org} 上的 @code{gccadmin} 帐户使用的脚本。

@item zlib
@code{zlib} zlib压缩库，用于Java前端，作为Java运行库的一部分。
@end table

顶层目录的构建系统，包括子目录递归的工作方式，以及构建各种库的运行时库的
处理方式，这些在GNU Binutils的一个单独手册中有介绍。
@pxref{Top, , GNU configure and build system, configure, The GNU configure and build system}

@node gcc目录
@section @file{gcc} 子目录

@file{gcc} 目录包含了GCC的许多C源文件，用于配置和构建过程的其
它文件，以及文档和测试包子目录。GCC的源文件在一个单独的章节里
进行介绍。参见@ref{Passes, , 编译器的Passes和相关文件}。

@menu
* 子目录::         @file{gcc} 的子目录。
* 配置::           配置过程，以及所使用的文件。
* 构建::           @file{gcc} 目录下的构建系统。
* Makefile::       @file{gcc/Makefile} 中的目标。
* 库文件::         @file{gcc/} 下的库源文件和头文件。
* 头文件::         GCC安装的头文件。
* 文档::           构建GCC中的文档。
* 前端::           语言前端剖析。
* 后端::           目标后端剖析。
@end menu

@node 子目录
@subsection @file{gcc}的子目录

@file{gcc} 目录包含了下列子目录：

@table @file
@item @var{language}
各种语言的子目录。包含了文件 @file{config-lang.in} 的目录是语言子目录。
子目录 @file{cp} (C++), @file{objc} (Objective-C) 和 @file{objcp} 
(Objective-C++)的内容在该手册中有介绍（参见 
@ref{Passes, , Passes and Files of the Compiler}）；其它语言的没有。
关于这些目录下的文件的详细信息，参见 @ref{前端, , 语言前端剖析}。

@item config
支持的体系结构和操作系统的配置文件。关于这个目录下的文件的详情，
参见 @ref{后端, , 目标后端剖析}。 

@item doc
GCC的Texinfo文档，和自动生成的man页，以及对将安装手册转换成HTML的支持。
参见 @ref{文档}。

@item ginclude
GCC安装的，那些主要由独立实现C标准所需要的系统头文件。
关于什么时候安装这些以及其它头文件的详情，
参见 @ref{头文件, , GCC安装的头文件}。 

@item po
用于把GCC产生的信息翻译成各种语言（如德语、西班牙语等）的信息目录，
@file{@var{language}.po}。这个目录还包含了信息目录模板 @file{gcc.pot}, 
封装 @command{gettext} 以提取GCC信息并创建 @file{gcc.pot} 的 @file{exgettext}
（通过命令 @samp{make gcc.pot} 执行），以及不需要提取信息的文件列表
@file{EXCLUDES}。

@item testsuite
GCC测试包（运行时库的除外）。参见 @ref{测试包}。
@end table

@node 配置
@subsection @file{gcc}目录下的配置 

@file{gcc} 目录是通过Autoconf生成的脚本@file{configure}来配置的。
@file{configure}脚本由@file{configure.ac}和@file{aclocal.m4}生成。
Autoheader通过@file{configure.ac}和@file{acconfig.h}来生成文件@file{config.in}。
文件@file{cstamp-h.in}作为时间戳使用。

@menu
* 配置片段::  @file{configure}使用的脚本。
* 系统配置::  @file{config.build}，@file{config.host}和@file{config.gcc}文件。
* 配置文件::  运行@file{configure}而创建的文件。
@end menu

@node 配置片段
@subsubsection @file{configure}使用的脚本

@file{configure}使用一些其它的脚本帮助其来完成工作：

@itemize @bullet
@item 
使用了位于顶层目录的标准GNU @file{config.sub}和@file{config.guess}文件。

@item 
文件@file{config.gcc}被用来处理针对特定目标机器的配置。
文件@file{config.build}被用来处理针对特定构建机器的配置。
文件@file{config.host}被用来处理针对特定主机的配置。
（通常，这些只用于那些无法通过Autoconf测试来得到的那些特征。）
关于这些文件的详细内容，参见 
@ref{系统配置, ,@file{config.build}，@file{config.host}和@file{config.gcc}文件}。

@item 
每个language子目录有一个@file{@var{language}/config-lang.in}，
用来进行前端特定的配置。关于该文件的详情，参见 
@ref{Front End Config, , The Front End @file{config-lang.in} File}。

@item 
辅助脚本@file{configure.frag}，被@file{configure}用来产生输出。
@end itemize

@node 系统配置
@subsubsection @file{config.build}，@file{config.host}和@file{config.gcc}文件

@file{config.build}文件包含了针对构建GCC的特殊系统的特定规则。
通常尽量不使用这个文件，因为autoconf可以检测出构建系统的行为。

@file{config.host}文件包含了将要运行GCC的特殊系统的特定规则。该文件很少被用到。

@file{config.gcc}文件包含了GCC生成代码所针对特殊系统的特定规则。通常需要该文件。

每一个文件的开始部分都有一个设置的shell变量列表及其描述。

FIXME：介绍这些文件的内容，以及需要设置什么变量来控制build,host和target配置。

@include configfiles.texi

@node 构建
@subsection @file{gcc}目录下的构建系统 

FIXME: 描述构建系统，包括什么阶段构建了什么。同时列出在构建过程中使用的，
不属于GCC本身的而因此没有在下面记录的，各种源文件（参见 @ref{Passes}）。

@include makefile.texi

@node 库文件
@subsection 在@file{gcc}目录下的库源文件和头文件

FIXME：列出并说明在@file{gcc}目录下的不被构建到GCC可执行程序中，
而是作为运行时库的一部分或者目标文件的所有C源文件和头文件。
例如@file{crtstuff.c}和@file{unwind-dw2.c}。
关于@file{ginclude}目录的详细介绍，参见 @ref{头文件, ,GCC安装的头文件}。

@node 头文件
@subsection GCC安装的头文件

通常，GCC希望所使用的头文件大部分由系统C库提供。但是在需要的时候，
GCC会修改那些头文件以便能够工作，并且会安装一些需要单独实现的头文件。
这些头文件被安装在@file{@var{libsubdir}/include}下。
GCC也安装了些非C运行时库的头文件；这些没有在这里列出。
（FIXME：在某处给出这些的文档。）

GCC所安装一些头文件来自@file{ginclude}目录下。
这些头文件@file{iso646.h}, @file{stdarg.h}, @file{stdbool.h}, @file{stddef.h}
将被安装在@file{@var{libsubdir}/include}下，除非通过在目标Makefile片段中
（参见 @ref{目标片段}）设置@code{USER_H}来改变。

除了这些头文件，以及那些GCC为了能够正常工作而修改的系统头文件，
@file{@var{libsubdir}/include}下还可能安装了其它头文件。
@file{config.gcc}可以设置@code{extra_headers}，
用来指出将@file{config}目录下的其它头文件安装在一些系统上。

GCC使用@file{ginclude/float.h}，来安装自己版本的@code{<float.h>}，
并通过拷贝命令行选项来改变浮点数的表示。

GCC还安装它自己版本的@code{<limits.h>}；它是从@file{glimits.h}中生成的，
以及@file{limitx.h}和@file{limity.h}，如果系统还具有自己版本@code{<limits.h>}。
（GCC提供自己的头文件，是因为ISO C独立实现的需要，
但是该头文件还需要包含系统头文件，
是因为其它标准像POSIX指定的额外的值在@code{<limits.h>}中有定义）
系统的@code{<limits.h>}头文件通过@file{@var{libsubdir}/include/syslimits.h}来使用，
它是从@file{gsyslimits.h}复制过来的，如果其不需要修改为与GCC一起工作；
如果需要修改，@file{syslimits.h}为修改后的副本。

当@file{config.gcc}设置@code{use_gcc_tgmath}为@code{yes}时，
GCC还将安装@code{<tgmath.h>}。

@node 文档
@subsection 构建文档

主要的GCC文档使用了Texinfo格式的手册形式。这些按照info格式安装；
DVI版本的可以通过@samp{make dvi}来生成，PDF版本的通过@samp{make pdf}，
以及HTML版本的通过@command{make html}。另外，一些man页通过Texinfo手册来生成，
还有一些其它各种文档的文本文件，
以及运行时库具有@file{gcc}目录之外的它们自己的文档。
FIXME：列出运行时库的文档。

@menu
* Texinfo手册::   Texinfo格式的GCC手册。
* 生成Man Page::  通过Texinfo手册生成man pages。
* 其它文档::      各种杂项文档的文本文件。
@end menu

@node Texinfo手册
@subsubsection Texinfo手册

GCC整体的以及C和C++前端的手册，在文件@file{doc/*.texi}中。
其它前端自己的手册在文件@file{@var{language}/*.texi}中。
通用文件@file{doc/include/*.texi}被提供用来在多个手册中包含；
下列文件在@file{doc/include}中：

@table @file
@item fdl.texi
GNU自由文档许可。 
@item funding.texi
“资助自由软件”章节。 
@item gcc-common.texi
手册的通用定义。 
@item gpl.texi
@itemx gpl_v3.texi
GNU通用公共许可。 
@item texinfo.tex
与GCC手册一起工作的@file{texinfo.tex}副本。 
@end table

DVI格式的手册通过@samp{make dvi}生成，
其使用了@command{texi2dvi}（通过Makefile宏@code{$(TEXI2DVI)}）。
PDF格式的手册通过@samp{make pdf}生成，
其使用了@command{texi2pdf}（通过Makefile宏@code{$(TEXI2PDF)}）。
HTML格式的手册通过@command{make html}生成。
info手册通过@samp{make info}生成（作为bootstrap的一部分运行）；
这个是在源目录中生成手册，使用@command{makeinfo}，
通过Makefile宏@code{$(MAKEINFO)}，它们被包含在发现版本中。

手册在GCC网站上也有提供，HTML和PostScript格式的。
这是通过脚本@file{maintainer-scripts/update_web_docs}生成的。
在线提供的每个手册都必须在那个文件中的@code{MANUALS}定义中列出；
文件@file{@var{name}.texi}必须在源树中只出现一次，
输出手册必须与源文件具有相同的名字。
（但是，手册中包含的其它不是根文件的Texinfo文件，
其名字可能会在源树中出现多次。）
手册文件@file{@var{name}.texi}应该只包含它目录下或者@file{doc/include}下的
其它文件。HTML手册将通过@samp{makeinfo --html}生成，
PostScript手册将通过@command{texi2dvi}和@command{dvips}，
PDF手册通过@command{texi2pdf}。为了使生成的在线手册可以工作，
所有属于手册一部分的Texinfo文件都必须放入CVS，即使它们是被生成的文件。

安装手册，@file{doc/install.texi}，也在GCC网站上有提供。
HTML版本通过脚本@file{doc/install.texi2html}生成。

@node 生成Man Page
@subsubsection 生成Man Page

出于用户的需求，除了完整的Texinfo手册以外，还提供了从那些手册中提取的man页。
这些man页使用@file{contrib/texi2pod.pl}和@command{pod2man}，
从Texinfo手册中生成。（@command{g++}, @file{cp/g++.1}的man页，
只是包含了一个对@file{gcc.1}的@samp{.so}引用，
但所有其它man页是从Texinfo手册生成的。）

因为许多系统可能没有安装生成man页所需的工具，
所以它们只有当@file{configure}脚本检测到新近安装了足够的工具时才会被生成，
并且Makefile允许在生成man页失败时，而不会终止构建。
Man页也包含在发行版本中。它们在源目录下生成。

Texinfo文件中起始于@samp{@@c man}的Magic注释，
用来控制Texinfo文件中哪些部分放到man页中。
@file{texi2pod.pl}只支持Texinfo的一个子集，并且当生成新的man页时，
可能需要增加对Texinfo特征的更多支持。为了提高man页输出，
在@file{doc/include/gcc-common.texi}中提供了一些@file{texi2pod.pl}可以理解的
特定的Texinfo宏：

@table @code
@item @@gcctabopt
选项表，以@samp{@@table @@gcctabopt}形式使用，
用于@samp{@@code}的打印输出效果比@samp{@@option}的好，
但是对于man页，却想要不同的效果的情况。 
@item @@gccoptlist
用于手册中的选项列表。 
@item @@gol
用在@samp{@@gccoptlist}中每行的结尾。
这可以避免由于不同的Texinfo格式化对@samp{@@gccoptlist}宏的不同处理所带来的问题。
@end table

FIXME: 更加详细的描述@file{texi2pod.pl}输入语言和magic注释。

@node 其它文档
@subsubsection 其它文档

除了GCC安装的正式文件以外，还有一些其它杂项文档的文本文件：

@table @file
@item ABOUT-GCC-NLS
GCC本地语言支持的笔记。FIXME：这应该为手册的一部分，而不是单独的文件。 
@item ABOUT-NLS
自由翻译项目的笔记。 
@item COPYING
GNU通用公共许可。 
@item COPYING.LIB
GNU宽松通用公共许可。 
@item *ChangeLog*
@itemx */ChangeLog*
GCC各部分的更新日志。 
@item LANGUAGES
GCC前端接口的一些改动的详细情况。
FIXME：该文件中信息应该为本手册中前端接口通用文档的一部分。 
@item ONEWS
旧版本GCC中的新特征信息。（对于近期版本，信息在GCC网站上。） 
@item README.Portability
关于在GCC中写代码时的可移植性的信息。
FIXME：为什么这部分不作为本手册中的GCC代码约定？ 
@end table

FIXME: 记载子目录中的这样的文件，
起码像@file{config}, @file{cp}, @file{objc}, @file{testsuite}。 

@node 前端
@subsection 语言前端剖析

GCC的语言前端具有下列部分：

@itemize @bullet
@item
@file{gcc}下的目录@file{@var{language}}包含了那个前端的源文件。
详情参见@ref{前端目录,,前端@file{@var{language}}目录}。
@item
在@file{gcc/doc/install.texi}的所支持的语言列表中对该语言的记载。
@item
在@file{gcc/doc/install.texi}文档中，
记载了在哪个名字下能够被@option{--enable-shared=@var{package}}识别的语言的运行时库。
@item
在文档@file{gcc/doc/install.texi}中对构建前端所需的任何前提条件的记载。
@item
在@file{gcc/doc/contrib.texi}中那个前端的贡献者的详情。
如果详情是在那个前端自己的手册中，
则在@file{contrib.texi}中应该有一个指向那个手册列表的链接。
@item
在@file{gcc/doc/frontends.texi}中关于对那个语言的支持的信息。
@item
在@file{gcc/doc/standards.texi}中关于那个语言的标准和前端对其的支持的信息。
这可能是一个指向前端自己手册中这些信息的一个链接。
@item
在@file{gcc/doc/invoke.texi}中，
那个语言的源文件后缀详请和所支持的@option{-x @var{lang}}选项。
@item
在@file{gcc.c}的@code{default_compilers}里，那个语言的源文件后缀的入口项。
@item
比较适合的测试包，可能在@file{gcc/testsuite}下或者运行时库目录下。
FIXME：在某处记载如何写测试包harnesses。
@item
在@file{gcc}目录外，可能有一个该语言的运行时库。FIXME：详细描述一下。
@item
在@file{gcc/doc/sourcebuild.texi}中关于任何运行时库的目录的详情。
@end itemize

如果前端被增加到GCC CVS库中，则还需要下列：

@itemize @bullet
@item
至少有一个关于那个前端和运行时库的bug的Bugzilla component。
该类别需要在@file{gcc/gccbug.in}中有记载，同时被添加到Bugzilla数据库中。
@item
通常，在@file{MAINTAINERS}中列出那个前端的一个或多个维护者。
@item
在GCC网站上的@file{index.html}和@file{frontends.html}中的一些记载，
以及在@file{readings.html}上的任何相关链接。
（不是GCC官方部分的前端还可以在@file{frontends.html}中列出，并带有相关链接。）
@item
在@file{index.html}中的一条消息，
并且可能在@email{gcc-announce@@gcc.gnu.org}邮件组中的一个声明。
@item
前端手册应该在@file{maintainer-scripts/update_web_docs}
(参见@pxref{Texinfo Manuals}手册）中有记载，
并且来自@file{onlinedocs/index.html}的在线手册应该有相应链接。
@item
在GCC包含该前端之前的任何旧的发行版本或CVS库版本，
应该可以在GCC FTP站点@uref{ftp://gcc.gnu.org/pub/gcc/old-releases/}上获得。
@item
发行版和快照脚本@file{maintainer-scripts/gcc_release}应该被更新为可以生成该
前端的合适的tar包。相关的@file{maintainer-scripts/snapshot-README}和
@file{maintainer-scripts/snapshot-index.html}文件应该被更新为可以列出该前端的
tar包和diffs。
@item
如果该前端包含自己的版本文件，其包含了当前日期，
则@file{maintainer-scripts/update_version}应该相应的被更新。
@end itemize

@menu
* 前端目录::  前端@file{@var{language}}目录。
* 前端配置::  前端@file{config-lang.in}文件。
@end menu

@node 前端目录
@subsubsection 前端@file{@var{language}}目录

前端@file{@var{language}}目录包含了该前端的源文件（不过对于运行时库除外，
它们应该放到@file{gcc}目录外面），包括文档或者随着前端一起构建的辅助程序。
有些文件是专用的，并且编译器的其它部分会依赖它们的名字：

@table @file
@item config-lang.in
所有的language子目录都需要这个文件。
详情参见@ref{前端配置,,前端@file{config-lang.in}文件}。 
@item Make-lang.in
所有的language子目录都需要这个文件。
它包含了目标@code{@var{lang}.@var{hook}}
（@code{@var{lang}}是在@file{config-lang.in}中对@code{language}的设置），
即下面的@code{@var{hook}}的值，
以及构建这些目标的其它Makefile规则(如果需要的话，
可以使用在@file{config-lang.in}中通过@code{outputs}指定的其它Makefile，
但是不赞成这种方式)。
它还向变量@code{lang_checks}增加了任何可以使用@file{gcc/Makefile.in}中的
标准规则的测试包目标。

@table @code
@itemx all.cross
@itemx start.encap
@itemx rest.encap
FIXME: 确切的描述这些目标。 
@item tags
在源树的语言子目录中构建一个@command{etags} @file{TAGS}文件。 
@item info
在构建目录下构建前端的info文档。
这个目标只被@samp{make bootstrap}在有合适版本的@command{makeinfo}时调用，
所以不需要进行检查，并且如果错误发生时，应该失败。 
@item dvi
在构建目录下构建前端的DVI文档。这应该使用@code{$(TEXI2DVI)}，
以及合适的指向要包含文件目录的@option{-I}参数，来完成。 
@item pdf
在构建目录下构建前端的PDF文档。这应该使用@code{$(TEXI2PDF)}，
以及合适的指向要包含文件目录的@option{-I}参数，来完成。 
@item html
在构建目录下构建前端的HTML文档。 
@item man
在构建目录下从Texinfo手册中构建前端的man页（参见@ref{生成Man页}）。
该目标只在所需的工具可用时才被调用，当应该忽视错误从而不会在错误发生时停止构建；
man页是可选的，并且所涉及到的工具可能被安装in a broken way。 
@item install-common
安装前端的所有部分，
除了在@file{config-lang.in}中列出的@code{compilers}可执行程序以外。 
@item install-info
安装前端的info文档，如果源目录中存在的话。
该目标应该与要安装的info文件有依赖关系。 
@item install-man
安装前端的man页。该目标应该能够忽略错误。 
@item srcextra
将它的依赖复制到源目录中。通常用于生成的文件，像Bison输出文件，其不存在于CVS中，
但应该放到任何的发行tar包中。
该目标将在自举过程中当@samp{--enable-generated-files-in-srcdir}被指定为一个
@file{configure}选项时被执行。 
@item srcinfo
@itemx srcman
将它的依赖复制到源目录中。
该目标将在自举过程中当@samp{--enable-generated-files-in-srcdir}被指定为一个
@file{configure}选项时被执行。 
@item uninstall
卸载通过安装编译器所安装的文件。目前还不支持，所以不要做任何事情。 
@item mostlyclean
@itemx clean
@itemx distclean
@itemx maintainer-clean
标准GNU@samp{*clean}目标的语言部分。关于标准目标的详情，
参见@ref{Standard Targets, , Standard Targets for Users, standards, GNU Coding Standards}。
对于GCC，@code{maintainer-clean}应该删除所有在源目录下生成的没有放入CVS的文件，
但不要删除任何放入CVS的文件。 
@end table

@file{Make-lang.in} must also define a variable @code{@var{lang}_OBJS}
to a list of host object files that are used by that language.

@item lang.opt
该文件注册了前端所接受的命令行中的选项开关集，以及它们的@option{--help}文本。
参见@ref{选项}。 
@item lang-specs.h
该文件提供了在@file{gcc.c}中的@code{default_compilers}的入口，
用于覆盖当该语言的编译器没有安装时报错的缺省行为。 
@item @var{language}-tree.def
该文件，不需要存在，定义了任何语言特定的树代码。
@end table

@node 前端配置
@subsubsection 前端@file{config-lang.in}文件

每一个语言子目录都包含一个@file{config-lang.in}文件。
另外主目录下包含一个@file{c-config-lang.in}，
里面含有C语言的限制信息。这个文件是一个shell脚本，
可以用来定义一些描述语言的变量。

@table @code
@item language
必须定义，
它给出了语言的名字用于作为@option{--enable-languages}的参数或其它用途。
@item lang_requires
如果定义，该变量列出了（由空格分开）该前端需要被支持的除了C的语言前端
（使用所设置的@code{language}名字）。例如，Java前端依赖于C++前端，
所以要设为@samp{lang_requires=c++}。
@item subdir_requires
如果定义，该变量列出了（由空格分开）该前端需要存在的除了C的前端目录。
例如，Objective-C++前端使用了C++和Objective-C前端的源文件，
所以要设为@samp{subdir_requires="cp objc"}。
@item target_libs
如果定义，该变量列出了（由空格分开）
在顶层@file{Makefile}中为该语言构建运行时库的目标，例如@code{target-libobjc}。
@item lang_dirs
如果定义，该变量列出了（由空格分开）只有构建该前端时才应被配置的除了运行时库
之外的顶层目录（与@file{gcc}并列）。
@item build_by_default
如果定义为@samp{no}，
则该语言前端只有在@option{--enable-languages}中指定参数时才被构建。
否则，会按照缺省方式来构建前端，
并且受到@file{configure.ac}中特定逻辑的影响（正如目前，
如果Ada编译器没有安装则禁止Ada前端）。
@item boot_language
如果定义为@samp{yes}，则该前端在自举阶段1中会被构建。
这个只与用它们自己的语言写的前端相关。 
@item compilers
如果定义，则为空格分隔的编译器可执行程序列表，其将被驱动调用运行。
这里的名字将以@samp{\$(exeext)}结尾。 
@item outputs
如果定义，则为空格分隔的文件列表，其将被@file{configure}通过值替换来生成。
这种机制可以用来从@file{@var{language}/Makefile.in}中创建一个@file{@var{language}/Makefile}文件，但不赞成这样，应该从单个@file{gcc/Makefile}中来构建所有。 
@item gtfiles
如果定义，则为空格分隔的文件列表，其将被gengtype.c扫描来生成垃圾搜集表，
和该语言的程序。这不包括所有前端公用的文件。参见@ref{类型信息}。 
@end table

@node 后端
@subsection 目标机后端剖析

GCC中与目标体系结构相关的后端包括下面的部分：

@itemize @bullet
@item
位于@file{gcc/config}下面的目录@file{@var{machine}}，
包括一个机器描述文件@file{@var{machine}.md}（参见@ref{机器描述,,机器描述}），
头文件@file{@var{machine}.h}和@file{@var{machine}-protos.h}，
以及一个源文件@file{@var{machine}.c}（参见@ref{目标宏,,目标描述的宏和函数}），
可能会有一个目标Makefile片段@file{t-@var{machine}}
（参见@ref{目标片段,,目标Makefile片段}），以及其它文件。
可以在@file{config.gcc}中通过显示指出来改变文件的缺省名字。
@item
如果需要的话，
在@file{@var{machine}}目录下会有一个文件@file{@var{machine}-modes.def}，
包含了附加的机器模式用来表示条件代码。详情参见@ref{条件代码}。
@item
在@file{@var{machine}}目录下，有一个可选的@file{@var{machine}.opt}文件，
包含了一个目标特定的选项列表。
你也可以通过在@file{config.gcc}中使用@code{extra_options}变量来增加其它的
选项文件。参见@ref{选项}。
@item
在@file{config.gcc}（参见@ref{系统配置, , @file{config.gcc} 文件}）中，
该目标体系结构与系统相关的条目。
@item
在@file{gcc/doc/invoke.texi}中关于该目标所支持的任何命令行选项的文档
（参见运行时目标规定）。
这意味着在选项的汇总表中以及单个选项的详细描述中都要有相关的条目。
@item
在@file{gcc/doc/extend.texi}中关于所支持的目标特定属性的文档
（参见__attribute__的目标特定用法），
包括在哪些地方已经被其它一些目标所支持的相同属性，以及哪些在手册中已经被列举。
@item
在@file{gcc/doc/extend.texi}中关于支持的所有目标特定pragma的文档。
@item
在@file{gcc/doc/extend.texi}中关于支持的所有目标特定built-in函数的文档。
@item
在@file{gcc/doc/extend.texi}中关于支持的所有目标特定格式检测风格的文档。
@item
在@file{gcc/doc/md.texi}中关于所有目标特定的约束字母的文档
（参见@ref{特定机器的约束}）。
@item
在@file{gcc/doc/contrib.texi}中记录下由谁提供的目标支持。
@item
在@file{gcc/doc/install.texi}中关于该目标体系结构支持的所有目标三元参数，
给出该目标安装所需要的特殊注解或者注明没有。
@item
可能在@file{gcc}目录之外会有其它运行库的支持。FIXME：关于这方面的参考文档。
这个工作需要安装libstdc++移植手册或者将其作为本手册的一章。
@end itemize

如果是添加到GCC官方CVS库中的后端，还需要下面的内容：

@itemize @bullet
@item
在GCC网站上的@file{readings.html}中有一条关于目标体系结构的记录，
并带有任何相关的链接。
@item
在GCC网站上的@file{backends.html}中有关于后端和目标体系结构的详细特性。
@item
在GCC网站上的@file{index.html}中有一条关于提供目标体系结构支持的消息公告。
@item
通常的，会在@file{MAINTAINERS}中列出该目标的一个或多个维护者。
虽然有些现存的体系结构可能没有被维护了，
但是通常是不会为没有维护者的目标提供支持的。
@end itemize

@node 测试包
@section 测试包

GCC包含了几个测试包用来确保编译器的质量。
大部分运行时库和语言前端在GCC中都有测试包。
目前在这里只讲述了C语言的测试包；FIXME：介绍其它的测试包。

@menu
* 测试用语::      在测试包代码中使用的习惯用语
* 测试指令::      在DejaGnu测试中使用到的指令
* Ada测试::       Ada语言测试包
* C测试::         C语言测试包
* libgcj测试::    Java库测试包
* gcov测试::      对gcov测试的支持
* profopt测试::   对profile-directed优化测试的支持
* compat测试::    对二进制兼容性测试的支持
* Torture测试::   对使用多个选项进行torture测试的支持
@end menu

@node 测试用语
@subsection 测试包代码中使用的习惯用法

通常，C 测试用例以@file{-@var{n}.c}结尾，并且从@file{-1.c}开始，
以便于以后增加其它具有类似名字的测试用例。
如果是测试一些明确定义的特征，则测试的名字应该指出这个特征，
例如@file{@var{feature}-1.c}。如果不是测试一个明确定义的特征，
而只是检验在编译器中存在的，并且是在GCC bug库中归档的bug，
则可以使用@file{pr@var{bug-number}-1.c}这样的名字形式。
否则（对于在GCC bug库中没有归档的各种bug），
测试用例根据它们被添加的日期来命名，这种情况在以前更加常见。
这样使人们能够一眼看出一个测试失败是由于一个新发现并且还没有被修复的bug造成的，
还是由于一个回退错误造成的，但它并没有给出关于bug的其它信息，
以及从哪里可以找到相关的讨论。一些其它语言的测试包也遵守类似的惯例。

在@file{gcc.dg}测试包中，通常需要测试一个错误确实是硬件错误，
而不只是一个警告——例如，在C标准中的violatile限定，
在有@option{-pedantic-errors}的时候必须为一个错误。为此，
可以使用下面的习惯用法，其中第一行为产生错误的文件的行@var{line}。

@smallexample
/* @{ dg-bogus "warning" "warning in place of error" @} */
/* @{ dg-error "@var{regexp}" "@var{message}" @{ target *-*-* @} @var{line} @} */
@end smallexample

可能需要检查一个表达式为整数常量表达式，并且具有一个特定的值。
要检查@code{@var{E}}具有值@code{@var{V}}，可以使用类似下面的习惯用法：

@smallexample
char x[((E) == (V) ? 1 : -1)];
@end smallexample

在@file{gcc.dg}测试中，@code{__typeof__}有时被用于表达式类型的断言。
例如，可以参见@file{gcc.dg/c99-condexpr-1.c}。
更加巧妙的用法依靠了C标准中条件表达式类型的确切规则；
例如，可以参见@file{gcc.dg/c99-intconst-1.c}。

如果能够测试优化被做的很适当会很有帮助。这并不能在所有情况下都能做到，
但对于可以使得代码被优化掉的情况
（例如，流分析或别名分析应该显示那样的代码不会被调用），
或者函数将不被调用，因为它们已经被扩展为内建的函数时，是可以做到的。
这样的测试在@file{gcc.c-torture/execute}中。
在将要被优化掉的代码的地方，可以插入一个像@code{link_failure ()}
这样的对一个不存在的函数的调用；并且还需要如下定义，

@smallexample
#ifndef __OPTIMIZE__
void
link_failure (void)
@{
  abort ();
@}
#endif
@end smallexample

@noindent
从而使得当测试在没有优化而运行时，连接依然成功。
当对一个内建函数的所有调用都已经被优化，并且不会剩下对函数的非内建版本的调用时，
那个函数可以定义为@code{static}，并且调用@code{abort ()}
（虽然将函数声明为静态的可能不会在所有的目标上工作）。

所有测试用例都必须是可移植的。
目标特定的测试用例必须具有适当的代码来避免在不支持的系统上引起失败；
不幸的是，这种机制随目录有所不同。

FIXME: 讨论一下非C的测试包。

@node 测试指令
@subsection DejaGnu测试中使用的指令

测试指令出现在测试源文件的注释中，并且起始于@code{dg-}。
其中一些是在DejaGnu中定义的，其它的是局限于GCC测试包自己的。

测试中测试指令出现的顺序很重要：
局限于GCC的指令有时会覆盖DejaGnu的指令使用的信息，
并且其对GCC指令一无所知，所以DejaGnu指令必须在GCC指令之前。

个别测试指令包含了选择器，
其通常由关键字@code{target}或@code{xfail}打头。
一个选择器为：一个或多个目标三元组，可能包含通配符；
单个的有效目标关键字；或者一个逻辑表达式。
取决于上下文，选择器指定了是否测试被跳过并报告为不支持，
或者预期为失败。使用@samp{*-*-*}来匹配任何目标。
有效目标关键字在GCC测试包的@file{target-supports.exp}中定义。

选择器表达式出现在大括号中，
并且使用单个的逻辑操作符：@samp{!},@samp{&&}, 或@samp{||}。
操作数为另一个选择器表达式，一个有效目标关键字，
单个的目标三元组，或者一个双引号或大括号包裹的目标三元组列表。
例如：

@smallexample
@{ target @{ ! "hppa*-*-* ia64*-*-*" @} @}
@{ target @{ powerpc*-*-* && lp64 @} @}
@{ xfail @{ lp64 || vect_no_align @} @}
@end smallexample

@table @code
@item @{ dg-do @var{do-what-keyword} [@{ target/xfail @var{selector} @}] @}
@var{do-what-keyword}指定了测试如何被编译，以及是否被执行。其为：

@table @code
@item preprocess
使用@option{-E}编译，从而只运行预处理器。 
@item compile
使用@option{-S}编译，从而生成汇编代码文件。
@item assemble
使用@option{-c}编译，从而生成可重定位的目标文件。
@item link
编译，汇编，并连接，从而生成一个可执行文件。
@item run
生成并运行一个可执行文件，并期望其返回的退出代码为0。
@end table

缺省情况为@code{compile}。
可以通过在那些测试的@code{.exp}文件中重定义
@code{dg-do-what-default}来覆盖这个值。

如果指令包含了可选的@samp{@{ target @var{selector} @} }，
则除非目标系统被包含在目标三元组列表中，或者匹配有效目标关键字，
否则测试将被跳过。

如果运行了@samp{do-what-keyword}并且指令包含了可选的
@samp{@{ xfail @var{selector} @}}并且选择器匹配，则测试期望为失败。
对于@samp{do-what-keyword}的其它值，@code{xfail}子句会被忽略；
那些测试可以使用指令@code{dg-xfail-if}。

@item @{ dg-options @var{options} [@{ target @var{selector} @}] @}
该DejaGnu指令提供了一个编译器选项列表，
用来在目标系统匹配@var{selector}的时候被使用，
以替换这个测试集的缺省选项。

@item @{ dg-add-options @var{feature} @dots{} @}
增加任何访问特定特征所需要的编译器选项。
该指令对使用缺省方式启用特征或者根本不提供特征的目标不做任何事情。
其必须在所有@code{dg-options}指令之后。

支持的@var{feature}为：
@table @code
@item c99_runtime
目标的C99运行时（包括头文件和库）。 

@item mips16_attribute
@code{mips16}函数属性。只有MIPS目标支持该特征，并且是在特定的模式下。
@end table

@item @{ dg-timeout @var{n} [@{target @var{selector} @}] @}
Set the time limit for the compilation and for the execution of the test
to the specified number of seconds.

@item @{ dg-timeout-factor @var{x} [@{ target @var{selector} @}] @}
Multiply the normal time limit for compilation and execution of the test
by the specified floating-point factor.  The normal timeout limit, in
seconds, is found by searching the following in order:

@itemize @bullet
@item the value defined by an earlier @code{dg-timeout} directive in
the test

@item variable @var{tool_timeout} defined by the set of tests

@item @var{gcc},@var{timeout} set in the target board

@item 300
@end itemize

@item @{ dg-skip-if @var{comment} @{ @var{selector} @} @{ @var{include-opts} @} @{ @var{exclude-opts} @} @}
Skip the test if the test system is included in @var{selector} and if
each of the options in @var{include-opts} is in the set of options with
which the test would be compiled and if none of the options in
@var{exclude-opts} is in the set of options with which the test would be
compiled.

Use @samp{"*"} for an empty @var{include-opts} list and @samp{""} for
an empty @var{exclude-opts} list.

@item  @{ dg-xfail-if @var{comment} @{ @var{selector} @} @{ @var{include-opts} @} @{ @var{exclude-opts} @} @}
Expect the test to fail if the conditions (which are the same as for
@code{dg-skip-if}) are met.  This does not affect the execute step.

@item  @{ dg-xfail-run-if @var{comment} @{ @var{selector} @} @{ @var{include-opts} @} @{ @var{exclude-opts} @} @}
Expect the execute step of a test to fail if the conditions (which are
the same as for @code{dg-skip-if}) and @code{dg-xfail-if}) are met.

@item @{ dg-require-@var{support} args @}
Skip the test if the target does not provide the required support;
see @file{gcc-dg.exp} in the GCC testsuite for the actual directives.
These directives must appear after any @code{dg-do} directive in the test
and before any @code{dg-additional-sources} directive.
They require at least one argument, which can be an empty string if the
specific procedure does not examine the argument.

@item @{ dg-require-effective-target @var{keyword} @}
Skip the test if the test target, including current multilib flags,
is not covered by the effective-target keyword.
This directive must appear after any @code{dg-do} directive in the test
and before any @code{dg-additional-sources} directive.

@item  @{ dg-shouldfail @var{comment} @{ @var{selector} @} @{ @var{include-opts} @} @{ @var{exclude-opts} @} @}
Expect the test executable to return a nonzero exit status if the
conditions (which are the same as for @code{dg-skip-if}) are met.

@item @{ dg-error @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}
This DejaGnu directive appears on a source line that is expected to get
an error message, or else specifies the source line associated with the
message.  If there is no message for that line or if the text of that
message is not matched by @var{regexp} then the check fails and
@var{comment} is included in the @code{FAIL} message.  The check does
not look for the string @samp{"error"} unless it is part of @var{regexp}.

@item @{ dg-warning @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}
This DejaGnu directive appears on a source line that is expected to get
a warning message, or else specifies the source line associated with the
message.  If there is no message for that line or if the text of that
message is not matched by @var{regexp} then the check fails and
@var{comment} is included in the @code{FAIL} message.  The check does
not look for the string @samp{"warning"} unless it is part of @var{regexp}.

@item @{ dg-message @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}
The line is expected to get a message other than an error or warning.
If there is no message for that line or if the text of that message is
not matched by @var{regexp} then the check fails and @var{comment} is
included in the @code{FAIL} message.

@item @{ dg-bogus @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}
This DejaGnu directive appears on a source line that should not get a
message matching @var{regexp}, or else specifies the source line
associated with the bogus message.  It is usually used with @samp{xfail}
to indicate that the message is a known problem for a particular set of
targets.

@item @{ dg-excess-errors @var{comment} [@{ target/xfail @var{selector} @}] @}
This DejaGnu directive indicates that the test is expected to fail due
to compiler messages that are not handled by @samp{dg-error},
@samp{dg-warning} or @samp{dg-bogus}.  For this directive @samp{xfail}
has the same effect as @samp{target}.

@item @{ dg-output @var{regexp} [@{ target/xfail @var{selector} @}] @}
This DejaGnu directive compares @var{regexp} to the combined output
that the test executable writes to @file{stdout} and @file{stderr}.

@item @{ dg-prune-output @var{regexp} @}
Prune messages matching @var{regexp} from test output.

@item @{ dg-additional-files "@var{filelist}" @}
Specify additional files, other than source files, that must be copied
to the system where the compiler runs.

@item @{ dg-additional-sources "@var{filelist}" @}
Specify additional source files to appear in the compile line
following the main test file.

@item @{ dg-final @{ @var{local-directive} @} @}
This DejaGnu directive is placed within a comment anywhere in the
source file and is processed after the test has been compiled and run.
Multiple @samp{dg-final} commands are processed in the order in which
they appear in the source file.

The GCC testsuite defines the following directives to be used within
@code{dg-final}.

@table @code
@item cleanup-coverage-files
Removes coverage data files generated for this test.

@item cleanup-repo-files
Removes files generated for this test for @option{-frepo}.

@item cleanup-rtl-dump @var{suffix}
Removes RTL dump files generated for this test.

@item cleanup-tree-dump @var{suffix}
Removes tree dump files matching @var{suffix} which were generated for
this test.

@item cleanup-saved-temps
Removes files for the current test which were kept for @option{--save-temps}.

@item scan-file @var{filename} @var{regexp} [@{ target/xfail @var{selector} @}]
Passes if @var{regexp} matches text in @var{filename}.

@item scan-file-not @var{filename} @var{regexp} [@{ target/xfail @var{selector} @}]
Passes if @var{regexp} does not match text in @var{filename}.

@item scan-hidden @var{symbol} [@{ target/xfail @var{selector} @}]
Passes if @var{symbol} is defined as a hidden symbol in the test's
assembly output.

@item scan-not-hidden @var{symbol} [@{ target/xfail @var{selector} @}]
Passes if @var{symbol} is not defined as a hidden symbol in the test's
assembly output.

@item scan-assembler-times @var{regex} @var{num} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} is matched exactly @var{num} times in the test's
assembler output.

@item scan-assembler @var{regex} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} matches text in the test's assembler output.

@item scan-assembler-not @var{regex} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} does not match text in the test's assembler output.

@item scan-assembler-dem @var{regex} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} matches text in the test's demangled assembler output.

@item scan-assembler-dem-not @var{regex} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} does not match text in the test's demangled assembler
output.

@item scan-tree-dump-times @var{regex} @var{num} @var{suffix} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} is found exactly @var{num} times in the dump file
with suffix @var{suffix}.

@item scan-tree-dump @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} matches text in the dump file with suffix @var{suffix}.

@item scan-tree-dump-not @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} does not match text in the dump file with suffix
@var{suffix}.

@item scan-tree-dump-dem @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} matches demangled text in the dump file with
suffix @var{suffix}.

@item scan-tree-dump-dem-not @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} does not match demangled text in the dump file with
suffix @var{suffix}.

@item output-exists [@{ target/xfail @var{selector} @}]
Passes if compiler output file exists.

@item output-exists-not [@{ target/xfail @var{selector} @}]
Passes if compiler output file does not exist.

@item run-gcov @var{sourcefile}
Check line counts in @command{gcov} tests.

@item run-gcov [branches] [calls] @{ @var{opts} @var{sourcefile} @}
Check branch and/or call counts, in addition to line counts, in
@command{gcov} tests.
@end table
@end table

@node Ada测试
@subsection Ada语言测试包

Ada测试包包括了来自ACATS 2.5测试包的可执行测试，
其在@uref{http://www.adaic.org/compilers/acats/2.5}上可公开获得。

这些测试被集成在GCC测试包中，在@file{gcc/testsuite/ada/acats}目录下，
并且如果配置GCC时设置了Ada语言，则运行@code{make check}时会自动执行。

你还可以单独运行Ada测试包，使用@code{make check-ada}，或测试的子集，
通过指定运行那些章节，例如

@smallexample
$ make check-ada CHAPTERS="c3 c9"
@end smallexample

测试通过目录组织起来，每个目录对应于Ada参考手册的一个章节。
所以，例如c9对应于第9章，关于语言任务特征的。

还有一个额外的章节叫做@file{gcc}，包含了用来创建新的可执行测试的模版。

测试使用两个@command{sh}脚本来运行：@file{run_acats}和@file{run_all.sh}。
如果要使用模拟器或者交叉目标来运行测试，
参见@file{run_all.sh}顶部的small customization部分。

这些测试使用构建树来运行：它们可以在没有执行@code{make install}的情况下被运行。

@node C测试
@subsection C语言测试包

GCC在@file{gcc/testsuite}目录下包含下列C语言测试包：

@table @file
@item gcc.dg
This contains tests of particular features of the C compiler, using the
more modern @samp{dg} harness.  Correctness tests for various compiler
features should go here if possible.

Magic comments determine whether the file
is preprocessed, compiled, linked or run.  In these tests, error and warning
message texts are compared against expected texts or regular expressions
given in comments.  These tests are run with the options @samp{-ansi -pedantic}
unless other options are given in the test.  Except as noted below they
are not run with multiple optimization options.
@item gcc.dg/compat
This subdirectory contains tests for binary compatibility using
@file{compat.exp}, which in turn uses the language-independent support
(参见 @ref{compat测试, , Support for testing binary compatibility}).
@item gcc.dg/cpp
This subdirectory contains tests of the preprocessor.
@item gcc.dg/debug
This subdirectory contains tests for debug formats.  Tests in this
subdirectory are run for each debug format that the compiler supports.
@item gcc.dg/format
This subdirectory contains tests of the @option{-Wformat} format
checking.  Tests in this directory are run with and without
@option{-DWIDE}.
@item gcc.dg/noncompile
This subdirectory contains tests of code that should not compile and
does not need any special compilation options.  They are run with
multiple optimization options, since sometimes invalid code crashes
the compiler with optimization.
@item gcc.dg/special
FIXME: describe this.

@item gcc.c-torture
This contains particular code fragments which have historically broken easily.
These tests are run with multiple optimization options, so tests for features
which only break at some optimization levels belong here.  This also contains
tests to check that certain optimizations occur.  It might be worthwhile to
separate the correctness tests cleanly from the code quality tests, but
it hasn't been done yet.

@item gcc.c-torture/compat
FIXME: describe this.

This directory should probably not be used for new tests.
@item gcc.c-torture/compile
This testsuite contains test cases that should compile, but do not
need to link or run.  These test cases are compiled with several
different combinations of optimization options.  All warnings are
disabled for these test cases, so this directory is not suitable if
you wish to test for the presence or absence of compiler warnings.
While special options can be set, and tests disabled on specific
platforms, by the use of @file{.x} files, mostly these test cases
should not contain platform dependencies.  FIXME: discuss how defines
such as @code{NO_LABEL_VALUES} and @code{STACK_SIZE} are used.
@item gcc.c-torture/execute
This testsuite contains test cases that should compile, link and run;
otherwise the same comments as for @file{gcc.c-torture/compile} apply.
@item gcc.c-torture/execute/ieee
This contains tests which are specific to IEEE floating point.
@item gcc.c-torture/unsorted
FIXME: describe this.

This directory should probably not be used for new tests.
@item gcc.c-torture/misc-tests
This directory contains C tests that require special handling.  Some
of these tests have individual expect files, and others share
special-purpose expect files:

@table @file
@item @code{bprob*.c}
Test @option{-fbranch-probabilities} using @file{bprob.exp}, which
in turn uses the generic, language-independent framework
(参见 @ref{profopt测试, , Support for testing profile-directed
optimizations}).

@item @code{dg-*.c}
Test the testsuite itself using @file{dg-test.exp}.

@item @code{gcov*.c}
Test @command{gcov} output using @file{gcov.exp}, which in turn uses the
language-independent support (参见 @ref{gcov测试, , Support for testing gcov}).

@item @code{i386-pf-*.c}
Test i386-specific support for data prefetch using @file{i386-prefetch.exp}.
@end table

@end table

FIXME: merge in @file{testsuite/README.gcc} and discuss the format of
test cases and magic comments more.

@node libgcj测试
@subsection Java库测试包

运行时测试通过在构建树的@file{@var{target}/libjava/testsuite}目录下
运行@samp{make check}来执行。额外的运行时测试可以放在这个测试包中。

Mauve测试包还覆盖了libgcj的核心包的回归测试。Mauve项目为Java类库开发了测试。
这些测试作为libgcj测试的一部分来运行，通过在
@uref{libjava/testsuite/libjava.mauve/mauve的libjava}测试包源中放置Mauve树，
或者当调用@samp{make}时，通过@samp{make MAUVEDIR=~/mauve check}来指定该树
的位置。

为了检测回退，@file{mauve.exp}中有一个机制用来比较一个测试的失败
与在源层次结构@file{libjava/testsuite/libjava.mauve/xfails}中的期望的失败列表。
当向Mauve中增加一个新的失败测试时，或者修改libgcj中的bug造成了Mauve测试失败时，
需要更新该文件。

我们鼓励开发者将测试用例贡献给Mauve。

@node gcov测试
@subsection 对@command{gcov}测试的支持

Language-independent support for testing @command{gcov}, and for checking
that branch profiling produces expected values, is provided by the
expect file @file{gcov.exp}.  @command{gcov} tests also rely on procedures
in @file{gcc.dg.exp} to compile and run the test program.  A typical
@command{gcov} test contains the following DejaGnu commands within comments:

@smallexample
@{ dg-options "-fprofile-arcs -ftest-coverage" @}
@{ dg-do run @{ target native @} @}
@{ dg-final @{ run-gcov sourcefile @} @}
@end smallexample

Checks of @command{gcov} output can include line counts, branch percentages,
and call return percentages.  All of these checks are requested via
commands that appear in comments in the test's source file.
Commands to check line counts are processed by default.
Commands to check branch percentages and call return percentages are
processed if the @command{run-gcov} command has arguments @code{branches}
or @code{calls}, respectively.  For example, the following specifies
checking both, as well as passing @option{-b} to @command{gcov}:

@smallexample
@{ dg-final @{ run-gcov branches calls @{ -b sourcefile @} @} @}
@end smallexample

A line count command appears within a comment on the source line
that is expected to get the specified count and has the form
@code{count(@var{cnt})}.  A test should only check line counts for
lines that will get the same count for any architecture.

Commands to check branch percentages (@code{branch}) and call
return percentages (@code{returns}) are very similar to each other.
A beginning command appears on or before the first of a range of
lines that will report the percentage, and the ending command
follows that range of lines.  The beginning command can include a
list of percentages, all of which are expected to be found within
the range.  A range is terminated by the next command of the same
kind.  A command @code{branch(end)} or @code{returns(end)} marks
the end of a range without starting a new one.  For example:

@smallexample
if (i > 10 && j > i && j < 20)  /* @r{branch(27 50 75)} */
                                /* @r{branch(end)} */
  foo (i, j);
@end smallexample

For a call return percentage, the value specified is the
percentage of calls reported to return.  For a branch percentage,
the value is either the expected percentage or 100 minus that
value, since the direction of a branch can differ depending on the
target or the optimization level.

Not all branches and calls need to be checked.  A test should not
check for branches that might be optimized away or replaced with
predicated instructions.  Don't check for calls inserted by the
compiler or ones that might be inlined or optimized away.

A single test can check for combinations of line counts, branch
percentages, and call return percentages.  The command to check a
line count must appear on the line that will report that count, but
commands to check branch percentages and call return percentages can
bracket the lines that report them.

@node profopt测试
@subsection 对profile-directed优化测试的支持

The file @file{profopt.exp} provides language-independent support for
checking correct execution of a test built with profile-directed
optimization.  This testing requires that a test program be built and
executed twice.  The first time it is compiled to generate profile
data, and the second time it is compiled to use the data that was
generated during the first execution.  The second execution is to
verify that the test produces the expected results.

To check that the optimization actually generated better code, a
test can be built and run a third time with normal optimizations to
verify that the performance is better with the profile-directed
optimizations.  @file{profopt.exp} has the beginnings of this kind
of support.

@file{profopt.exp} provides generic support for profile-directed
optimizations.  Each set of tests that uses it provides information
about a specific optimization:

@table @code
@item tool
tool being tested, e.g., @command{gcc}

@item profile_option
options used to generate profile data

@item feedback_option
options used to optimize using that profile data

@item prof_ext
suffix of profile data files

@item PROFOPT_OPTIONS
list of options with which to run each test, similar to the lists for
torture tests
@end table

@node compat测试
@subsection 对二进制兼容性测试的支持

The file @file{compat.exp} provides language-independent support for
binary compatibility testing.  It supports testing interoperability of
two compilers that follow the same ABI, or of multiple sets of
compiler options that should not affect binary compatibility.  It is
intended to be used for testsuites that complement ABI testsuites.

A test supported by this framework has three parts, each in a
separate source file: a main program and two pieces that interact
with each other to split up the functionality being tested.

@table @file
@item @var{testname}_main.@var{suffix}
Contains the main program, which calls a function in file
@file{@var{testname}_x.@var{suffix}}.

@item @var{testname}_x.@var{suffix}
Contains at least one call to a function in
@file{@var{testname}_y.@var{suffix}}.

@item @var{testname}_y.@var{suffix}
Shares data with, or gets arguments from,
@file{@var{testname}_x.@var{suffix}}.
@end table

Within each test, the main program and one functional piece are
compiled by the GCC under test.  The other piece can be compiled by
an alternate compiler.  If no alternate compiler is specified,
then all three source files are all compiled by the GCC under test.
You can specify pairs of sets of compiler options.  The first element
of such a pair specifies options used with the GCC under test, and the
second element of the pair specifies options used with the alternate
compiler.  Each test is compiled with each pair of options.

@file{compat.exp} defines default pairs of compiler options.
These can be overridden by defining the environment variable
@env{COMPAT_OPTIONS} as:

@smallexample
COMPAT_OPTIONS="[list [list @{@var{tst1}@} @{@var{alt1}@}]
  @dots{}[list @{@var{tstn}@} @{@var{altn}@}]]"
@end smallexample

where @var{tsti} and @var{alti} are lists of options, with @var{tsti}
used by the compiler under test and @var{alti} used by the alternate
compiler.  For example, with
@code{[list [list @{-g -O0@} @{-O3@}] [list @{-fpic@} @{-fPIC -O2@}]]},
the test is first built with @option{-g -O0} by the compiler under
test and with @option{-O3} by the alternate compiler.  The test is
built a second time using @option{-fpic} by the compiler under test
and @option{-fPIC -O2} by the alternate compiler.

An alternate compiler is specified by defining an environment
variable to be the full pathname of an installed compiler; for C
define @env{ALT_CC_UNDER_TEST}, and for C++ define
@env{ALT_CXX_UNDER_TEST}.  These will be written to the
@file{site.exp} file used by DejaGnu.  The default is to build each
test with the compiler under test using the first of each pair of
compiler options from @env{COMPAT_OPTIONS}.  When
@env{ALT_CC_UNDER_TEST} or
@env{ALT_CXX_UNDER_TEST} is @code{same}, each test is built using
the compiler under test but with combinations of the options from
@env{COMPAT_OPTIONS}.

To run only the C++ compatibility suite using the compiler under test
and another version of GCC using specific compiler options, do the
following from @file{@var{objdir}/gcc}:

@smallexample
rm site.exp
make -k \
  ALT_CXX_UNDER_TEST=$@{alt_prefix@}/bin/g++ \
  COMPAT_OPTIONS="lists as shown above" \
  check-c++ \
  RUNTESTFLAGS="compat.exp"
@end smallexample

A test that fails when the source files are compiled with different
compilers, but passes when the files are compiled with the same
compiler, demonstrates incompatibility of the generated code or
runtime support.  A test that fails for the alternate compiler but
passes for the compiler under test probably tests for a bug that was
fixed in the compiler under test but is present in the alternate
compiler.

The binary compatibility tests support a small number of test framework
commands that appear within comments in a test file.

@table @code
@item dg-require-*
These commands can be used in @file{@var{testname}_main.@var{suffix}}
to skip the test if specific support is not available on the target.

@item dg-options
The specified options are used for compiling this particular source
file, appended to the options from @env{COMPAT_OPTIONS}.  When this
command appears in @file{@var{testname}_main.@var{suffix}} the options
are also used to link the test program.

@item dg-xfail-if
This command can be used in a secondary source file to specify that
compilation is expected to fail for particular options on particular
targets.
@end table

@node Torture测试
@subsection 对使用多个选项进行torture测试的支持

Throughout the compiler testsuite there are several directories whose
tests are run multiple times, each with a different set of options.
These are known as torture tests.
@file{gcc/testsuite/lib/torture-options.exp} defines procedures to
set up these lists:

@table @code
@item torture-init
Initialize use of torture lists.
@item set-torture-options
Set lists of torture options to use for tests with and without loops.
Optionally combine a set of torture options with a set of other
options, as is done with Objective-C runtime options.
@item torture-finish
Finalize use of torture lists.
@end table

The @file{.exp} file for a set of tests that use torture options must
include calls to these three procedures if:

@itemize @bullet
@item It calls @code{gcc-dg-runtest} and overrides @var{DG_TORTURE_OPTIONS}.

@item It calls @var{$@{tool@}}@code{-torture} or
@var{$@{tool@}}@code{-torture-execute}, where @var{tool} is @code{c},
@code{fortran}, or @code{objc}.

@item It calls @code{dg-pch}.
@end itemize

It is not necessary for a @file{.exp} file that calls @code{gcc-dg-runtest}
to call the torture procedures if the tests should use the list in
@var{DG_TORTURE_OPTIONS} defined in @file{gcc-dg.exp}.

Most uses of torture options can override the default lists by defining
@var{TORTURE_OPTIONS} or add to the default list by defining
@var{ADDITIONAL_TORTURE_OPTIONS}.  Define these in a @file{.dejagnurc}
file or add them to the @file{site.exp} file; for example

@smallexample
set ADDITIONAL_TORTURE_OPTIONS  [list \
  @{ -O2 -ftree-loop-linear @} \
  @{ -O2 -fpeel-loops @} ]
@end smallexample
