@c Copyright (C) 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010, 2011
@c Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@en @node Source Tree
@en @chapter Source Tree Structure and Build System
@node Source Tree
@chapter 源目录结构和构建系统

@en This chapter describes the structure of the GCC source tree, and how
@en GCC is built.  The user documentation for building and installing GCC
@en is in a separate manual (@uref{http://gcc.gnu.org/install/}), with
@en which it is presumed that you are familiar.
这一章描述了GCC的源文件目录结构，以及GCC是如何被构建的。关于构建和安装GCC的用户文档在另一个单独的手册里作介绍（@uref{http://gcc.gnu.org/install/}），这里假设你对此已经有所了解。

@en @menu
@en * Configure Terms:: Configuration terminology and history.
@en * Top Level::       The top level source directory.
@en * gcc Directory::   The @file{gcc} subdirectory.
@en @end menu
@menu
* Configure Terms::    有关配置的术语和历史。
* Top Level::    顶层源文件目录。
* gcc Directory::     @file{gcc} 子目录。
@end menu

@include configterms.texi

@en @node Top Level
@en @section Top Level Source Directory
@node Top Level
@section 顶层源文件目录

@en The top level source directory in a GCC distribution contains several
@en files and directories that are shared with other software
@en distributions such as that of GNU Binutils.  It also contains several
@en subdirectories that contain parts of GCC and its runtime libraries:
在GCC发行版本中，顶层源目录下包含了几个与其它软件发行版本，比如GNU Binutils，共享的文件和目录。另外还包含几个子目录，里面包含了
GCC的各个部分以及运行时库。

@table @file
@en @item boehm-gc
@en The Boehm conservative garbage collector, used as part of the Java
@en runtime library.
Boehm保守垃圾收集器，作为Java运行时库的一部分。

@item config
@en Autoconf macros and Makefile fragments used throughout the tree.
源目录树中使用的Autoconf宏和Makefile片段。

@item contrib
@en Contributed scripts that may be found useful in conjunction with GCC@.
@en One of these, @file{contrib/texi2pod.pl}, is used to generate man
@en pages from Texinfo manuals as part of the GCC build process.
贡献的脚本，可以用来和GCC一起使用。其中，@file{contrib/texi2pod.pl}作为GCC构建过程的一部分，可以用来将Texinfo手册生成为man页。

@item fixincludes
@en The support for fixing system headers to work with GCC@.  See
@en @file{fixincludes/README} for more information.  The headers fixed by
@en this mechanism are installed in @file{@var{libsubdir}/include-fixed}.
@en Along with those headers, @file{README-fixinc} is also installed, as
@en @file{@var{libsubdir}/include-fixed/README}.
用于修订系统头文件，使得可以和GCC一起工作。更多信息参见@file{fixincludes/README} 。通过这种机制修订的头文件被安装在@file{@var{libsubdir}/include-fixed}下。@file{README-fixinc}也一起被安装，作为@file{@var{libsubdir}/include-fixed/README}。

@item gcc
@en The main sources of GCC itself (except for runtime libraries),
@en including optimizers, support for different target architectures,
@en language front ends, and testsuites.  @xref{gcc Directory, , The
@en @file{gcc} Subdirectory}, for details.
GCC本身的主要源文件（运行时库除外），包括优化器，不同目标体系结构的支持，语言前端和测试包。@xref{gcc Directory, , The @file{gcc} Subdirectory}。

@item gnattools
@en Support tools for GNAT.
GNAT支持工具。

@item include
@en Headers for the @code{libiberty} library.
@code{libiberty} 库的头文件。

@item intl
@en GNU @code{libintl}, from GNU @code{gettext}, for systems which do not
@en include it in @code{libc}.
GNU @code{libintl}，来自GNU @code{gettext}，用于在libc中不包含它的系统上。

@item libada
@en The Ada runtime library.
Ada运行时库。

@item libcpp
@en The C preprocessor library.
C预处理器库。

@item libdecnumber
@en The Decimal Float support library.
十进制浮点支持库。

@item libffi
@en The @code{libffi} library, used as part of the Java runtime library.
@code{libffi} 库，作为Java运行时库的一部分。

@item libgcc
@en The GCC runtime library.
GCC 运行时库。

@item libgfortran
@en The Fortran runtime library.
Fortran运行时库。

@item libgo
@en The Go runtime library.  The bulk of this library is mirrored from the
@en @uref{http://code.google.com/@/p/@/go/, master Go repository}.
Go运行时库。该库大部分是来自@uref{http://code.google.com/@/p/@/go/, master Go repository}的镜像。

@item libgomp
@en The GNU OpenMP runtime library.
GNU OpenMP运行时库。

@item libiberty
@en The @code{libiberty} library, used for portability and for some
@en generally useful data structures and algorithms.  @xref{Top, ,
@en Introduction, libiberty, @sc{gnu} libiberty}, for more information
@en about this library.
@code{libiberty} 库，实现了一些常用的数据结构和算法，用于提高可移植性。@pxref{Top, ,Introduction, libiberty, @sc{gnu} libiberty}。

@item libjava
@en The Java runtime library.
Java运行时库。

@item libmudflap
@en The @code{libmudflap} library, used for instrumenting pointer and array
@en dereferencing operations.
@code{libmudflap} 库用于对指针和数组的解引用操作进行插桩。

@item libobjc
@en The Objective-C and Objective-C++ runtime library.
Objective-C和Objective-C++运行时库。

@item libssp
@en The Stack protector runtime library.
栈保护运行时库。

@item libstdc++-v3
@en The C++ runtime library.
C++运行时库。

@item lto-plugin
@en Plugin used by @command{gold} if link-time optimizations are enabled.
当启用链接时优化时，@command{gold}使用的插件。

@item maintainer-scripts
@en Scripts used by the @code{gccadmin} account on @code{gcc.gnu.org}.
@code{gcc.gnu.org} 上的 @code{gccadmin} 帐户使用的脚本。

@item zlib
@en The @code{zlib} compression library, used by the Java front end, as
@en part of the Java runtime library, and for compressing and uncompressing
@en GCC's intermediate language in LTO object files.
@code{zlib} zlib压缩库，用于Java前端，作为Java运行时库的一部分，压缩和解压LTO目标文件中的GCC中间语言。
@end table

@en The build system in the top level directory, including how recursion
@en into subdirectories works and how building runtime libraries for
@en multilibs is handled, is documented in a separate manual, included
@en with GNU Binutils.  @xref{Top, , GNU configure and build system,
@en configure, The GNU configure and build system}, for details.
顶层目录的构建系统，包括子目录递归的工作方式，以及构建各种库的运行时库的处理方式，这些在GNU Binutils的一个单独手册中有介绍。@xref{Top, , GNU configure and build system, configure, The GNU configure and build system}

@en @node gcc Directory
@en @section The @file{gcc} Subdirectory
@node gcc Directory
@section @file{gcc} 子目录

@en The @file{gcc} directory contains many files that are part of the C
@en sources of GCC, other files used as part of the configuration and
@en build process, and subdirectories including documentation and a
@en testsuite.  The files that are sources of GCC are documented in a
@en separate chapter.  @xref{Passes, , Passes and Files of the Compiler}.
@file{gcc} 目录包含了GCC的许多C源文件，用于配置和构建过程的其它文件，以及文档和测试包子目录。GCC的源文件在一个单独的章节里进行介绍。参见@ref{Passes, , 编译器的Passes和相关文件}。

@en @menu
@en * Subdirectories:: Subdirectories of @file{gcc}.
@en * Configuration::  The configuration process, and the files it uses.
@en * Build::          The build system in the @file{gcc} directory.
@en * Makefile::       Targets in @file{gcc/Makefile}.
@en * Library Files::  Library source files and headers under @file{gcc/}.
@en * Headers::        Headers installed by GCC.
@en * Documentation::  Building documentation in GCC.
@en * Front End::      Anatomy of a language front end.
@en * Back End::       Anatomy of a target back end.
@en @end menu
@menu
* Subdirectories::         @file{gcc} 的子目录。
* Configuration::           配置过程，以及所使用的文件。
* Build::           @file{gcc} 目录下的构建系统。
* Makefile::       @file{gcc/Makefile} 中的目标。
* Library Files::         @file{gcc/} 下的库源文件和头文件。
* Headers::         GCC安装的头文件。
* Documentation::           构建GCC中的文档。
* Front End::           语言前端剖析。
* Back End::           目标后端剖析。
@end menu

@en @node Subdirectories
@en @subsection Subdirectories of @file{gcc}
@node Subdirectories
@subsection @file{gcc}的子目录

@en The @file{gcc} directory contains the following subdirectories:
@file{gcc} 目录包含了下列子目录：

@table @file
@item @var{language}
@en Subdirectories for various languages.  Directories containing a file
@en @file{config-lang.in} are language subdirectories.  The contents of
@en the subdirectories @file{cp} (for C++), @file{lto} (for LTO),
@en @file{objc} (for Objective-C) and @file{objcp} (for Objective-C++) are
@en documented in this manual (@pxref{Passes, , Passes and Files of the
@en Compiler}); those for other languages are not.  @xref{Front End, ,
@en Anatomy of a Language Front End}, for details of the files in these
@en directories.
各种语言的子目录。包含了文件@file{config-lang.in}的目录是语言子目录。子目录@file{cp} (C++), @file{objc} (Objective-C)和@file{objcp} (Objective-C++)的内容在该手册中有介绍（@pxref{Passes, , Passes and Files of the Compiler}）；其它语言的没有。关于这些目录下的文件的详细信息，@xref{Front End, , Anatomy of a Language Front End}。

@item config
@en Configuration files for supported architectures and operating
@en systems.  @xref{Back End, , Anatomy of a Target Back End}, for
@en details of the files in this directory.
支持的体系结构和操作系统的配置文件。关于这个目录下的文件的详情，@xref{Back End, , Anatomy of a Target Back End}。 

@item doc
@en Texinfo documentation for GCC, together with automatically generated
@en man pages and support for converting the installation manual to
@en HTML@.  @xref{Documentation}.
GCC的Texinfo文档，和自动生成的man页，以及对将安装手册转换成HTML的支持。@xref{Documentation}。

@item ginclude
@en System headers installed by GCC, mainly those required by the C
@en standard of freestanding implementations.  @xref{Headers, , Headers
@en Installed by GCC}, for details of when these and other headers are
@en installed.
GCC安装的，那些主要由独立实现C标准所需要的系统头文件。关于什么时候安装这些以及其它头文件的详情，@xref{Headers, , Headers Installed by GCC}。 

@item po
@en Message catalogs with translations of messages produced by GCC into
@en various languages, @file{@var{language}.po}.  This directory also
@en contains @file{gcc.pot}, the template for these message catalogues,
@en @file{exgettext}, a wrapper around @command{gettext} to extract the
@en messages from the GCC sources and create @file{gcc.pot}, which is run
@en by @samp{make gcc.pot}, and @file{EXCLUDES}, a list of files from
@en which messages should not be extracted.
用于把GCC产生的信息翻译成各种语言（如德语、西班牙语等）的信息目录，@file{@var{language}.po}。这个目录还包含了信息目录模板 @file{gcc.pot}, 封装 @command{gettext} 以提取GCC信息并创建@file{gcc.pot}的@file{exgettext}（通过命令 @samp{make gcc.pot} 执行），以及不需要提取信息的文件列表@file{EXCLUDES}。

@item testsuite
@en The GCC testsuites (except for those for runtime libraries).
@en @xref{Testsuites}.
GCC测试包（运行时库的除外）。@xref{Testsuites}。
@end table

@en @node Configuration
@en @subsection Configuration in the @file{gcc} Directory
@node Configuration
@subsection @file{gcc}目录下的配置 

@en The @file{gcc} directory is configured with an Autoconf-generated
@en script @file{configure}.  The @file{configure} script is generated
@en from @file{configure.ac} and @file{aclocal.m4}.  From the files
@en @file{configure.ac} and @file{acconfig.h}, Autoheader generates the
@en file @file{config.in}.  The file @file{cstamp-h.in} is used as a
@en timestamp.
@file{gcc} 目录是通过Autoconf生成的脚本@file{configure}来配置的。@file{configure}脚本由@file{configure.ac}和@file{aclocal.m4}生成。Autoheader通过@file{configure.ac}和@file{acconfig.h}来生成文件@file{config.in}。文件@file{cstamp-h.in}作为时间戳使用。

@en @menu
@en * Config Fragments::     Scripts used by @file{configure}.
@en * System Config::        The @file{config.build}, @file{config.host}, and
@en                          @file{config.gcc} files.
@en * Configuration Files::  Files created by running @file{configure}.
@en @end menu
@menu
* Config Fragments::  @file{configure}使用的脚本。
* System Config::  @file{config.build}，@file{config.host}和@file{config.gcc}文件。
* Configuration Files::  运行@file{configure}而创建的文件。
@end menu

@en @node Config Fragments
@en @subsubsection Scripts Used by @file{configure}
@node Config Fragments
@subsubsection @file{configure}使用的脚本

@en @file{configure} uses some other scripts to help in its work:
@file{configure}使用一些其它的脚本帮助其来完成工作：

@itemize @bullet
@en @item The standard GNU @file{config.sub} and @file{config.guess}
@en files, kept in the top level directory, are used.
@item 使用了位于顶层目录的标准GNU @file{config.sub}和@file{config.guess}文件。

@en @item The file @file{config.gcc} is used to handle configuration
@en specific to the particular target machine.  The file
@en @file{config.build} is used to handle configuration specific to the
@en particular build machine.  The file @file{config.host} is used to handle
@en configuration specific to the particular host machine.  (In general,
@en these should only be used for features that cannot reasonably be tested in
@en Autoconf feature tests.)
@en @xref{System Config, , The @file{config.build}; @file{config.host};
@en and @file{config.gcc} Files}, for details of the contents of these files.
@item 文件@file{config.gcc}被用来处理针对特定目标机器的配置。文件@file{config.build}被用来处理针对特定构建机器的配置。文件@file{config.host}被用来处理针对特定主机的配置。（通常，这些只用于那些无法通过Autoconf测试来得到的那些特征。）关于这些文件的详细内容，@xref{System Config, , The @file{config.build}; @file{config.host}; and @file{config.gcc} Files}。

@en @item Each language subdirectory has a file
@en @file{@var{language}/config-lang.in} that is used for
@en front-end-specific configuration.  @xref{Front End Config, , The Front
@en End @file{config-lang.in} File}, for details of this file.
@item 每个language子目录有一个@file{@var{language}/config-lang.in}，用来进行前端特定的配置。关于该文件的详情，@xref{Front End Config, , The Front End @file{config-lang.in} File}。

@en @item A helper script @file{configure.frag} is used as part of
@en creating the output of @file{configure}.
@item 辅助脚本@file{configure.frag}，被@file{configure}用来产生输出。
@end itemize

@en @node System Config
@en @subsubsection The @file{config.build}; @file{config.host}; and @file{config.gcc} Files
@node System Config
@subsubsection @file{config.build}，@file{config.host}和@file{config.gcc}文件

@en The @file{config.build} file contains specific rules for particular systems
@en which GCC is built on.  This should be used as rarely as possible, as the
@en behavior of the build system can always be detected by autoconf.
@file{config.build}文件包含了针对构建GCC的特殊系统的特定规则。通常尽量不使用这个文件，因为autoconf可以检测出构建系统的行为。

@en The @file{config.host} file contains specific rules for particular systems
@en which GCC will run on.  This is rarely needed.
@file{config.host}文件包含了将要运行GCC的特殊系统的特定规则。该文件很少被用到。

@en The @file{config.gcc} file contains specific rules for particular systems
@en which GCC will generate code for.  This is usually needed.
@file{config.gcc}文件包含了GCC生成代码所针对特殊系统的特定规则。通常需要该文件。

@en Each file has a list of the shell variables it sets, with descriptions, at the
@en top of the file.
每一个文件的开始部分都有一个设置的shell变量列表及其描述。

@en FIXME: document the contents of these files, and what variables should
@en be set to control build, host and target configuration.
FIXME：介绍这些文件的内容，以及需要设置什么变量来控制build,host和target配置。

@include configfiles.texi

@en @node Build
@en @subsection Build System in the @file{gcc} Directory
@node Build
@subsection @file{gcc}目录下的构建系统 

@en FIXME: describe the build system, including what is built in what
@en stages.  Also list the various source files that are used in the build
@en process but aren't source files of GCC itself and so aren't documented
@en below (@pxref{Passes}).
FIXME: 描述构建系统，包括什么阶段构建了什么。同时列出在构建过程中使用的，不属于GCC本身的而因此没有在下面记录的，各种源文件（参见 @ref{Passes}）。

@include makefile.texi

@en @node Library Files
@en @subsection Library Source Files and Headers under the @file{gcc} Directory
@node Library Files
@subsection 在@file{gcc}目录下的库源文件和头文件

@en FIXME: list here, with explanation, all the C source files and headers
@en under the @file{gcc} directory that aren't built into the GCC
@en executable but rather are part of runtime libraries and object files,
@en such as @file{crtstuff.c} and @file{unwind-dw2.c}.  @xref{Headers, ,
@en Headers Installed by GCC}, for more information about the
@en @file{ginclude} directory.
FIXME：列出并说明在@file{gcc}目录下的不被构建到GCC可执行程序中，而是作为运行时库的一部分或者目标文件的所有C源文件和头文件。例如@file{crtstuff.c}和@file{unwind-dw2.c}。关于@file{ginclude}目录的详细介绍，@xref{Headers, , Headers Installed by GCC}。

@en @node Headers
@en @subsection Headers Installed by GCC
@node Headers
@subsection GCC安装的头文件

@en In general, GCC expects the system C library to provide most of the
@en headers to be used with it.  However, GCC will fix those headers if
@en necessary to make them work with GCC, and will install some headers
@en required of freestanding implementations.  These headers are installed
@en in @file{@var{libsubdir}/include}.  Headers for non-C runtime
@en libraries are also installed by GCC; these are not documented here.
@en (FIXME: document them somewhere.)
通常，GCC希望所使用的头文件大部分由系统C库提供。但是在需要的时候，GCC会修改那些头文件以便能够工作，并且会安装一些需要单独实现的头文件。这些头文件被安装在@file{@var{libsubdir}/include}下。GCC也安装了些非C运行时库的头文件；这些没有在这里列出。（FIXME：在某处给出这些的文档。）

@en Several of the headers GCC installs are in the @file{ginclude}
@en directory.  These headers, @file{iso646.h},
@en @file{stdarg.h}, @file{stdbool.h}, and @file{stddef.h},
@en are installed in @file{@var{libsubdir}/include},
@en unless the target Makefile fragment (@pxref{Target Fragment})
@en overrides this by setting @code{USER_H}.
GCC所安装一些头文件来自@file{ginclude}目录下。这些头文件@file{iso646.h}, @file{stdarg.h}, @file{stdbool.h}, @file{stddef.h}将被安装在@file{@var{libsubdir}/include}下，除非通过在目标Makefile片段中(@pxref{Target Fragment})设置@code{USER_H}来改变。

@en In addition to these headers and those generated by fixing system
@en headers to work with GCC, some other headers may also be installed in
@en @file{@var{libsubdir}/include}.  @file{config.gcc} may set
@en @code{extra_headers}; this specifies additional headers under
@en @file{config} to be installed on some systems.
除了这些头文件，以及那些GCC为了能够正常工作而修改的系统头文件，@file{@var{libsubdir}/include}下还可能安装了其它头文件。@file{config.gcc}可以设置@code{extra_headers}，用来指出将@file{config}目录下的其它头文件安装在一些系统上。

@en GCC installs its own version of @code{<float.h>}, from @file{ginclude/float.h}.
@en This is done to cope with command-line options that change the
@en representation of floating point numbers.
GCC使用@file{ginclude/float.h}，来安装自己版本的@code{<float.h>}，并通过拷贝命令行选项来改变浮点数的表示。

@en GCC also installs its own version of @code{<limits.h>}; this is generated
@en from @file{glimits.h}, together with @file{limitx.h} and
@en @file{limity.h} if the system also has its own version of
@en @code{<limits.h>}.  (GCC provides its own header because it is
@en required of ISO C freestanding implementations, but needs to include
@en the system header from its own header as well because other standards
@en such as POSIX specify additional values to be defined in
@en @code{<limits.h>}.)  The system's @code{<limits.h>} header is used via
@en @file{@var{libsubdir}/include/syslimits.h}, which is copied from
@en @file{gsyslimits.h} if it does not need fixing to work with GCC; if it
@en needs fixing, @file{syslimits.h} is the fixed copy.
GCC还安装它自己版本的@code{<limits.h>}；它是从@file{glimits.h}中生成的，以及@file{limitx.h}和@file{limity.h}，如果系统还具有自己版本@code{<limits.h>}。（GCC提供自己的头文件，是因为ISO C独立实现的需要，但是该头文件还需要包含系统头文件，是因为其它标准像POSIX指定的额外的值在@code{<limits.h>}中有定义）系统的@code{<limits.h>}头文件通过@file{@var{libsubdir}/include/syslimits.h}来使用，它是从@file{gsyslimits.h}复制过来的，如果其不需要修改为与GCC一起工作；如果需要修改，@file{syslimits.h}为修改后的副本。

@en GCC can also install @code{<tgmath.h>}.  It will do this when
@en @file{config.gcc} sets @code{use_gcc_tgmath} to @code{yes}.
当@file{config.gcc}设置@code{use_gcc_tgmath}为@code{yes}时，GCC还将安装@code{<tgmath.h>}。

@en @node Documentation
@en @subsection Building Documentation
@node Documentation
@subsection 构建文档

@en The main GCC documentation is in the form of manuals in Texinfo
@en format.  These are installed in Info format; DVI versions may be
@en generated by @samp{make dvi}, PDF versions by @samp{make pdf}, and
@en HTML versions by @samp{make html}.  In addition, some man pages are
@en generated from the Texinfo manuals, there are some other text files
@en with miscellaneous documentation, and runtime libraries have their own
@en documentation outside the @file{gcc} directory.  FIXME: document the
@en documentation for runtime libraries somewhere.
主要的GCC文档使用了Texinfo格式的手册形式。这些按照info格式安装；DVI版本的可以通过@samp{make dvi}来生成，PDF版本的通过@samp{make pdf}，以及HTML版本的通过@command{make html}。另外，一些man页通过Texinfo手册来生成，还有一些其它各种文档的文本文件，以及运行时库具有@file{gcc}目录之外的它们自己的文档。FIXME：列出运行时库的文档。

@en @menu
@en * Texinfo Manuals::      GCC manuals in Texinfo format.
@en * Man Page Generation::  Generating man pages from Texinfo manuals.
@en * Miscellaneous Docs::   Miscellaneous text files with documentation.
@en @end menu
@menu
* Texinfo Manuals::   Texinfo格式的GCC手册。
* Man Page Generation::  通过Texinfo手册生成man pages。
* Miscellaneous Docs::      各种杂项文档的文本文件。
@end menu

@en @node Texinfo Manuals
@en @subsubsection Texinfo Manuals
@node Texinfo Manuals
@subsubsection Texinfo手册

@en The manuals for GCC as a whole, and the C and C++ front ends, are in
@en files @file{doc/*.texi}.  Other front ends have their own manuals in
@en files @file{@var{language}/*.texi}.  Common files
@en @file{doc/include/*.texi} are provided which may be included in
@en multiple manuals; the following files are in @file{doc/include}:
GCC整体的以及C和C++前端的手册，在文件@file{doc/*.texi}中。其它前端自己的手册在文件@file{@var{language}/*.texi}中。
通用文件@file{doc/include/*.texi}被提供用来在多个手册中包含；
下列文件在@file{doc/include}中：

@table @file
@item fdl.texi
@en The GNU Free Documentation License.
GNU自由文档许可。 
@item funding.texi
@en The section ``Funding Free Software''.
“资助自由软件”章节。 
@item gcc-common.texi
@en Common definitions for manuals.
手册的通用定义。 
@item gpl.texi
@itemx gpl_v3.texi
@en The GNU General Public License.
GNU通用公共许可。 
@item texinfo.tex
@en A copy of @file{texinfo.tex} known to work with the GCC manuals.
与GCC手册一起工作的@file{texinfo.tex}副本。 
@end table

@en DVI-formatted manuals are generated by @samp{make dvi}, which uses
@en @command{texi2dvi} (via the Makefile macro @code{$(TEXI2DVI)}).  
@en PDF-formatted manuals are generated by @samp{make pdf}, which uses
@en @command{texi2pdf} (via the Makefile macro @code{$(TEXI2PDF)}).  HTML
@en formatted manuals are generated by @samp{make html}.  Info
@en manuals are generated by @samp{make info} (which is run as part of
@en a bootstrap); this generates the manuals in the source directory,
@en using @command{makeinfo} via the Makefile macro @code{$(MAKEINFO)},
@en and they are included in release distributions.
DVI格式的手册通过@samp{make dvi}生成，其使用了@command{texi2dvi}（通过Makefile宏@code{$(TEXI2DVI)}）。PDF格式的手册通过@samp{make pdf}生成，其使用了@command{texi2pdf}（通过Makefile宏@code{$(TEXI2PDF)}）。HTML格式的手册通过@command{make html}生成。info手册通过@samp{make info}生成（作为bootstrap的一部分运行）；这个是在源目录中生成手册，使用@command{makeinfo}，通过Makefile宏@code{$(MAKEINFO)}，它们被包含在发现版本中。

@en Manuals are also provided on the GCC web site, in both HTML and
@en PostScript forms.  This is done via the script
@en @file{maintainer-scripts/update_web_docs_svn}.  Each manual to be
@en provided online must be listed in the definition of @code{MANUALS} in
@en that file; a file @file{@var{name}.texi} must only appear once in the
@en source tree, and the output manual must have the same name as the
@en source file.  (However, other Texinfo files, included in manuals but
@en not themselves the root files of manuals, may have names that appear
@en more than once in the source tree.)  The manual file
@en @file{@var{name}.texi} should only include other files in its own
@en directory or in @file{doc/include}.  HTML manuals will be generated by
@en @samp{makeinfo --html}, PostScript manuals by @command{texi2dvi}
@en and @command{dvips}, and PDF manuals by @command{texi2pdf}.
@en All Texinfo files that are parts of manuals must
@en be version-controlled, even if they are generated files, for the
@en generation of online manuals to work.
手册在GCC网站上也有提供，HTML和PostScript格式的。这是通过脚本@file{maintainer-scripts/update_web_docs_svn}生成的。在线提供的每个手册都必须在那个文件中的@code{MANUALS}定义中列出；文件@file{@var{name}.texi}必须在源树中只出现一次，输出手册必须与源文件具有相同的名字。（但是，手册中包含的其它不是根文件的Texinfo文件，其名字可能会在源树中出现多次。）手册文件@file{@var{name}.texi}应该只包含它目录下或者@file{doc/include}下的其它文件。HTML手册将通过@samp{makeinfo --html}生成，PostScript手册将通过@command{texi2dvi}和@command{dvips}，PDF手册通过@command{texi2pdf}。为了使生成的在线手册可以工作，所有属于手册一部分的Texinfo文件都必须放入CVS，即使它们是被生成的文件。

@en The installation manual, @file{doc/install.texi}, is also provided on
@en the GCC web site.  The HTML version is generated by the script
@en @file{doc/install.texi2html}.
安装手册，@file{doc/install.texi}，也在GCC网站上有提供。HTML版本通过脚本@file{doc/install.texi2html}生成。

@en @node Man Page Generation
@en @subsubsection Man Page Generation
@node Man Page Generation
@subsubsection 生成Man Page

@en Because of user demand, in addition to full Texinfo manuals, man pages
@en are provided which contain extracts from those manuals.  These man
@en pages are generated from the Texinfo manuals using
@en @file{contrib/texi2pod.pl} and @command{pod2man}.  (The man page for
@en @command{g++}, @file{cp/g++.1}, just contains a @samp{.so} reference
@en to @file{gcc.1}, but all the other man pages are generated from
@en Texinfo manuals.)
出于用户的需求，除了完整的Texinfo手册以外，还提供了从那些手册中提取的man页。这些man页使用@file{contrib/texi2pod.pl}和@command{pod2man}，从Texinfo手册中生成。（@command{g++}, @file{cp/g++.1}的man页，只是包含了一个对@file{gcc.1}的@samp{.so}引用，但所有其它man页是从Texinfo手册生成的。）

@en Because many systems may not have the necessary tools installed to
@en generate the man pages, they are only generated if the
@en @file{configure} script detects that recent enough tools are
@en installed, and the Makefiles allow generating man pages to fail
@en without aborting the build.  Man pages are also included in release
@en distributions.  They are generated in the source directory.
因为许多系统可能没有安装生成man页所需的工具，所以它们只有当@file{configure}脚本检测到新近安装了足够的工具时才会被生成，并且Makefile允许在生成man页失败时，而不会终止构建。Man页也包含在发行版本中。它们在源目录下生成。

@en Magic comments in Texinfo files starting @samp{@@c man} control what
@en parts of a Texinfo file go into a man page.  Only a subset of Texinfo
@en is supported by @file{texi2pod.pl}, and it may be necessary to add
@en support for more Texinfo features to this script when generating new
@en man pages.  To improve the man page output, some special Texinfo
@en macros are provided in @file{doc/include/gcc-common.texi} which
@en @file{texi2pod.pl} understands:
Texinfo文件中起始于@samp{@@c man}的Magic注释，用来控制Texinfo文件中哪些部分放到man页中。@file{texi2pod.pl}只支持Texinfo的一个子集，并且当生成新的man页时，可能需要增加对Texinfo特征的更多支持。为了提高man页输出，在@file{doc/include/gcc-common.texi}中提供了一些@file{texi2pod.pl}可以理解的特定的Texinfo宏：

@table @code
@item @@gcctabopt
@en Use in the form @samp{@@table @@gcctabopt} for tables of options,
@en where for printed output the effect of @samp{@@code} is better than
@en that of @samp{@@option} but for man page output a different effect is
@en wanted.
选项表，以@samp{@@table @@gcctabopt}形式使用，用于@samp{@@code}的打印输出效果比@samp{@@option}的好，但是对于man页，却想要不同的效果的情况。 
@item @@gccoptlist
@en Use for summary lists of options in manuals.
用于手册中的选项列表。 
@item @@gol
@en Use at the end of each line inside @samp{@@gccoptlist}.  This is
@en necessary to avoid problems with differences in how the
@en @samp{@@gccoptlist} macro is handled by different Texinfo formatters.
用在@samp{@@gccoptlist}中每行的结尾。这可以避免由于不同的Texinfo格式化对@samp{@@gccoptlist}宏的不同处理所带来的问题。
@end table

@en FIXME: describe the @file{texi2pod.pl} input language and magic
@en comments in more detail.
FIXME: 更加详细的描述@file{texi2pod.pl}输入语言和magic注释。

@en @node Miscellaneous Docs
@en @subsubsection Miscellaneous Documentation
@node Miscellaneous Docs
@subsubsection 其它文档

@en In addition to the formal documentation that is installed by GCC,
@en there are several other text files in the @file{gcc} subdirectory
@en with miscellaneous documentation:
除了GCC安装的正式文件以外，还有一些其它杂项文档的文本文件：

@en @table @file
@en @item ABOUT-GCC-NLS
@en Notes on GCC's Native Language Support.  FIXME: this should be part of
@en this manual rather than a separate file.
@en @item ABOUT-NLS
@en Notes on the Free Translation Project.
@en @item COPYING
@en @itemx COPYING3
@en The GNU General Public License, Versions 2 and 3.
@en @item COPYING.LIB
@en @itemx COPYING3.LIB
@en The GNU Lesser General Public License, Versions 2.1 and 3.
@en @item *ChangeLog*
@en @itemx */ChangeLog*
@en Change log files for various parts of GCC@.
@en @item LANGUAGES
@en Details of a few changes to the GCC front-end interface.  FIXME: the
@en information in this file should be part of general documentation of
@en the front-end interface in this manual.
@en @item ONEWS
@en Information about new features in old versions of GCC@.  (For recent
@en versions, the information is on the GCC web site.)
@en @item README.Portability
@en Information about portability issues when writing code in GCC@.  FIXME:
@en why isn't this part of this manual or of the GCC Coding Conventions?
@en @end table
@table @file
@item ABOUT-GCC-NLS
GCC本地语言支持的笔记。FIXME：这应该为手册的一部分，而不是单独的文件。 
@item ABOUT-NLS
自由翻译项目的笔记。 
@item COPYING
GNU通用公共许可。 
@item COPYING.LIB
GNU宽松通用公共许可。 
@item *ChangeLog*
@itemx */ChangeLog*
GCC各部分的更新日志。 
@item LANGUAGES
GCC前端接口的一些改动的详细情况。
FIXME：该文件中信息应该为本手册中前端接口通用文档的一部分。 
@item ONEWS
旧版本GCC中的新特征信息。（对于近期版本，信息在GCC网站上。） 
@item README.Portability
关于在GCC中写代码时的可移植性的信息。
FIXME：为什么这部分不作为本手册中的GCC代码约定？ 
@end table

@en FIXME: document such files in subdirectories, at least @file{config},
@en @file{cp}, @file{objc}, @file{testsuite}.
FIXME: 记载子目录中的这样的文件，
起码像@file{config}, @file{cp}, @file{objc}, @file{testsuite}。 

@en @node Front End
@en @subsection Anatomy of a Language Front End
@node Front End
@subsection 语言前端剖析

@en A front end for a language in GCC has the following parts:
在GCC中，一个语言前端包括以下几部分：

@itemize @bullet
@item
@en A directory @file{@var{language}} under @file{gcc} containing source
@en files for that front end.  @xref{Front End Directory, , The Front End
@en @file{@var{language}} Directory}, for details.
位于@file{gcc}之下的@file{@var{language}}目录，其包含了那个前端的源文件。详情@xref{Front End Directory, , The Front End @file{@var{language}} Directory}。
@item
@en A mention of the language in the list of supported languages in
@en @file{gcc/doc/install.texi}.
在@file{gcc/doc/install.texi}中的支持语言列表里，对该语言的提及。
@item
@en A mention of the name under which the language's runtime library is
@en recognized by @option{--enable-shared=@var{package}} in the
@en documentation of that option in @file{gcc/doc/install.texi}.
在@file{gcc/doc/install.texi}中的选项介绍里，对语言运行时库的名字进行提及，其可以由@option{--enable-shared=@var{package}}来识别。
@item
@en A mention of any special prerequisites for building the front end in
@en the documentation of prerequisites in @file{gcc/doc/install.texi}.
在@file{gcc/doc/install.texi}中的前提条件介绍里，对构建前端所需要的任何具体前提条件进行提及。
@item
@en Details of contributors to that front end in
@en @file{gcc/doc/contrib.texi}.  If the details are in that front end's
@en own manual then there should be a link to that manual's list in
@en @file{contrib.texi}.
在@file{gcc/doc/contrib.texi}中，那个前端的贡献者的详细介绍。如果详细介绍是在那个前端自己的手册中，则在@file{contrib.texi}中应该有一个指向那个手册列表的链接。
@item
@en Information about support for that language in
@en @file{gcc/doc/frontends.texi}.
在@file{gcc/doc/frontends.texi}中，关于对那个语言的支持信息。
@item
@en Information about standards for that language, and the front end's
@en support for them, in @file{gcc/doc/standards.texi}.  This may be a
@en link to such information in the front end's own manual.
在@file{gcc/doc/standards.texi}中，关于那个语言的标准和前端对它们的支持信息。这可以为一个指向前端自己手册中这些信息的链接。
@item
@en Details of source file suffixes for that language and @option{-x
@en @var{lang}} options supported, in @file{gcc/doc/invoke.texi}.
在@file{gcc/doc/invoke.texi}中，对那个语言的源文件后缀和所支持的@option{-x @var{lang}}选项进行详细介绍。
@item
@en Entries in @code{default_compilers} in @file{gcc.c} for source file
@en suffixes for that language.
在@file{gcc.c}中的@code{default_compilers}里，针对那个语言的源文件后缀的项。
@item
@en Preferably testsuites, which may be under @file{gcc/testsuite} or
@en runtime library directories.  FIXME: document somewhere how to write
@en testsuite harnesses.
适当的测试包，其可能在@file{gcc/testsuite}下或者运行时库目录下。FIXME：介绍一下如何写测试包套件。
@item
@en Probably a runtime library for the language, outside the @file{gcc}
@en directory.  FIXME: document this further.
在@file{gcc}目录之外，可能还有一个该语言的运行时库。FIXME：进一步介绍下。
@item
@en Details of the directories of any runtime libraries in
@en @file{gcc/doc/sourcebuild.texi}.
在@file{gcc/doc/sourcebuild.texi}中，对任何运行时库的目录进行详细介绍。
@item
@en Check targets in @file{Makefile.def} for the top-level @file{Makefile}
@en to check just the compiler or the compiler and runtime library for the
@en language.
在@file{Makefile.def}中，为顶层@file{Makefile}来检测目标机器，检测是否为只有编译器，或者有编译器和语言运行时库。
@end itemize

@en If the front end is added to the official GCC source repository, the
@en following are also necessary:
如果前端是被加入到了官方的GCC源码库中，则还需要以下几部分：

@itemize @bullet
@item
@en At least one Bugzilla component for bugs in that front end and runtime
@en libraries.  This category needs to be added to the Bugzilla database.
至少有一个针对那个前端和运行时库的bug的Bugzilla部件。该类别需要被添加到Bugzilla数据库中。
@item
@en Normally, one or more maintainers of that front end listed in
@en @file{MAINTAINERS}.
通常，在@file{MAINTAINERS}中列出那个前端的一个或多个维护者。
@item
@en Mentions on the GCC web site in @file{index.html} and
@en @file{frontends.html}, with any relevant links on
@en @file{readings.html}.  (Front ends that are not an official part of
@en GCC may also be listed on @file{frontends.html}, with relevant links.)
在GCC网站上的@file{index.html}和@file{frontends.html}中对该前端进行提及，并在@file{readings.html}上给出任何相关链接。（不是GCC官方的前端也可以在@file{frontends.html}中列出，并带有相关链接。）
@item
@en A news item on @file{index.html}, and possibly an announcement on the
@en @email{gcc-announce@@gcc.gnu.org} mailing list.
在@file{index.html}中给出一条消息，并且可能在@email{gcc-announce@@gcc.gnu.org}邮件组中的一个声明。
@item
@en The front end's manuals should be mentioned in
@en @file{maintainer-scripts/update_web_docs_svn} (@pxref{Texinfo Manuals})
@en and the online manuals should be linked to from
@en @file{onlinedocs/index.html}.
前端手册应该在@file{maintainer-scripts/update_web_docs_svn}(@pxref{Texinfo Manuals}）中有记载，并且来自@file{onlinedocs/index.html}的在线手册应该有相应链接。
@item
@en Any old releases or CVS repositories of the front end, before its
@en inclusion in GCC, should be made available on the GCC FTP site
@en @uref{ftp://gcc.gnu.org/pub/gcc/old-releases/}.
在GCC包含该前端之前的任何旧的发行版本或CVS库版本，应该可以在GCC FTP站点@uref{ftp://gcc.gnu.org/pub/gcc/old-releases/}上获得。
@item
@en The release and snapshot script @file{maintainer-scripts/gcc_release}
@en should be updated to generate appropriate tarballs for this front end.
@en The associated @file{maintainer-scripts/snapshot-README} and
@en @file{maintainer-scripts/snapshot-index.html} files should be updated
@en to list the tarballs and diffs for this front end.
发行版和快照脚本@file{maintainer-scripts/gcc_release}应该被更新为可以生成该前端的合适的tar包。相关的@file{maintainer-scripts/snapshot-README}和@file{maintainer-scripts/snapshot-index.html}文件应该被更新为可以列出该前端的tar包和diffs。
@item
@en If this front end includes its own version files that include the
@en current date, @file{maintainer-scripts/update_version} should be
@en updated accordingly.
如果该前端包含自己的版本文件，其包含了当前日期，则@file{maintainer-scripts/update_version}应该相应的被更新。
@end itemize

@en @menu
@en * Front End Directory::  The front end @file{@var{language}} directory.
@en * Front End Config::     The front end @file{config-lang.in} file.
@en * Front End Makefile::   The front end @file{Make-lang.in} file.
@en @end menu
@menu
* Front End Directory:: 前端@file{@var{language}}目录。
* Front End Config::  	前端@file{config-lang.in}文件。
* Front End Makefile::  前端@file{Make-lang.in}文件。
@end menu

@en @node Front End Directory
@en @subsubsection The Front End @file{@var{language}} Directory
@node Front End Directory
@subsubsection 前端@file{@var{language}}目录

@en A front end @file{@var{language}} directory contains the source files
@en of that front end (but not of any runtime libraries, which should be
@en outside the @file{gcc} directory).  This includes documentation, and
@en possibly some subsidiary programs built alongside the front end.
@en Certain files are special and other parts of the compiler depend on
@en their names:
前端@file{@var{language}}目录包含了该前端的源文件（不过对于运行时库除外，它们应该放到@file{gcc}目录外面），包括文档或者随着前端一起构建的辅助程序。有些文件是专用的，并且编译器的其它部分会依赖它们的名字：

@table @file
@item config-lang.in
@en This file is required in all language subdirectories.  @xref{Front End
@en Config, , The Front End @file{config-lang.in} File}, for details of
@en its contents
所有的language子目录都需要这个文件。详情@xref{Front End Config, , The Front End @file{config-lang.in} File}。 
@item Make-lang.in
@en This file is required in all language subdirectories.  @xref{Front End
@en Makefile, , The Front End @file{Make-lang.in} File}, for details of its
@en contents.
该文件在所有的语言子目录下都需要。其具体的内容，@xref{Front End Makefile, , The Front End @file{Make-lang.in} File}。
@item lang.opt
@en This file registers the set of switches that the front end accepts on
@en the command line, and their @option{--help} text.  @xref{Options}.
该文件注册了前端所接受的命令行中的选项开关集，以及它们的@option{--help}文本。@xref{Options}。 
@item lang-specs.h
@en This file provides entries for @code{default_compilers} in
@en @file{gcc.c} which override the default of giving an error that a
@en compiler for that language is not installed.
该文件提供了在@file{gcc.c}中的@code{default_compilers}的入口，用于覆盖当该语言的编译器没有安装时报错的缺省行为。 
@item @var{language}-tree.def
@en This file, which need not exist, defines any language-specific tree
@en codes.
该文件，不需要存在，定义了任何语言特定的树代码。
@end table

@en @node Front End Config
@en @subsubsection The Front End @file{config-lang.in} File
@node Front End Config
@subsubsection 前端@file{config-lang.in}文件

@en Each language subdirectory contains a @file{config-lang.in} file.  In
@en addition the main directory contains @file{c-config-lang.in}, which
@en contains limited information for the C language.  This file is a shell
@en script that may define some variables describing the language:
每一个语言子目录都包含一个@file{config-lang.in}文件。另外主目录下包含一个@file{c-config-lang.in}，里面含有C语言的限制信息。这个文件是一个shell脚本，可以用来定义一些描述语言的变量。

@table @code
@item language
@en This definition must be present, and gives the name of the language
@en for some purposes such as arguments to @option{--enable-languages}.
必须定义，它给出了语言的名字用于作为@option{--enable-languages}的参数或其它用途。
@item lang_requires
@en If defined, this variable lists (space-separated) language front ends
@en other than C that this front end requires to be enabled (with the
@en names given being their @code{language} settings).  For example, the
@en Java front end depends on the C++ front end, so sets
@en @samp{lang_requires=c++}.
如果定义，该变量列出了（由空格分开）该前端需要被支持的除了C的语言前端（使用所设置的@code{language}名字）。例如，Java前端依赖于C++前端，所以要设为@samp{lang_requires=c++}。
@item subdir_requires
@en If defined, this variable lists (space-separated) front end directories
@en other than C that this front end requires to be present.  For example,
@en the Objective-C++ front end uses source files from the C++ and
@en Objective-C front ends, so sets @samp{subdir_requires="cp objc"}.
如果定义，该变量列出了（由空格分开）该前端需要存在的除了C的前端目录。例如，Objective-C++前端使用了C++和Objective-C前端的源文件，所以要设为@samp{subdir_requires="cp objc"}。
@item target_libs
@en If defined, this variable lists (space-separated) targets in the top
@en level @file{Makefile} to build the runtime libraries for this
@en language, such as @code{target-libobjc}.
如果定义，该变量列出了（由空格分开）在顶层@file{Makefile}中为该语言构建运行时库的目标，例如@code{target-libobjc}。
@item lang_dirs
@en If defined, this variable lists (space-separated) top level
@en directories (parallel to @file{gcc}), apart from the runtime libraries,
@en that should not be configured if this front end is not built.
如果定义，该变量列出了（由空格分开）只有构建该前端时才应被配置的除了运行时库之外的顶层目录（与@file{gcc}并列）。
@item build_by_default
@en If defined to @samp{no}, this language front end is not built unless
@en enabled in a @option{--enable-languages} argument.  Otherwise, front
@en ends are built by default, subject to any special logic in
@en @file{configure.ac} (as is present to disable the Ada front end if the
@en Ada compiler is not already installed).
如果定义为@samp{no}，则该语言前端只有在@option{--enable-languages}中指定参数时才被构建。否则，会按照缺省方式来构建前端，并且受到@file{configure.ac}中特定逻辑的影响（正如目前，如果Ada编译器没有安装则禁止Ada前端）。
@item boot_language
@en If defined to @samp{yes}, this front end is built in stage1 of the
@en bootstrap.  This is only relevant to front ends written in their own
@en languages.
如果定义为@samp{yes}，则该前端在自举阶段1中会被构建。这个只与用它们自己的语言写的前端相关。 
@item compilers
@en If defined, a space-separated list of compiler executables that will
@en be run by the driver.  The names here will each end
@en with @samp{\$(exeext)}.
如果定义，则为空格分隔的编译器可执行程序列表，其将被驱动调用运行。这里的名字将以@samp{\$(exeext)}结尾。 
@item outputs
@en If defined, a space-separated list of files that should be generated
@en by @file{configure} substituting values in them.  This mechanism can
@en be used to create a file @file{@var{language}/Makefile} from
@en @file{@var{language}/Makefile.in}, but this is deprecated, building
@en everything from the single @file{gcc/Makefile} is preferred.
如果定义，则为空格分隔的文件列表，其将被@file{configure}通过值替换来生成。这种机制可以用来从@file{@var{language}/Makefile.in}中创建一个@file{@var{language}/Makefile}文件，但不赞成这样，应该从单个@file{gcc/Makefile}中来构建所有。
@item gtfiles
@en If defined, a space-separated list of files that should be scanned by
@en @file{gengtype.c} to generate the garbage collection tables and routines for
@en this language.  This excludes the files that are common to all front
@en ends.  @xref{Type Information}.
如果定义，则为空格分隔的文件列表，其将被gengtype.c扫描来生成垃圾搜集表，和该语言的程序。这不包括所有前端公用的文件。@xref{Type Information}。 
@end table

@node Front End Makefile
@subsubsection The Front End @file{Make-lang.in} File

@en Each language subdirectory contains a @file{Make-lang.in} file.  It contains
@en targets @code{@var{lang}.@var{hook}} (where @code{@var{lang}} is the
@en setting of @code{language} in @file{config-lang.in}) for the following
@en values of @code{@var{hook}}, and any other Makefile rules required to
@en build those targets (which may if necessary use other Makefiles
@en specified in @code{outputs} in @file{config-lang.in}, although this is
@en deprecated).  It also adds any testsuite targets that can use the
@en standard rule in @file{gcc/Makefile.in} to the variable
@en @code{lang_checks}.
所有的language子目录都需要这个文件。它包含了目标@code{@var{lang}.@var{hook}}（@code{@var{lang}}是在@file{config-lang.in}中对@code{language}的设置），即下面的@code{@var{hook}}的值，以及构建这些目标的其它Makefile规则(如果需要的话，可以使用在@file{config-lang.in}中通过@code{outputs}指定的其它Makefile，但是不赞成这种方式)。它还向变量@code{lang_checks}增加了任何可以使用@file{gcc/Makefile.in}中的标准规则的测试包目标。

@table @code
@itemx all.cross
@itemx start.encap
@itemx rest.encap
@en FIXME: exactly what goes in each of these targets?
FIXME: 确切的描述这些目标。 
@item tags
@en Build an @command{etags} @file{TAGS} file in the language subdirectory
@en in the source tree.
在源树的语言子目录中构建一个@command{etags} @file{TAGS}文件。 
@item info
@en Build info documentation for the front end, in the build directory.
@en This target is only called by @samp{make bootstrap} if a suitable
@en version of @command{makeinfo} is available, so does not need to check
@en for this, and should fail if an error occurs.
在构建目录下构建前端的info文档。这个目标只被@samp{make bootstrap}在有合适版本的@command{makeinfo}时调用，所以不需要进行检查，并且如果错误发生时，应该失败。
@item dvi
@en Build DVI documentation for the front end, in the build directory.
@en This should be done using @code{$(TEXI2DVI)}, with appropriate
@en @option{-I} arguments pointing to directories of included files.
在构建目录下构建前端的DVI文档。这应该使用@code{$(TEXI2DVI)}，以及合适的指向要包含文件目录的@option{-I}参数，来完成。 
@item pdf
@en Build PDF documentation for the front end, in the build directory.
@en This should be done using @code{$(TEXI2PDF)}, with appropriate
@en @option{-I} arguments pointing to directories of included files.
在构建目录下构建前端的PDF文档。这应该使用@code{$(TEXI2PDF)}，以及合适的指向要包含文件目录的@option{-I}参数，来完成。 
@item html
@en Build HTML documentation for the front end, in the build directory.
在构建目录下构建前端的HTML文档
@item man
@en Build generated man pages for the front end from Texinfo manuals
@en (@pxref{Man Page Generation}), in the build directory.  This target
@en is only called if the necessary tools are available, but should ignore
@en errors so as not to stop the build if errors occur; man pages are
@en optional and the tools involved may be installed in a broken way.
在构建目录下通过Texinfo手册来生成前端的man页（@pxref{Man Page Generation}）。该目标只在所需工具可用时才被调用，并且应该能够忽视错误，从而不会在错误发生时停止构建；man页是可选的，其相关工具如果没有被安装也可以。
@item install-common
@en Install everything that is part of the front end, apart from the
@en compiler executables listed in @code{compilers} in
@en @file{config-lang.in}.
安装前端的所有部分，
除了在@file{config-lang.in}中列出的@code{compilers}可执行程序以外。 
@item install-info
@en Install info documentation for the front end, if it is present in the
@en source directory.  This target should have dependencies on info files
@en that should be installed.
安装前端的info文档，如果源目录中存在的话。该目标应该与要安装的info文件有依赖关系。 
@item install-man
@en Install man pages for the front end.  This target should ignore
@en errors.
安装前端的man页。该目标应该能够忽略错误。 
@item install-plugin
Install headers needed for plugins.
@item srcextra
@en Copies its dependencies into the source directory.  This generally should
@en be used for generated files such as Bison output files which are not
@en version-controlled, but should be included in any release tarballs.  This
@en target will be executed during a bootstrap if
@en @samp{--enable-generated-files-in-srcdir} was specified as a
@en @file{configure} option.
将它的依赖复制到源目录中。通常用于生成的文件，像Bison输出文件，其不存在于CVS中，但应该放到任何的发行tar包中。该目标将在自举过程中当@samp{--enable-generated-files-in-srcdir}被指定为一个@file{configure}选项时被执行。
@item srcinfo
@itemx srcman
@en Copies its dependencies into the source directory.  These targets will be
@en executed during a bootstrap if @samp{--enable-generated-files-in-srcdir}
@en was specified as a @file{configure} option.
将它的依赖复制到源目录中。该目标将在自举过程中当@samp{--enable-generated-files-in-srcdir}被指定为一个@file{configure}选项时被执行。 
@item uninstall
@en Uninstall files installed by installing the compiler.  This is
@en currently documented not to be supported, so the hook need not do
@en anything.
卸载通过安装编译器所安装的文件。目前还不支持，所以不要做任何事情。 
@item mostlyclean
@itemx clean
@itemx distclean
@itemx maintainer-clean
@en The language parts of the standard GNU
@en @samp{*clean} targets.  @xref{Standard Targets, , Standard Targets for
@en Users, standards, GNU Coding Standards}, for details of the standard
@en targets.  For GCC, @code{maintainer-clean} should delete
@en all generated files in the source directory that are not version-controlled,
@en but should not delete anything that is.
标准GNU@samp{*clean}目标的语言部分。关于标准目标的详情，参见@ref{Standard Targets, , Standard Targets for Users, standards, GNU Coding Standards}。对于GCC，@code{maintainer-clean}应该删除所有在源目录下生成的没有放入CVS的文件，但不要删除任何放入CVS的文件。 
@end table

@file{Make-lang.in} must also define a variable @code{@var{lang}_OBJS}
to a list of host object files that are used by that language.

@en @node Back End
@en @subsection Anatomy of a Target Back End
@node Back End
@subsection 目标机后端剖析

@en A back end for a target architecture in GCC has the following parts:
GCC中与目标体系结构相关的后端包括下面的部分：

@itemize @bullet
@item
@en A directory @file{@var{machine}} under @file{gcc/config}, containing a
@en machine description @file{@var{machine}.md} file (@pxref{Machine Desc,
@en , Machine Descriptions}), header files @file{@var{machine}.h} and
@en @file{@var{machine}-protos.h} and a source file @file{@var{machine}.c}
@en (@pxref{Target Macros, , Target Description Macros and Functions}),
@en possibly a target Makefile fragment @file{t-@var{machine}}
@en (@pxref{Target Fragment, , The Target Makefile Fragment}), and maybe
@en some other files.  The names of these files may be changed from the
@en defaults given by explicit specifications in @file{config.gcc}.
位于@file{gcc/config}下面的目录@file{@var{machine}}，包括一个机器描述文件@file{@var{machine}.md}(@pxref{Machine Desc, , Machine Descriptions})，头文件@file{@var{machine}.h}和@file{@var{machine}-protos.h}，以及一个源文件@file{@var{machine}.c}(@pxref{Target Macros, , Target Description Macros and Functions})，可能会有一个目标Makefile片段@file{t-@var{machine}}(@pxref{Target Fragment, , The Target Makefile Fragment})，以及其它文件。可以在@file{config.gcc}中通过显示指出来改变文件的缺省名字。
@item
@en If necessary, a file @file{@var{machine}-modes.def} in the
@en @file{@var{machine}} directory, containing additional machine modes to
@en represent condition codes.  @xref{Condition Code}, for further details.
如果需要的话，
在@file{@var{machine}}目录下会有一个文件@file{@var{machine}-modes.def}，
包含了附加的机器模式用来表示条件代码。详情@xref{Condition Code}。
@item
@en An optional @file{@var{machine}.opt} file in the @file{@var{machine}}
@en directory, containing a list of target-specific options.  You can also
@en add other option files using the @code{extra_options} variable in
@en @file{config.gcc}.  @xref{Options}.
在@file{@var{machine}}目录下，有一个可选的@file{@var{machine}.opt}文件，
包含了一个目标特定的选项列表。
你也可以通过在@file{config.gcc}中使用@code{extra_options}变量来增加其它的
选项文件。@xref{Options}。
@item
@en Entries in @file{config.gcc} (@pxref{System Config, , The
@en @file{config.gcc} File}) for the systems with this target
@en architecture.
在@file{config.gcc}（@pxref{System Config, , The @file{config.gcc} File}）中，
该目标体系结构与系统相关的条目。
@item
@en Documentation in @file{gcc/doc/invoke.texi} for any command-line
@en options supported by this target (@pxref{Run-time Target, , Run-time
@en Target Specification}).  This means both entries in the summary table
@en of options and details of the individual options.
在@file{gcc/doc/invoke.texi}中关于该目标所支持的任何命令行选项的文档
（参见运行时目标规定）。
这意味着在选项的汇总表中以及单个选项的详细描述中都要有相关的条目。
@item
@en Documentation in @file{gcc/doc/extend.texi} for any target-specific
@en attributes supported (@pxref{Target Attributes, , Defining
@en target-specific uses of @code{__attribute__}}), including where the
@en same attribute is already supported on some targets, which are
@en enumerated in the manual.
在@file{gcc/doc/extend.texi}中关于所支持的目标特定属性的文档
（参见__attribute__的目标特定用法），
包括在哪些地方已经被其它一些目标所支持的相同属性，以及哪些在手册中已经被列举。
@item
@en Documentation in @file{gcc/doc/extend.texi} for any target-specific
@en pragmas supported.
在@file{gcc/doc/extend.texi}中关于支持的所有目标特定pragma的文档。
@item
@en Documentation in @file{gcc/doc/extend.texi} of any target-specific
@en built-in functions supported.
在@file{gcc/doc/extend.texi}中关于支持的所有目标特定built-in函数的文档。
@item
@en Documentation in @file{gcc/doc/extend.texi} of any target-specific
@en format checking styles supported.
在@file{gcc/doc/extend.texi}中关于支持的所有目标特定格式检测风格的文档。
@item
@en Documentation in @file{gcc/doc/md.texi} of any target-specific
@en constraint letters (@pxref{Machine Constraints, , Constraints for
@en Particular Machines}).
在@file{gcc/doc/md.texi}中关于所有目标特定的约束字母的文档
（@pxref{Machine Constraints, , Constraints for Particular Machines}）。
@item
@en A note in @file{gcc/doc/contrib.texi} under the person or people who
@en contributed the target support.
在@file{gcc/doc/contrib.texi}中记录下由谁提供的目标支持。
@item
@en Entries in @file{gcc/doc/install.texi} for all target triplets
@en supported with this target architecture, giving details of any special
@en notes about installation for this target, or saying that there are no
@en special notes if there are none.
在@file{gcc/doc/install.texi}中关于该目标体系结构支持的所有目标三元参数，
给出该目标安装所需要的特殊注解或者注明没有。
@item
@en Possibly other support outside the @file{gcc} directory for runtime
@en libraries.  FIXME: reference docs for this.  The @code{libstdc++} porting
@en manual needs to be installed as info for this to work, or to be a
@en chapter of this manual.
可能在@file{gcc}目录之外会有其它运行库的支持。FIXME：关于这方面的参考文档。
这个工作需要安装libstdc++移植手册或者将其作为本手册的一章。
@end itemize

@en If the back end is added to the official GCC source repository, the
@en following are also necessary:
如果是添加到GCC官方CVS库中的后端，还需要下面的内容：

@itemize @bullet
@item
@en An entry for the target architecture in @file{readings.html} on the
@en GCC web site, with any relevant links.
在GCC网站上的@file{readings.html}中有一条关于目标体系结构的记录，并带有任何相关的链接。
@item
@en Details of the properties of the back end and target architecture in
@en @file{backends.html} on the GCC web site.
在GCC网站上的@file{backends.html}中有关于后端和目标体系结构的详细特性。
@item
@en A news item about the contribution of support for that target
@en architecture, in @file{index.html} on the GCC web site.
在GCC网站上的@file{index.html}中有一条关于提供目标体系结构支持的消息公告。
@item
@en Normally, one or more maintainers of that target listed in
@en @file{MAINTAINERS}.  Some existing architectures may be unmaintained,
@en but it would be unusual to add support for a target that does not have
@en a maintainer when support is added.
通常的，会在@file{MAINTAINERS}中列出该目标的一个或多个维护者。虽然有些现存的体系结构可能没有被维护了，但是通常是不会为没有维护者的目标提供支持的。
@item
Target triplets covering all @file{config.gcc} stanzas for the target,
in the list in @file{contrib/config-list.mk}.
@end itemize
@en @node Testsuites
@en @chapter Testsuites
@node Testsuites
@chapter 测试包

@en GCC contains several testsuites to help maintain compiler quality.
@en Most of the runtime libraries and language front ends in GCC have
@en testsuites.  Currently only the C language testsuites are documented
@en here; FIXME: document the others.
GCC包含了几个测试包用来确保编译器的质量。
大部分运行时库和语言前端在GCC中都有测试包。
目前在这里只讲述了C语言的测试包；FIXME：介绍其它的测试包。

@en @menu
@en * Test Idioms::     Idioms used in testsuite code.
@en * Test Directives:: Directives used within DejaGnu tests.
@en * Ada Tests::       The Ada language testsuites.
@en * C Tests::         The C language testsuites.
@en * libgcj Tests::    The Java library testsuites.
@en * LTO Testing::     Support for testing link-time optimizations.
@en * gcov Testing::    Support for testing gcov.
@en * profopt Testing:: Support for testing profile-directed optimizations.
@en * compat Testing::  Support for testing binary compatibility.
@en * Torture Tests::   Support for torture testing using multiple options.
@en @end menu
@menu
* Test Idioms::      在测试包代码中使用的习惯用语
* Test Directives::      在DejaGnu测试中使用到的指令
* Ada Tests::       Ada语言测试包
* C Tests::         C语言测试包
* libgcj Tests::    Java库测试包
* LTO Testing::     Support for testing link-time optimizations.
* gcov Testing::      对gcov测试的支持
* profopt Testing::   对profile-directed优化测试的支持
* compat Testing::    对二进制兼容性测试的支持
* Torture Tests::   对使用多个选项进行torture测试的支持
@end menu

@en @node Test Idioms
@en @section Idioms Used in Testsuite Code
@node Test Idioms
@section 测试包代码中使用的习惯用法

@en In general, C testcases have a trailing @file{-@var{n}.c}, starting
@en with @file{-1.c}, in case other testcases with similar names are added
@en later.  If the test is a test of some well-defined feature, it should
@en have a name referring to that feature such as
@en @file{@var{feature}-1.c}.  If it does not test a well-defined feature
@en but just happens to exercise a bug somewhere in the compiler, and a
@en bug report has been filed for this bug in the GCC bug database,
@en @file{pr@var{bug-number}-1.c} is the appropriate form of name.
@en Otherwise (for miscellaneous bugs not filed in the GCC bug database),
@en and previously more generally, test cases are named after the date on
@en which they were added.  This allows people to tell at a glance whether
@en a test failure is because of a recently found bug that has not yet
@en been fixed, or whether it may be a regression, but does not give any
@en other information about the bug or where discussion of it may be
@en found.  Some other language testsuites follow similar conventions.
通常，C 测试用例以@file{-@var{n}.c}结尾，并且从@file{-1.c}开始，
以便于以后增加其它具有类似名字的测试用例。
如果是测试一些明确定义的特征，则测试的名字应该指出这个特征，
例如@file{@var{feature}-1.c}。如果不是测试一个明确定义的特征，
而只是检验在编译器中存在的，并且是在GCC bug库中归档的bug，
则可以使用@file{pr@var{bug-number}-1.c}这样的名字形式。
否则（对于在GCC bug库中没有归档的各种bug），
测试用例根据它们被添加的日期来命名，这种情况在以前更加常见。
这样使人们能够一眼看出一个测试失败是由于一个新发现并且还没有被修复的bug造成的，
还是由于一个回退错误造成的，但它并没有给出关于bug的其它信息，
以及从哪里可以找到相关的讨论。一些其它语言的测试包也遵守类似的惯例。

@en In the @file{gcc.dg} testsuite, it is often necessary to test that an
@en error is indeed a hard error and not just a warning---for example,
@en where it is a constraint violation in the C standard, which must
@en become an error with @option{-pedantic-errors}.  The following idiom,
@en where the first line shown is line @var{line} of the file and the line
@en that generates the error, is used for this:
在@file{gcc.dg}测试包中，通常需要测试一个错误确实是硬件错误，
而不只是一个警告——例如，在C标准中的violatile限定，
在有@option{-pedantic-errors}的时候必须为一个错误。为此，
可以使用下面的习惯用法，其中第一行为产生错误的文件的行@var{line}。

@smallexample
/* @{ dg-bogus "warning" "warning in place of error" @} */
/* @{ dg-error "@var{regexp}" "@var{message}" @{ target *-*-* @} @var{line} @} */
@end smallexample

@en It may be necessary to check that an expression is an integer constant
@en expression and has a certain value.  To check that @code{@var{E}} has
@en value @code{@var{V}}, an idiom similar to the following is used:
可能需要检查一个表达式为整数常量表达式，并且具有一个特定的值。
要检查@code{@var{E}}具有值@code{@var{V}}，可以使用类似下面的习惯用法：

@smallexample
char x[((E) == (V) ? 1 : -1)];
@end smallexample

@en In @file{gcc.dg} tests, @code{__typeof__} is sometimes used to make
@en assertions about the types of expressions.  See, for example,
@en @file{gcc.dg/c99-condexpr-1.c}.  The more subtle uses depend on the
@en exact rules for the types of conditional expressions in the C
@en standard; see, for example, @file{gcc.dg/c99-intconst-1.c}.
在@file{gcc.dg}测试中，@code{__typeof__}有时被用于表达式类型的断言。
例如，可以参见@file{gcc.dg/c99-condexpr-1.c}。
更加巧妙的用法依靠了C标准中条件表达式类型的确切规则；
例如，可以参见@file{gcc.dg/c99-intconst-1.c}。

@en It is useful to be able to test that optimizations are being made
@en properly.  This cannot be done in all cases, but it can be done where
@en the optimization will lead to code being optimized away (for example,
@en where flow analysis or alias analysis should show that certain code
@en cannot be called) or to functions not being called because they have
@en been expanded as built-in functions.  Such tests go in
@en @file{gcc.c-torture/execute}.  Where code should be optimized away, a
@en call to a nonexistent function such as @code{link_failure ()} may be
@en inserted; a definition
如果能够测试优化被做的很适当会很有帮助。这并不能在所有情况下都能做到，
但对于可以使得代码被优化掉的情况
（例如，流分析或别名分析应该显示那样的代码不会被调用），
或者函数将不被调用，因为它们已经被扩展为内建的函数时，是可以做到的。
这样的测试在@file{gcc.c-torture/execute}中。
在将要被优化掉的代码的地方，可以插入一个像@code{link_failure ()}
这样的对一个不存在的函数的调用；并且还需要如下定义，

@smallexample
#ifndef __OPTIMIZE__
void
link_failure (void)
@{
  abort ();
@}
#endif
@end smallexample

@noindent
@en will also be needed so that linking still succeeds when the test is
@en run without optimization.  When all calls to a built-in function
@en should have been optimized and no calls to the non-built-in version of
@en the function should remain, that function may be defined as
@en @code{static} to call @code{abort ()} (although redeclaring a function
@en as static may not work on all targets).
从而使得当测试在没有优化而运行时，连接依然成功。
当对一个内建函数的所有调用都已经被优化，并且不会剩下对函数的非内建版本的调用时，
那个函数可以定义为@code{static}，并且调用@code{abort ()}
（虽然将函数声明为静态的可能不会在所有的目标上工作）。

@en All testcases must be portable.  Target-specific testcases must have
@en appropriate code to avoid causing failures on unsupported systems;
@en unfortunately, the mechanisms for this differ by directory.
所有测试用例都必须是可移植的。
目标特定的测试用例必须具有适当的代码来避免在不支持的系统上引起失败；
不幸的是，这种机制随目录有所不同。

@en FIXME: discuss non-C testsuites here.
FIXME: 讨论一下非C的测试包。

@en @node Test Directives
@en @section Directives used within DejaGnu tests
@node Test Directives
@section DejaGnu测试中使用的指令

@menu
* Directives::  Syntax and descriptions of test directives.
* Selectors:: Selecting targets to which a test applies.
* Effective-Target Keywords:: Keywords describing target attributes.
* Add Options:: Features for @code{dg-add-options}
* Require Support:: Variants of @code{dg-require-@var{support}}
* Final Actions:: Commands for use in @code{dg-final}
@end menu


@node Directives
@subsection Syntax and Descriptions of test directives

Test directives appear within comments in a test source file and begin
with @code{dg-}.  Some of these are defined within DejaGnu and others
are local to the GCC testsuite.
测试指令出现在测试源文件的注释中，并且起始于@code{dg-}。
其中一些是在DejaGnu中定义的，其它的是局限于GCC测试包自己的。

The order in which test directives appear in a test can be important:
directives local to GCC sometimes override information used by the
DejaGnu directives, which know nothing about the GCC directives, so the
DejaGnu directives must precede GCC directives.
测试中测试指令出现的顺序很重要：
局限于GCC的指令有时会覆盖DejaGnu的指令使用的信息，
并且其对GCC指令一无所知，所以DejaGnu指令必须在GCC指令之前。

Several test directives include selectors (@pxref{Selectors, , })
which are usually preceded by the keyword @code{target} or @code{xfail}.
个别测试指令包含了选择器，
其通常由关键字@code{target}或@code{xfail}打头。
一个选择器为：一个或多个目标三元组，可能包含通配符；
单个的有效目标关键字；或者一个逻辑表达式。
取决于上下文，选择器指定了是否测试被跳过并报告为不支持，
或者预期为失败。使用@samp{*-*-*}来匹配任何目标。
有效目标关键字在GCC测试包的@file{target-supports.exp}中定义。

选择器表达式出现在大括号中，
并且使用单个的逻辑操作符：@samp{!},@samp{&&}, 或@samp{||}。
操作数为另一个选择器表达式，一个有效目标关键字，
单个的目标三元组，或者一个双引号或大括号包裹的目标三元组列表。
例如：

@subsubsection Specify how to build the test

@table @code
@item @{ dg-do @var{do-what-keyword} [@{ target/xfail @var{selector} @}] @}
@en @var{do-what-keyword} specifies how the test is compiled and whether
@en it is executed.  It is one of:
@var{do-what-keyword}指定了测试如何被编译，以及是否被执行。其为：

@en @table @code
@en @item preprocess
@en Compile with @option{-E} to run only the preprocessor.
@en @item compile
@en Compile with @option{-S} to produce an assembly code file.
@en @item assemble
@en Compile with @option{-c} to produce a relocatable object file.
@en @item link
@en Compile, assemble, and link to produce an executable file.
@en @item run
@en Produce and run an executable file, which is expected to return
@en an exit code of 0.
@en @end table
@table @code
@item preprocess
使用@option{-E}编译，从而只运行预处理器。 
@item compile
使用@option{-S}编译，从而生成汇编代码文件。
@item assemble
使用@option{-c}编译，从而生成可重定位的目标文件。
@item link
编译，汇编，并连接，从而生成一个可执行文件。
@item run
生成并运行一个可执行文件，并期望其返回的退出代码为0。
@end table

@en The default is @code{compile}.  That can be overridden for a set of
@en tests by redefining @code{dg-do-what-default} within the @code{.exp}
@en file for those tests.
缺省情况为@code{compile}。
可以通过在那些测试的@code{.exp}文件中重定义
@code{dg-do-what-default}来覆盖这个值。

@en If the directive includes the optional @samp{@{ target @var{selector} @}}
@en then the test is skipped unless the target system matches the
@en @var{selector}.
如果指令包含了可选的@samp{@{ target @var{selector} @} }，
则除非目标系统被包含在目标三元组列表中，或者匹配有效目标关键字，
否则测试将被跳过。
 
@en If @var{do-what-keyword} is @code{run} and the directive includes
@en the optional @samp{@{ xfail @var{selector} @}} and the selector is met
@en then the test is expected to fail.  The @code{xfail} clause is ignored
@en for other values of @var{do-what-keyword}; those tests can use
@en directive @code{dg-xfail-if}.
如果运行了@samp{do-what-keyword}并且指令包含了可选的
@samp{@{ xfail @var{selector} @}}并且选择器匹配，则测试期望为失败。
对于@samp{do-what-keyword}的其它值，@code{xfail}子句会被忽略；
那些测试可以使用指令@code{dg-xfail-if}。
@end table

@subsubsection Specify additional compiler options

@table @code
@item @{ dg-options @var{options} [@{ target @var{selector} @}] @}
@en This DejaGnu directive provides a list of compiler options, to be used
@en if the target system matches @var{selector}, that replace the default
@en options used for this set of tests.
该DejaGnu指令提供了一个编译器选项列表，
用来在目标系统匹配@var{selector}的时候被使用，
以替换这个测试集的缺省选项。

@item @{ dg-add-options @var{feature} @dots{} @}
@en Add any compiler options that are needed to access certain features.
@en This directive does nothing on targets that enable the features by
@en default, or that don't provide them at all.  It must come after
@en all @code{dg-options} directives.
@en For supported values of @var{feature} see @ref{Add Options, ,}.
增加任何访问特定特征所需要的编译器选项。
该指令对使用缺省方式启用特征或者根本不提供特征的目标不做任何事情。
其必须在所有@code{dg-options}指令之后。

支持的@var{feature}为：
@item @{ dg-additional-options @var{options} [@{ target @var{selector} @}] @}
This directive provides a list of compiler options, to be used
if the target system matches @var{selector}, that are added to the default
options used for this set of tests.
@end table

@subsubsection Modify the test timeout value

@en The normal timeout limit, in seconds, is found by searching the
@en following in order:
通常的时间限制，以秒为单位，按照下列顺序来查找：

@en @itemize @bullet
@en @item the value defined by an earlier @code{dg-timeout} directive in
@en the test
@en 
@en @item variable @var{tool_timeout} defined by the set of tests
@en 
@en @item @var{gcc},@var{timeout} set in the target board
@en 
@en @item 300
@en @end itemize
@itemize @bullet
@item 由之前在测试程序中@code{dg-timeout}指令定义

@item 由测试程序集定义的变量@var{tool_timeout}

@item 在目标板子上（target board）设置的@var{gcc},@var{timeout} 

@item 300
@end itemize

@table @code
@item @{ dg-timeout @var{n} [@{target @var{selector} @}] @}
Set the time limit for the compilation and for the execution of the test
to the specified number of seconds.

@item @{ dg-timeout-factor @var{x} [@{ target @var{selector} @}] @}
Multiply the normal time limit for compilation and execution of the test
by the specified floating-point factor.
@end table

@subsubsection Skip a test for some targets

@table @code
@item @{ dg-skip-if @var{comment} @{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]] @}
Arguments @var{include-opts} and @var{exclude-opts} are lists in which
each element is a string of zero or more GCC options.
Skip the test if all of the following conditions are met:
@itemize @bullet
@item the test system is included in @var{selector}

@item for at least one of the option strings in @var{include-opts},
every option from that string is in the set of options with which
the test would be compiled; use @samp{"*"} for an @var{include-opts} list
that matches any options; that is the default if @var{include-opts} is
not specified

@item for each of the option strings in @var{exclude-opts}, at least one
option from that string is not in the set of options with which the test
would be compiled; use @samp{""} for an empty @var{exclude-opts} list;
that is the default if @var{exclude-opts} is not specified
@end itemize

For example, to skip a test if option @code{-Os} is present:

@smallexample
/* @{ dg-skip-if "" @{ *-*-* @}  @{ "-Os" @} @{ "" @} @} */
@end smallexample

To skip a test if both options @code{-O2} and @code{-g} are present:

@smallexample
/* @{ dg-skip-if "" @{ *-*-* @}  @{ "-O2 -g" @} @{ "" @} @} */
@end smallexample

To skip a test if either @code{-O2} or @code{-O3} is present:

@smallexample
/* @{ dg-skip-if "" @{ *-*-* @}  @{ "-O2" "-O3" @} @{ "" @} @} */
@end smallexample

To skip a test unless option @code{-Os} is present:

@smallexample
/* @{ dg-skip-if "" @{ *-*-* @}  @{ "*" @} @{ "-Os" @} @} */
@end smallexample

To skip a test if either @code{-O2} or @code{-O3} is used with @code{-g}
but not if @code{-fpic} is also present:

@smallexample
/* @{ dg-skip-if "" @{ *-*-* @}  @{ "-O2 -g" "-O3 -g" @} @{ "-fpic" @} @} */
@end smallexample

@item @{ dg-require-effective-target @var{keyword} [@{ @var{selector} @}] @}
Skip the test if the test target, including current multilib flags,
is not covered by the effective-target keyword.
If the directive includes the optional @samp{@{ @var{selector} @}}
then the effective-target test is only performed if the target system
matches the @var{selector}.
This directive must appear after any @code{dg-do} directive in the test
and before any @code{dg-additional-sources} directive.
@xref{Effective-Target Keywords, , }.

@item @{ dg-require-@var{support} args @}
Skip the test if the target does not provide the required support.
These directives must appear after any @code{dg-do} directive in the test
and before any @code{dg-additional-sources} directive.
They require at least one argument, which can be an empty string if the
specific procedure does not examine the argument.
@xref{Require Support, , }, for a complete list of these directives.
@end table

@subsubsection Expect a test to fail for some targets

@table @code
@item  @{ dg-xfail-if @var{comment} @{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]] @}
Expect the test to fail if the conditions (which are the same as for
@code{dg-skip-if}) are met.  This does not affect the execute step.

@item  @{ dg-xfail-run-if @var{comment} @{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]] @}
Expect the execute step of a test to fail if the conditions (which are
the same as for @code{dg-skip-if}) are met.
@end table

@subsubsection Expect the test executable to fail

@table @code
@item  @{ dg-shouldfail @var{comment} [@{ @var{selector} @} [@{ @var{include-opts} @} [@{ @var{exclude-opts} @}]]] @}
Expect the test executable to return a nonzero exit status if the
conditions (which are the same as for @code{dg-skip-if}) are met.
@end table

@subsubsection Verify compiler messages

@table @code
@item @{ dg-error @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}
This DejaGnu directive appears on a source line that is expected to get
an error message, or else specifies the source line associated with the
message.  If there is no message for that line or if the text of that
message is not matched by @var{regexp} then the check fails and
@var{comment} is included in the @code{FAIL} message.  The check does
not look for the string @samp{error} unless it is part of @var{regexp}.

@item @{ dg-warning @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}
This DejaGnu directive appears on a source line that is expected to get
a warning message, or else specifies the source line associated with the
message.  If there is no message for that line or if the text of that
message is not matched by @var{regexp} then the check fails and
@var{comment} is included in the @code{FAIL} message.  The check does
not look for the string @samp{warning} unless it is part of @var{regexp}.

@item @{ dg-message @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}
The line is expected to get a message other than an error or warning.
If there is no message for that line or if the text of that message is
not matched by @var{regexp} then the check fails and @var{comment} is
included in the @code{FAIL} message.

@item @{ dg-bogus @var{regexp} [@var{comment} [@{ target/xfail @var{selector} @} [@var{line}] @}]] @}
This DejaGnu directive appears on a source line that should not get a
message matching @var{regexp}, or else specifies the source line
associated with the bogus message.  It is usually used with @samp{xfail}
to indicate that the message is a known problem for a particular set of
targets.

@item @{ dg-excess-errors @var{comment} [@{ target/xfail @var{selector} @}] @}
This DejaGnu directive indicates that the test is expected to fail due
to compiler messages that are not handled by @samp{dg-error},
@samp{dg-warning} or @samp{dg-bogus}.  For this directive @samp{xfail}
has the same effect as @samp{target}.

@item @{ dg-prune-output @var{regexp} @}
Prune messages matching @var{regexp} from the test output.
@end table

@subsubsection Verify output of the test executable

@table @code
@item @{ dg-output @var{regexp} [@{ target/xfail @var{selector} @}] @}
This DejaGnu directive compares @var{regexp} to the combined output
that the test executable writes to @file{stdout} and @file{stderr}.
@end table

@subsubsection Specify additional files for a test

@table @code
@item @{ dg-additional-files "@var{filelist}" @}
Specify additional files, other than source files, that must be copied
to the system where the compiler runs.

@item @{ dg-additional-sources "@var{filelist}" @}
Specify additional source files to appear in the compile line
following the main test file.
@end table

@subsubsection Add checks at the end of a test

@table @code
@item @{ dg-final @{ @var{local-directive} @} @}
This DejaGnu directive is placed within a comment anywhere in the
source file and is processed after the test has been compiled and run.
Multiple @samp{dg-final} commands are processed in the order in which
they appear in the source file.  @xref{Final Actions, , }, for a list
of directives that can be used within @code{dg-final}.
@end table

@node Selectors
@subsection Selecting targets to which a test applies

Several test directives include @var{selector}s to limit the targets
for which a test is run or to declare that a test is expected to fail
on particular targets.

A selector is:
@itemize @bullet
@item one or more target triplets, possibly including wildcard characters
@item a single effective-target keyword (@pxref{Effective-Target Keywords})
@item a logical expression
@end itemize

Depending on the
context, the selector specifies whether a test is skipped and reported
as unsupported or is expected to fail.  Use @samp{*-*-*} to match any
target.

A selector expression appears within curly braces and uses a single
logical operator: one of @samp{!}, @samp{&&}, or @samp{||}.  An
operand is another selector expression, an effective-target keyword,
a single target triplet, or a list of target triplets within quotes or
curly braces.  For example:

@smallexample
@{ target @{ ! "hppa*-*-* ia64*-*-*" @} @}
@{ target @{ powerpc*-*-* && lp64 @} @}
@{ xfail @{ lp64 || vect_no_align @} @}
@end smallexample

@node Effective-Target Keywords
@subsection Keywords describing target attributes

Effective-target keywords identify sets of targets that support
particular functionality.  They are used to limit tests to be run only
for particular targets, or to specify that particular sets of targets
are expected to fail some tests.

Effective-target keywords are defined in @file{lib/target-supports.exp} in
the GCC testsuite, with the exception of those that are documented as
being local to a particular test directory.

The @samp{effective target} takes into account all of the compiler options
with which the test will be compiled, including the multilib options.
By convention, keywords ending in @code{_nocache} can also include options
specified for the particular test in an earlier @code{dg-options} or
@code{dg-add-options} directive.

@subsubsection Data type sizes

@table @code
@item ilp32
Target has 32-bit @code{int}, @code{long}, and pointers.

@item lp64
Target has 32-bit @code{int}, 64-bit @code{long} and pointers.

@item llp64
Target has 32-bit @code{int} and @code{long}, 64-bit @code{long long}
and pointers.

@item double64
Target has 64-bit @code{double}.

@item double64plus
Target has @code{double} that is 64 bits or longer.

@item int32plus
Target has @code{int} that is at 32 bits or longer.

@item int16
Target has @code{int} that is 16 bits or shorter.

@item large_double
Target supports @code{double} that is longer than @code{float}.

@item large_long_double
Target supports @code{long double} that is longer than @code{double}.

@item ptr32plus
Target has pointers that are 32 bits or longer.

@item size32plus
Target supports array and structure sizes that are 32 bits or longer.

@item 4byte_wchar_t
Target has @code{wchar_t} that is at least 4 bytes.
@end table

@subsubsection Fortran-specific attributes

@table @code
@item fortran_integer_16
Target supports Fortran @code{integer} that is 16 bytes or longer.

@item fortran_large_int
Target supports Fortran @code{integer} kinds larger than @code{integer(8)}.

@item fortran_large_real
Target supports Fortran @code{real} kinds larger than @code{real(8)}.
@end table

@subsubsection Vector-specific attributes

@table @code
@item vect_condition
Target supports vector conditional operations.

@item vect_double
Target supports hardware vectors of @code{double}.

@item vect_float
Target supports hardware vectors of @code{float}.

@item vect_int
Target supports hardware vectors of @code{int}.

@item vect_long
Target supports hardware vectors of @code{long}.

@item vect_long_long
Target supports hardware vectors of @code{long long}.

@item vect_aligned_arrays
Target aligns arrays to vector alignment boundary.

@item vect_hw_misalign
Target supports a vector misalign access.

@item vect_no_align
Target does not support a vector alignment mechanism.

@item vect_no_int_max
Target does not support a vector max instruction on @code{int}.

@item vect_no_int_add
Target does not support a vector add instruction on @code{int}.

@item vect_no_bitwise
Target does not support vector bitwise instructions.

@item vect_char_mult
Target supports @code{vector char} multiplication.

@item vect_short_mult
Target supports @code{vector short} multiplication.

@item vect_int_mult
Target supports @code{vector int} multiplication.

@item vect_extract_even_odd
Target supports vector even/odd element extraction.

@item vect_extract_even_odd_wide
Target supports vector even/odd element extraction of vectors with elements
@code{SImode} or larger.

@item vect_interleave
Target supports vector interleaving.

@item vect_strided
Target supports vector interleaving and extract even/odd.

@item vect_strided_wide
Target supports vector interleaving and extract even/odd for wide
element types.

@item vect_perm
Target supports vector permutation.

@item vect_shift
Target supports a hardware vector shift operation.

@item vect_widen_sum_hi_to_si
Target supports a vector widening summation of @code{short} operands
into @code{int} results, or can promote (unpack) from @code{short}
to @code{int}.

@item vect_widen_sum_qi_to_hi
Target supports a vector widening summation of @code{char} operands
into @code{short} results, or can promote (unpack) from @code{char}
to @code{short}.

@item vect_widen_sum_qi_to_si
Target supports a vector widening summation of @code{char} operands
into @code{int} results.

@item vect_widen_mult_qi_to_hi
Target supports a vector widening multiplication of @code{char} operands
into @code{short} results, or can promote (unpack) from @code{char} to
@code{short} and perform non-widening multiplication of @code{short}.

@item vect_widen_mult_hi_to_si
Target supports a vector widening multiplication of @code{short} operands
into @code{int} results, or can promote (unpack) from @code{short} to
@code{int} and perform non-widening multiplication of @code{int}.

@item vect_sdot_qi
Target supports a vector dot-product of @code{signed char}.

@item vect_udot_qi
Target supports a vector dot-product of @code{unsigned char}.

@item vect_sdot_hi
Target supports a vector dot-product of @code{signed short}.

@item vect_udot_hi
Target supports a vector dot-product of @code{unsigned short}.

@item vect_pack_trunc
Target supports a vector demotion (packing) of @code{short} to @code{char}
and from @code{int} to @code{short} using modulo arithmetic.

@item vect_unpack
Target supports a vector promotion (unpacking) of @code{char} to @code{short}
and from @code{char} to @code{int}.

@item vect_intfloat_cvt
Target supports conversion from @code{signed int} to @code{float}.

@item vect_uintfloat_cvt
Target supports conversion from @code{unsigned int} to @code{float}.

@item vect_floatint_cvt
Target supports conversion from @code{float} to @code{signed int}.

@item vect_floatuint_cvt
Target supports conversion from @code{float} to @code{unsigned int}.
@end table

@subsubsection Thread Local Storage attributes

@table @code
@item tls
Target supports thread-local storage.

@item tls_native
Target supports native (rather than emulated) thread-local storage.

@item tls_runtime
Test system supports executing TLS executables.
@end table

@subsubsection Decimal floating point attributes

@table @code
@item dfp
Targets supports compiling decimal floating point extension to C.

@item dfp_nocache
Including the options used to compile this particular test, the
target supports compiling decimal floating point extension to C.

@item dfprt
Test system can execute decimal floating point tests.

@item dfprt_nocache
Including the options used to compile this particular test, the
test system can execute decimal floating point tests.

@item hard_dfp
Target generates decimal floating point instructions with current options.
@end table

@subsubsection ARM-specific attributes

@table @code
@item arm32
ARM target generates 32-bit code.

@item arm_eabi
ARM target adheres to the ABI for the ARM Architecture.

@item arm_hard_vfp_ok
ARM target supports @code{-mfpu=vfp -mfloat-abi=hard}.
Some multilibs may be incompatible with these options.

@item arm_iwmmxt_ok
ARM target supports @code{-mcpu=iwmmxt}.
Some multilibs may be incompatible with this option.

@item arm_neon
ARM target supports generating NEON instructions.

@item arm_neon_hw
Test system supports executing NEON instructions.

@item arm_neon_ok
@anchor{arm_neon_ok}
ARM Target supports @code{-mfpu=neon -mfloat-abi=softfp} or compatible
options.  Some multilibs may be incompatible with these options.

@item arm_neon_fp16_ok
@anchor{arm_neon_fp16_ok}
ARM Target supports @code{-mfpu=neon-fp16 -mfloat-abi=softfp} or compatible
options.  Some multilibs may be incompatible with these options.

@item arm_thumb1_ok
ARM target generates Thumb-1 code for @code{-mthumb}.

@item arm_thumb2_ok
ARM target generates Thumb-2 code for @code{-mthumb}.

@item arm_vfp_ok
ARM target supports @code{-mfpu=vfp -mfloat-abi=softfp}.
Some multilibs may be incompatible with these options.
@end table

@subsubsection MIPS-specific attributes

@table @code
@item mips64
MIPS target supports 64-bit instructions.

@item nomips16
MIPS target does not produce MIPS16 code.

@item mips16_attribute
MIPS target can generate MIPS16 code.

@item mips_loongson
MIPS target is a Loongson-2E or -2F target using an ABI that supports
the Loongson vector modes.

@item mips_newabi_large_long_double
MIPS target supports @code{long double} larger than @code{double}
when using the new ABI.

@item mpaired_single
MIPS target supports @code{-mpaired-single}.
@end table

@subsubsection PowerPC-specific attributes

@table @code
@item powerpc64
Test system supports executing 64-bit instructions.

@item powerpc_altivec
PowerPC target supports AltiVec.

@item powerpc_altivec_ok
PowerPC target supports @code{-maltivec}.

@item powerpc_fprs
PowerPC target supports floating-point registers.

@item powerpc_hard_double
PowerPC target supports hardware double-precision floating-point.

@item powerpc_ppu_ok
PowerPC target supports @code{-mcpu=cell}.

@item powerpc_spe
PowerPC target supports PowerPC SPE.

@item powerpc_spe_nocache
Including the options used to compile this particular test, the
PowerPC target supports PowerPC SPE.

@item powerpc_spu
PowerPC target supports PowerPC SPU.

@item spu_auto_overlay
SPU target has toolchain that supports automatic overlay generation.

@item powerpc_vsx_ok
PowerPC target supports @code{-mvsx}.

@item powerpc_405_nocache
Including the options used to compile this particular test, the
PowerPC target supports PowerPC 405.

@item vmx_hw
PowerPC target supports executing AltiVec instructions.
@end table

@subsubsection Other hardware attributes

@table @code
@item avx
Target supports compiling @code{avx} instructions.

@item avx_runtime
Target supports the execution of @code{avx} instructions.

@item cell_hw
Test system can execute AltiVec and Cell PPU instructions.

@item coldfire_fpu
Target uses a ColdFire FPU.

@item hard_float
Target supports FPU instructions.

@item sse
Target supports compiling @code{sse} instructions.

@item sse_runtime
Target supports the execution of @code{sse} instructions.

@item sse2
Target supports compiling @code{sse2} instructions.

@item sse2_runtime
Target supports the execution of @code{sse2} instructions.

@item sync_char_short
Target supports atomic operations on @code{char} and @code{short}.

@item sync_int_long
Target supports atomic operations on @code{int} and @code{long}.

@item ultrasparc_hw
Test environment appears to run executables on a simulator that
accepts only @code{EM_SPARC} executables and chokes on @code{EM_SPARC32PLUS}
or @code{EM_SPARCV9} executables.

@item vect_cmdline_needed
Target requires a command line argument to enable a SIMD instruction set.
@end table

@subsubsection Environment attributes

@table @code
@item c
The language for the compiler under test is C.

@item c++
The language for the compiler under test is C++.

@item c99_runtime
Target provides a full C99 runtime.

@item correct_iso_cpp_string_wchar_protos
Target @code{string.h} and @code{wchar.h} headers provide C++ required
overloads for @code{strchr} etc. functions.

@item dummy_wcsftime
Target uses a dummy @code{wcsftime} function that always returns zero.

@item fd_truncate
Target can truncate a file from a file descriptor, as used by
@file{libgfortran/io/unix.c:fd_truncate}; i.e. @code{ftruncate} or
@code{chsize}.

@item freestanding
Target is @samp{freestanding} as defined in section 4 of the C99 standard.
Effectively, it is a target which supports no extra headers or libraries
other than what is considered essential.

@item init_priority
Target supports constructors with initialization priority arguments.

@item inttypes_types
Target has the basic signed and unsigned types in @code{inttypes.h}.
This is for tests that GCC's notions of these types agree with those
in the header, as some systems have only @code{inttypes.h}.

@item lax_strtofp
Target might have errors of a few ULP in string to floating-point
conversion functions and overflow is not always detected correctly by
those functions.

@item mmap
Target supports @code{mmap}.

@item newlib
Target supports Newlib.

@item pow10
Target provides @code{pow10} function.

@item pthread
Target can compile using @code{pthread.h} with no errors or warnings.

@item pthread_h
Target has @code{pthread.h}.

@item run_expensive_tests
Expensive testcases (usually those that consume excessive amounts of CPU
time) should be run on this target.  This can be enabled by setting the
@env{GCC_TEST_RUN_EXPENSIVE} environment variable to a non-empty string.

@item simulator
Test system runs executables on a simulator (i.e. slowly) rather than
hardware (i.e. fast).

@item stdint_types
Target has the basic signed and unsigned C types in @code{stdint.h}.
This will be obsolete when GCC ensures a working @code{stdint.h} for
all targets.

@item trampolines
Target supports trampolines.

@item uclibc
Target supports uClibc.

@item unwrapped
Target does not use a status wrapper.

@item vxworks_kernel
Target is a VxWorks kernel.

@item vxworks_rtp
Target is a VxWorks RTP.

@item wchar
Target supports wide characters.
@end table

@subsubsection Other attributes

@table @code
@item automatic_stack_alignment
Target supports automatic stack alignment.

@item cxa_atexit
Target uses @code{__cxa_atexit}.

@item default_packed
Target has packed layout of structure members by default.

@item fgraphite
Target supports Graphite optimizations.

@item fixed_point
Target supports fixed-point extension to C.

@item fopenmp
Target supports OpenMP via @option{-fopenmp}.

@item fpic
Target supports @option{-fpic} and @option{-fPIC}.

@item freorder
Target supports @option{-freorder-blocks-and-partition}.

@item fstack_protector
Target supports @option{-fstack-protector}.

@item gas
Target uses GNU @command{as}.

@item gc_sections
Target supports @option{--gc-sections}.

@item gld
Target uses GNU @command{ld}.

@item keeps_null_pointer_checks
Target keeps null pointer checks, either due to the use of
@option{-fno-delete-null-pointer-checks} or hardwired into the target.

@item lto
Compiler has been configured to support link-time optimization (LTO).

@item named_sections
Target supports named sections.

@item natural_alignment_32
Target uses natural alignment (aligned to type size) for types of
32 bits or less.

@item target_natural_alignment_64
Target uses natural alignment (aligned to type size) for types of
64 bits or less.

@item nonpic
Target does not generate PIC by default.

@item pcc_bitfield_type_matters
Target defines @code{PCC_BITFIELD_TYPE_MATTERS}.

@item pe_aligned_commons
Target supports @option{-mpe-aligned-commons}.

@item pie
Target supports @option{-pie}, @option{-fpie} and @option{-fPIE}.

@item section_anchors
Target supports section anchors.

@item short_enums
Target defaults to short enums.

@item static
Target supports @option{-static}.

@item static_libgfortran
Target supports statically linking @samp{libgfortran}.

@item string_merging
Target supports merging string constants at link time.

@item ucn
Target supports compiling and assembling UCN.

@item ucn_nocache
Including the options used to compile this particular test, the
target supports compiling and assembling UCN.

@item unaligned_stack
Target does not guarantee that its @code{STACK_BOUNDARY} is greater than
or equal to the required vector alignment.

@item vector_alignment_reachable
Vector alignment is reachable for types of 32 bits or less.

@item vector_alignment_reachable_for_64bit
Vector alignment is reachable for types of 64 bits or less.

@item wchar_t_char16_t_compatible
Target supports @code{wchar_t} that is compatible with @code{char16_t}.

@item wchar_t_char32_t_compatible
Target supports @code{wchar_t} that is compatible with @code{char32_t}.
@end table

@subsubsection Local to tests in @code{gcc.target/i386}

@table @code
@item 3dnow
Target supports compiling @code{3dnow} instructions.

@item aes
Target supports compiling @code{aes} instructions.

@item fma4
Target supports compiling @code{fma4} instructions.

@item ms_hook_prologue
Target supports attribute @code{ms_hook_prologue}.

@item pclmul
Target supports compiling @code{pclmul} instructions.

@item sse3
Target supports compiling @code{sse3} instructions.

@item sse4
Target supports compiling @code{sse4} instructions.

@item sse4a
Target supports compiling @code{sse4a} instructions.

@item ssse3
Target supports compiling @code{ssse3} instructions.

@item vaes
Target supports compiling @code{vaes} instructions.

@item vpclmul
Target supports compiling @code{vpclmul} instructions.

@item xop
Target supports compiling @code{xop} instructions.
@end table

@subsubsection Local to tests in @code{gcc.target/spu/ea}

@table @code
@item ealib
Target @code{__ea} library functions are available.
@end table

@subsubsection Local to tests in @code{gcc.test-framework}

@table @code
@item no
Always returns 0.

@item yes
Always returns 1.
@end table

@node Add Options
@subsection Features for @code{dg-add-options}

The supported values of @var{feature} for directive @code{dg-add-options}
are:

@table @code
@item arm_neon
NEON support.  Only ARM targets support this feature, and only then
in certain modes; see the @ref{arm_neon_ok,,arm_neon_ok effective target
keyword}.

@item arm_neon_fp16
NEON and half-precision floating point support.  Only ARM targets
support this feature, and only then in certain modes; see
the @ref{arm_neon_ok,,arm_neon_fp16_ok effective target keyword}.

@item bind_pic_locally
Add the target-specific flags needed to enable functions to bind
locally when using pic/PIC passes in the testsuite.

@item c99_runtime
Add the target-specific flags needed to access the C99 runtime.

@item ieee
Add the target-specific flags needed to enable full IEEE
compliance mode.

@item mips16_attribute
@code{mips16} function attributes.
Only MIPS targets support this feature, and only then in certain modes.

@item tls
Add the target-specific flags needed to use thread-local storage.
@end table

@node Require Support
@subsection Variants of @code{dg-require-@var{support}}

A few of the @code{dg-require} directives take arguments.

@table @code
@item dg-require-iconv @var{codeset}
Skip the test if the target does not support iconv.  @var{codeset} is
the codeset to convert to.

@item dg-require-profiling @var{profopt}
Skip the test if the target does not support profiling with option
@var{profopt}.

@item dg-require-visibility @var{vis}
Skip the test if the target does not support the @code{visibility} attribute.
If @var{vis} is @code{""}, support for @code{visibility("hidden")} is
checked, for @code{visibility("@var{vis}")} otherwise.
@end table

The original @code{dg-require} directives were defined before there
was support for effective-target keywords.  The directives that do not
take arguments could be replaced with effective-target keywords.

@table @code
@item dg-require-alias ""
Skip the test if the target does not support the @samp{alias} attribute.

@item dg-require-ascii-locale ""
Skip the test if the host does not support an ASCII locale.

@item dg-require-compat-dfp ""
Skip this test unless both compilers in a @file{compat} testsuite
support decimal floating point.

@item dg-require-cxa-atexit ""
Skip the test if the target does not support @code{__cxa_atexit}.
This is equivalent to @code{dg-require-effective-target cxa_atexit}.

@item dg-require-dll ""
Skip the test if the target does not support DLL attributes.

@item dg-require-fork ""
Skip the test if the target does not support @code{fork}.

@item dg-require-gc-sections ""
Skip the test if the target's linker does not support the
@code{--gc-sections} flags.
This is equivalent to @code{dg-require-effective-target gc-sections}.

@item dg-require-host-local ""
Skip the test if the host is remote, rather than the same as the build
system.  Some tests are incompatible with DejaGnu's handling of remote
hosts, which involves copying the source file to the host and compiling
it with a relative path and "@code{-o a.out}".

@item dg-require-mkfifo ""
Skip the test if the target does not support @code{mkfifo}.

@item dg-require-named-sections ""
Skip the test is the target does not support named sections.
This is equivalent to @code{dg-require-effective-target named_sections}.

@item dg-require-weak ""
Skip the test if the target does not support weak symbols.

@item dg-require-weak-override ""
Skip the test if the target does not support overriding weak symbols.
@end table

@node Final Actions
@subsection Commands for use in @code{dg-final}

The GCC testsuite defines the following directives to be used within
@code{dg-final}.

@subsubsection Scan a particular file

@table @code
@item scan-file @var{filename} @var{regexp} [@{ target/xfail @var{selector} @}]
Passes if @var{regexp} matches text in @var{filename}.
@item scan-file-not @var{filename} @var{regexp} [@{ target/xfail @var{selector} @}]
Passes if @var{regexp} does not match text in @var{filename}.
@item scan-module @var{module} @var{regexp} [@{ target/xfail @var{selector} @}]
Passes if @var{regexp} matches in Fortran module @var{module}.
@end table

@subsubsection Scan the assembly output

@table @code
@item scan-assembler @var{regex} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} matches text in the test's assembler output.

@item scan-assembler-not @var{regex} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} does not match text in the test's assembler output.

@item scan-assembler-times @var{regex} @var{num} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} is matched exactly @var{num} times in the test's
assembler output.

@item scan-assembler-dem @var{regex} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} matches text in the test's demangled assembler output.

@item scan-assembler-dem-not @var{regex} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} does not match text in the test's demangled assembler
output.

@item scan-hidden @var{symbol} [@{ target/xfail @var{selector} @}]
Passes if @var{symbol} is defined as a hidden symbol in the test's
assembly output.

@item scan-not-hidden @var{symbol} [@{ target/xfail @var{selector} @}]
Passes if @var{symbol} is not defined as a hidden symbol in the test's
assembly output.
@end table

@subsubsection Scan optimization dump files

These commands are available for @var{kind} of @code{tree}, @code{rtl},
and @code{ipa}.

@table @code
@item scan-@var{kind}-dump @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} matches text in the dump file with suffix @var{suffix}.

@item scan-@var{kind}-dump-not @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} does not match text in the dump file with suffix
@var{suffix}.

@item scan-@var{kind}-dump-times @var{regex} @var{num} @var{suffix} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} is found exactly @var{num} times in the dump file
with suffix @var{suffix}.

@item scan-@var{kind}-dump-dem @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} matches demangled text in the dump file with
suffix @var{suffix}.

@item scan-@var{kind}-dump-dem-not @var{regex} @var{suffix} [@{ target/xfail @var{selector} @}]
Passes if @var{regex} does not match demangled text in the dump file with
suffix @var{suffix}.
@end table

@subsubsection Verify that an output files exists or not

@table @code
@item output-exists [@{ target/xfail @var{selector} @}]
Passes if compiler output file exists.

@item output-exists-not [@{ target/xfail @var{selector} @}]
Passes if compiler output file does not exist.
@end table

@subsubsection Check for LTO tests

@table @code
@item scan-symbol @var{regexp} [@{ target/xfail @var{selector} @}]
Passes if the pattern is present in the final executable.
@end table

@subsubsection Checks for @command{gcov} tests

@table @code
@item run-gcov @var{sourcefile}
Check line counts in @command{gcov} tests.

@item run-gcov [branches] [calls] @{ @var{opts} @var{sourcefile} @}
Check branch and/or call counts, in addition to line counts, in
@command{gcov} tests.
@end table

@subsubsection Clean up generated test files

@table @code
@item cleanup-coverage-files
Removes coverage data files generated for this test.

@item cleanup-ipa-dump @var{suffix}
Removes IPA dump files generated for this test.

@item cleanup-modules
Removes Fortran module files generated for this test.

@item cleanup-profile-file
Removes profiling files generated for this test.

@item cleanup-repo-files
Removes files generated for this test for @option{-frepo}.

@item cleanup-rtl-dump @var{suffix}
Removes RTL dump files generated for this test.

@item cleanup-saved-temps
Removes files for the current test which were kept for @option{-save-temps}.

@item cleanup-tree-dump @var{suffix}
Removes tree dump files matching @var{suffix} which were generated for
this test.
@end table

@en @node Ada Tests
@en @section Ada Language Testsuites
@node Ada Tests
@section Ada语言测试包

The Ada testsuite includes executable tests from the ACATS
testsuite, publicly available at
@uref{http://www.ada-auth.org/acats.html}.
Ada测试包包括了来自ACATS测试包的可执行测试，
其在@uref{http://www.ada-auth.org/acats.html}上可公开获得。

These tests are integrated in the GCC testsuite in the
@file{ada/acats} directory, and
enabled automatically when running @code{make check}, assuming
the Ada language has been enabled when configuring GCC@.
这些测试被集成在GCC测试包中，在@file{gcc/testsuite/ada/acats}目录下，
并且如果配置GCC时设置了Ada语言，则运行@code{make check}时会自动执行。

You can also run the Ada testsuite independently, using
@code{make check-ada}, or run a subset of the tests by specifying which
chapter to run, e.g.:
你还可以单独运行Ada测试包，使用@code{make check-ada}，或测试的子集，
通过指定运行那些章节，例如

@smallexample
$ make check-ada CHAPTERS="c3 c9"
@end smallexample

@en The tests are organized by directory, each directory corresponding to
@en a chapter of the Ada Reference Manual.  So for example, @file{c9} corresponds
@en to chapter 9, which deals with tasking features of the language.
测试通过目录组织起来，每个目录对应于Ada参考手册的一个章节。
所以，例如c9对应于第9章，关于语言任务特征的。

@en There is also an extra chapter called @file{gcc} containing a template for
@en creating new executable tests, although this is deprecated in favor of
@en the @file{gnat.dg} testsuite.
还有一个额外的章节叫做@file{gcc}，包含了用来创建新的可执行测试的模版。

@en The tests are run using two @command{sh} scripts: @file{run_acats} and
@en @file{run_all.sh}.  To run the tests using a simulator or a cross
@en target, see the small
@en customization section at the top of @file{run_all.sh}.
测试使用两个@command{sh}脚本来运行：@file{run_acats}和@file{run_all.sh}。
如果要使用模拟器或者交叉目标来运行测试，
参见@file{run_all.sh}顶部的small customization部分。

@en These tests are run using the build tree: they can be run without doing
@en a @code{make install}.
这些测试使用构建树来运行：它们可以在没有执行@code{make install}的情况下被运行。

@en @node C Tests
@en @section C Language Testsuites
@node C Tests
@section C语言测试包

@en GCC contains the following C language testsuites, in the
@en @file{gcc/testsuite} directory:
GCC在@file{gcc/testsuite}目录下包含下列C语言测试包：

@table @file
@item gcc.dg
@en This contains tests of particular features of the C compiler, using the
@en more modern @samp{dg} harness.  Correctness tests for various compiler
@en features should go here if possible.
其包含了C编译器特定特征的测试，使用了较为现代的@samp{dg} harness。
如果可能的话，对各种编译器特征的正确性的测试应该放在这里。

@en Magic comments determine whether the file
@en is preprocessed, compiled, linked or run.  In these tests, error and warning
@en message texts are compared against expected texts or regular expressions
@en given in comments.  These tests are run with the options @samp{-ansi -pedantic}
@en unless other options are given in the test.  Except as noted below they
@en are not run with multiple optimization options.
魔术注释（Magic comments）决定了文件是否被预处理，编译，连接或运行。
在这些测试中，错误和警告消息文本用来跟在注释中给出的预期文本或正规表达式作比较。
这些测试使用选项@samp{-ansi -pedantic}来运行，除非给出了其它选项。
除了下面标注的以外，它们使用多个优化选项来运行。
@item gcc.dg/compat
@en This subdirectory contains tests for binary compatibility using
@en @file{lib/compat.exp}, which in turn uses the language-independent support
@en (@pxref{compat Testing, , Support for testing binary compatibility}).
该子目录包含了使用@file{compat.exp}的二进制兼容性测试，
并且是使用语言无关的支持（@pxref{compat Testing, , Support for testing binary compatibility}）。 
@item gcc.dg/cpp
@en This subdirectory contains tests of the preprocessor.
该子目录包含了预处理器的测试。 
@item gcc.dg/debug
@en This subdirectory contains tests for debug formats.  Tests in this
@en subdirectory are run for each debug format that the compiler supports.
该子目录包含了调试格式的测试。该子目录下的测试用于编译器支持的每个调试格式。 
@item gcc.dg/format
@en This subdirectory contains tests of the @option{-Wformat} format
@en checking.  Tests in this directory are run with and without
@en @option{-DWIDE}.
该子目录包含了@option{-Wformat}格式检测的测试。
该目录下的测试分别使用和不使用@option{-DWIDE}来运行。 
@item gcc.dg/noncompile
@en This subdirectory contains tests of code that should not compile and
@en does not need any special compilation options.  They are run with
@en multiple optimization options, since sometimes invalid code crashes
@en the compiler with optimization.
该子目录包含了不被编译并且不需要任何特定编译选项的测试。
它们使用多个优化选项来运行，因为有时编译器的优化会使得代码崩溃。 
@item gcc.dg/special
@en FIXME: describe this.
FIXME: 对其进行描述。

@item gcc.c-torture
This contains particular code fragments which have historically broken easily.
These tests are run with multiple optimization options, so tests for features
which only break at some optimization levels belong here.  This also contains
tests to check that certain optimizations occur.  It might be worthwhile to
separate the correctness tests cleanly from the code quality tests, but
it hasn't been done yet.

@item gcc.c-torture/compat
@en FIXME: describe this.
FIXME: 对其进行描述。

@en This directory should probably not be used for new tests.
该目录应该不会被用于新的测试。
@item gcc.c-torture/compile
@en This testsuite contains test cases that should compile, but do not
@en need to link or run.  These test cases are compiled with several
@en different combinations of optimization options.  All warnings are
@en disabled for these test cases, so this directory is not suitable if
@en you wish to test for the presence or absence of compiler warnings.
@en While special options can be set, and tests disabled on specific
@en platforms, by the use of @file{.x} files, mostly these test cases
@en should not contain platform dependencies.  FIXME: discuss how defines
@en such as @code{NO_LABEL_VALUES} and @code{STACK_SIZE} are used.
该测试包包含了应该编译，但不需要连接和运行的测试用例。
这些测试用例使用多个不同优化选项组合来编译。所有的警告都被禁止，
所以如果你想测试编译器警告是否存在，则这个目录不适合。虽然可以设置特定的选项，
并且测试不是用于特定的平台，但大多数这些测试用例不应该包含平台依赖。
FIXME：论述如何使用像@code{NO_LABEL_VALUES}和@code{STACK_SIZE}这样的定义。
@item gcc.c-torture/execute
@en This testsuite contains test cases that should compile, link and run;
@en otherwise the same comments as for @file{gcc.c-torture/compile} apply.
该测试包包含了应该被编译，连接和运行的测试用例；
否则跟@file{gcc.c-torture/compile}相同的注释将会使用。 
@item gcc.c-torture/execute/ieee
@en This contains tests which are specific to IEEE floating point.
这包含了IEEE浮点特定的测试。 
@item gcc.c-torture/unsorted
@en FIXME: describe this.
FIXME: 对其进行描述。

@en This directory should probably not be used for new tests.
该目录应该不会被用于新的测试。
@item gcc.misc-tests
@en This directory contains C tests that require special handling.  Some
@en of these tests have individual expect files, and others share
@en special-purpose expect files:
该目录包含了需要特殊处理的C测试。其中的一些测试具有单独的expect文件，
另一些则共享特殊用途的expect文件：

@en @table @file
@en @item @code{bprob*.c}
@en Test @option{-fbranch-probabilities} using
@en @file{gcc.misc-tests/bprob.exp}, which
@en in turn uses the generic, language-independent framework
@en (@pxref{profopt Testing, , Support for testing profile-directed
@en optimizations}).
@en 
@en @item @code{gcov*.c}
@en Test @command{gcov} output using @file{gcov.exp}, which in turn uses the
@en language-independent support (@pxref{gcov Testing, , Support for testing gcov}).
@en 
@en @item @code{i386-pf-*.c}
@en Test i386-specific support for data prefetch using @file{i386-prefetch.exp}.
@en @end table
@table @file
@item @code{bprob*.c}
使用@file{bprob.exp}来测试@option{-fbranch-probabilities}，并且是使用通用的，
语言无关的框架（@pxref{profopt Testing, , Support for testing profile-directed optimizations}）。 

@item @code{dg-*.c}
使用@file{dg-test.exp}来测试测试包本身。 

@item @code{gcov*.c}
使用@file{gcov.exp}来测试@command{gcov}输出，
并且是使用语言无关的支持（@pxref{gcov Testing, , Support for testing gcov}）。

@item @code{i386-pf-*.c}
使用@file{i386-prefetch.exp}来测试i386特定的对数据预提取的支持。 
@end table

@item gcc.test-framework
@table @file
@item @code{dg-*.c}
Test the testsuite itself using @file{gcc.test-framework/test-framework.exp}.
@end table

@end table

@en FIXME: merge in @file{testsuite/README.gcc} and discuss the format of
@en test cases and magic comments more.
FIXME: 合并到@file{testsuite/readme.gcc}中，
并进一步论述测试用例的格式和魔术注释。

@en @node libgcj Tests
@en @section The Java library testsuites.
@node libgcj Tests
@section Java库测试包

@en Runtime tests are executed via @samp{make check} in the
@en @file{@var{target}/libjava/testsuite} directory in the build
@en tree.  Additional runtime tests can be checked into this testsuite.
运行时测试通过在构建树的@file{@var{target}/libjava/testsuite}目录下
运行@samp{make check}来执行。额外的运行时测试可以放在这个测试包中。

@en Regression testing of the core packages in libgcj is also covered by the
@en Mauve testsuite.  The @uref{http://sourceware.org/mauve/,,Mauve Project}
@en develops tests for the Java Class Libraries.  These tests are run as part
@en of libgcj testing by placing the Mauve tree within the libjava testsuite
@en sources at @file{libjava/testsuite/libjava.mauve/mauve}, or by specifying
@en the location of that tree when invoking @samp{make}, as in
@en @samp{make MAUVEDIR=~/mauve check}.
Mauve测试包还覆盖了libgcj的核心包的回归测试。Mauve项目为Java类库开发了测试。
这些测试作为libgcj测试的一部分来运行，通过在
@uref{libjava/testsuite/libjava.mauve/mauve的libjava}测试包源中放置Mauve树，
或者当调用@samp{make}时，通过@samp{make MAUVEDIR=~/mauve check}来指定该树
的位置。

@en To detect regressions, a mechanism in @file{mauve.exp} compares the
@en failures for a test run against the list of expected failures in
@en @file{libjava/testsuite/libjava.mauve/xfails} from the source hierarchy.
@en Update this file when adding new failing tests to Mauve, or when fixing
@en bugs in libgcj that had caused Mauve test failures.
为了检测回退，@file{mauve.exp}中有一个机制用来比较一个测试的失败
与在源层次结构@file{libjava/testsuite/libjava.mauve/xfails}中的期望的失败列表。
当向Mauve中增加一个新的失败测试时，或者修改libgcj中的bug造成了Mauve测试失败时，
需要更新该文件。

@en We encourage developers to contribute test cases to Mauve.
我们鼓励开发者将测试用例贡献给Mauve。

@node LTO Testing
@section Support for testing link-time optimizations

Tests for link-time optimizations usually require multiple source files
that are compiled separately, perhaps with different sets of options.
There are several special-purpose test directives used for these tests.

@table @code
@item @{ dg-lto-do @var{do-what-keyword} @}
@var{do-what-keyword} specifies how the test is compiled and whether
it is executed.  It is one of:

@table @code
@item assemble
Compile with @option{-c} to produce a relocatable object file.
@item link
Compile, assemble, and link to produce an executable file.
@item run
Produce and run an executable file, which is expected to return
an exit code of 0.
@end table

The default is @code{assemble}.  That can be overridden for a set of
tests by redefining @code{dg-do-what-default} within the @code{.exp}
file for those tests.

Unlike @code{dg-do}, @code{dg-lto-do} does not support an optional
@samp{target} or @samp{xfail} list.  Use @code{dg-skip-if},
@code{dg-xfail-if}, or @code{dg-xfail-run-if}.

@item @{ dg-lto-options @{ @{ @var{options} @} [@{ @var{options} @}] @} [@{ target @var{selector} @}]@}
This directive provides a list of one or more sets of compiler options
to override @var{LTO_OPTIONS}.  Each test will be compiled and run with
each of these sets of options.

@item @{ dg-extra-ld-options @var{options} [@{ target @var{selector} @}]@}
This directive adds @var{options} to the linker options used.

@item @{ dg-suppress-ld-options @var{options} [@{ target @var{selector} @}]@}
This directive removes @var{options} from the set of linker options used.
@end table

@en @node gcov Testing
@en @section Support for testing @command{gcov}
@node gcov Testing
@section 对@command{gcov}测试的支持

@en Language-independent support for testing @command{gcov}, and for checking
@en that branch profiling produces expected values, is provided by the
@en expect file @file{lib/gcov.exp}.  @command{gcov} tests also rely on procedures
@en in @file{lib/gcc-dg.exp} to compile and run the test program.  A typical
@en @command{gcov} test contains the following DejaGnu commands within comments:
@en expect文件@file{gcov.exp}，
提供了对测试@command{gcov}和检查分支profile是否产生预期值的语言无关的支持。
@command{gcov}测试还依赖于@file{gcc.dg.exp}的程序，来编译和运行测试程序。
一个典型的@command{gcov}测试包含下列在注释中的DejaGnu命令：

@smallexample
@{ dg-options "-fprofile-arcs -ftest-coverage" @}
@{ dg-do run @{ target native @} @}
@{ dg-final @{ run-gcov sourcefile @} @}
@end smallexample

@en Checks of @command{gcov} output can include line counts, branch percentages,
@en and call return percentages.  All of these checks are requested via
@en commands that appear in comments in the test's source file.
@en Commands to check line counts are processed by default.
@en Commands to check branch percentages and call return percentages are
@en processed if the @command{run-gcov} command has arguments @code{branches}
@en or @code{calls}, respectively.  For example, the following specifies
@en checking both, as well as passing @option{-b} to @command{gcov}:
对@command{gcov}输出的检测可以包括行数，分支百分比和调用返回百分比。
所有这些检测都由在测试源文件中注释里出现的命令来请求。
缺省情况下处理检测行数的命令。检测分支百分比和调用返回百分比的命令，
当@command{run-gcov}命令具有相应的参数@code{branches}或@code{calls}时，
才会被处理。例如，下面指定了两者都检测，
同时还传给@command{gcov}一个@option{-b}：

@smallexample
@{ dg-final @{ run-gcov branches calls @{ -b sourcefile @} @} @}
@end smallexample

@en A line count command appears within a comment on the source line
@en that is expected to get the specified count and has the form
@en @code{count(@var{cnt})}.  A test should only check line counts for
@en lines that will get the same count for any architecture.
行数命令出现在注释中，其源行期望能获得指定的数，
并具有形式@code{count(@var{cnt})}。
测试应该只检测对于任意体系结构都会得到同一数值的行数。

@en Commands to check branch percentages (@code{branch}) and call
@en return percentages (@code{returns}) are very similar to each other.
@en A beginning command appears on or before the first of a range of
@en lines that will report the percentage, and the ending command
@en follows that range of lines.  The beginning command can include a
@en list of percentages, all of which are expected to be found within
@en the range.  A range is terminated by the next command of the same
@en kind.  A command @code{branch(end)} or @code{returns(end)} marks
@en the end of a range without starting a new one.  For example:
检测分支百分比（@code{branch}）和调用返回百分比（@code{returns}）的命令彼此很
相似。起始命令出现在将报告百分比的一个行范围的第一行或者之前，
结束命令跟在行范围之后。起始命令可以包括一个百分比列表，其为在范围内期望获得的。
范围由同种类型的下一个命令来终止。
命令@code{branch(end)}或@code{returns(end)}标记了范围的结束，
而不起是一个新的。例如：

@smallexample
if (i > 10 && j > i && j < 20)  /* @r{branch(27 50 75)} */
                                /* @r{branch(end)} */
  foo (i, j);
@end smallexample

@en For a call return percentage, the value specified is the
@en percentage of calls reported to return.  For a branch percentage,
@en the value is either the expected percentage or 100 minus that
@en value, since the direction of a branch can differ depending on the
@en target or the optimization level.
对于调用返回百分比，指定的值为调用报告返回的百分比。对于分支百分比，
值或者为期望的百分比，或者为100减去那个值，
因为分支的方向可以根据目标机或优化级别而不同。
 
@en Not all branches and calls need to be checked.  A test should not
@en check for branches that might be optimized away or replaced with
@en predicated instructions.  Don't check for calls inserted by the
@en compiler or ones that might be inlined or optimized away.
并不是所有的分支和调用都需要被检测。
测试不应检测可能被优化掉的或者被断言指令替代的分支。
不要检测编译器插入的调用或者可能被inline或优化掉的。
 
@en A single test can check for combinations of line counts, branch
@en percentages, and call return percentages.  The command to check a
@en line count must appear on the line that will report that count, but
@en commands to check branch percentages and call return percentages can
@en bracket the lines that report them.
单个测试可以检测行数，分支百分比和调用返回百分比的组合。
检测行数的命令必须出现在将会报告行数的行中，
但是检测分支百分比和调用返回百分比的命令，可以将报告的行括起来。

@en @node profopt Testing
@en @section Support for testing profile-directed optimizations
@node profopt Testing
@section 对profile-directed优化测试的支持
 
@en The file @file{profopt.exp} provides language-independent support for
@en checking correct execution of a test built with profile-directed
@en optimization.  This testing requires that a test program be built and
@en executed twice.  The first time it is compiled to generate profile
@en data, and the second time it is compiled to use the data that was
@en generated during the first execution.  The second execution is to
@en verify that the test produces the expected results.
文件@file{profopt.exp}提供了对检测，
使用profile指导的优化来构建的测试是否正确执行的支持。
该测试需要测试程序被构建和执行两次。第一次用来编译生成profile数据，
第二次用来使用第一次执行生成的数据来编译。
第二次执行用来验证测试产生了预期的结果。
 
@en To check that the optimization actually generated better code, a
@en test can be built and run a third time with normal optimizations to
@en verify that the performance is better with the profile-directed
@en optimizations.  @file{profopt.exp} has the beginnings of this kind
@en of support.
要检查优化确实生成了更好的代码，测试可以被构建并运行第三次，
使用标准的来验证性能是否比profile指导的优化更好。
@file{profopt.exp}提供了这种最初的支持。
 
@en @file{profopt.exp} provides generic support for profile-directed
@en optimizations.  Each set of tests that uses it provides information
@en about a specific optimization:
@file{profopt.exp}为profile指导的优化提供了通用的支持。
每套测试都使用了其提供的关于特定优化的信息：

@en @table @code
@en @item tool
@en tool being tested, e.g., @command{gcc}
@en 
@en @item profile_option
@en options used to generate profile data
@en 
@en @item feedback_option
@en options used to optimize using that profile data
@en 
@en @item prof_ext
@en suffix of profile data files
@en 
@en @item PROFOPT_OPTIONS
@en list of options with which to run each test, similar to the lists for
@en torture tests
@en 
@en @item @{ dg-final-generate @{ @var{local-directive} @} @}
@en This directive is similar to @code{dg-final}, but the
@en @var{local-directive} is run after the generation of profile data.
@en 
@en @item @{ dg-final-use @{ @var{local-directive} @} @}
@en The @var{local-directive} is run after the profile data have been
@en used.
@en @end table
@table @code
@item tool
被测试的工具，如gcc。 

@item profile_option
用于生成profile数据的选项。 

@item feedback_option
使用profile数据进行优化的选项。 

@item prof_ext
profile数据文件的后缀。 

@item PROFOPT_OPTIONS
运行每个测试所使用的选项列表，类似于torture测试的列表。 
@end table

@en @node compat Testing
@en @section Support for testing binary compatibility
@node compat Testing
@section 对二进制兼容性测试的支持
 
@en The file @file{compat.exp} provides language-independent support for
@en binary compatibility testing.  It supports testing interoperability of
@en two compilers that follow the same ABI, or of multiple sets of
@en compiler options that should not affect binary compatibility.  It is
@en intended to be used for testsuites that complement ABI testsuites.
文件@file{compat.exp}提供了对二进制兼容性测试的语言无关的支持。
它支持测试遵循相同ABI的两个编译器，或者编译器选项的多个集合，
在一起工作时不影响二进制兼容性。它是打算用来补充ABI测试包的。
 
@en A test supported by this framework has three parts, each in a
@en separate source file: a main program and two pieces that interact
@en with each other to split up the functionality being tested.
该框架支持的测试具有三部分，分别在不同的源文件中：主程序，
和两个相互作用来拆分要测试的功能的部分。

@en @table @file
@en @item @var{testname}_main.@var{suffix}
@en Contains the main program, which calls a function in file
@en @file{@var{testname}_x.@var{suffix}}.
@en 
@en @item @var{testname}_x.@var{suffix}
@en Contains at least one call to a function in
@en @file{@var{testname}_y.@var{suffix}}.
@en 
@en @item @var{testname}_y.@var{suffix}
@en Shares data with, or gets arguments from,
@en @file{@var{testname}_x.@var{suffix}}.
@en @end table
@table @file
@item @var{testname}_main.@var{suffix}
包含了主程序，其调用了文件@file{@var{testname}_x.@var{suffix}}中的函数。 

@item @var{testname}_x.@var{suffix}
包含了至少一个对@file{@var{testname}_y.@var{suffix}}中的函数的调用。 

@item @var{testname}_y.@var{suffix}
与@file{@var{testname}_x.@var{suffix}}共享数据，或者从中获得参数。
@end table

@en Within each test, the main program and one functional piece are
@en compiled by the GCC under test.  The other piece can be compiled by
@en an alternate compiler.  If no alternate compiler is specified,
@en then all three source files are all compiled by the GCC under test.
@en You can specify pairs of sets of compiler options.  The first element
@en of such a pair specifies options used with the GCC under test, and the
@en second element of the pair specifies options used with the alternate
@en compiler.  Each test is compiled with each pair of options.
每个测试中，主程序和一个功能部分由测试GCC编译。
另一部分可以由一个候选编译器来编译。如果没有指定候选编译器，
则所有的这三个源文件都由测试 GCC编译。你可以指定一个编译器选项对。
每一对中第一个元素指定了测试GCC使用的选项，第二个元素用于候选编译器。
每个测试都是用这些选项来编译。

@en @file{compat.exp} defines default pairs of compiler options.
@en These can be overridden by defining the environment variable
@en @env{COMPAT_OPTIONS} as:
@file{compat.exp}定义了缺省的一对编译器选项。
这些可以通过定义环境变量@env{COMPAT_OPTIONS}来取代，如：

@smallexample
COMPAT_OPTIONS="[list [list @{@var{tst1}@} @{@var{alt1}@}]
  @dots{}[list @{@var{tstn}@} @{@var{altn}@}]]"
@end smallexample

@en where @var{tsti} and @var{alti} are lists of options, with @var{tsti}
@en used by the compiler under test and @var{alti} used by the alternate
@en compiler.  For example, with
@en @code{[list [list @{-g -O0@} @{-O3@}] [list @{-fpic@} @{-fPIC -O2@}]]},
@en the test is first built with @option{-g -O0} by the compiler under
@en test and with @option{-O3} by the alternate compiler.  The test is
@en built a second time using @option{-fpic} by the compiler under test
@en and @option{-fPIC -O2} by the alternate compiler.
其中@var{tsti}和@var{alti}是选项列表，要测试的编译器使用@var{tsti}，
候选的编译器使用@var{alti}。例如，
对于@code{[list [list @{-g -O0@} @{-O3@}] [list @{-fpic@} @{-fPIC -O2@}]]}，
测试会首先被要测试的编译器使用@option{-g -O0}来编译，
并且被候选编译器使用@option{-O3}来编译。测试在第二次的时候，
测试编译器会使用@option{-fpic}，候选编译器会使用@option{-fPIC -O2}。

@en An alternate compiler is specified by defining an environment
@en variable to be the full pathname of an installed compiler; for C
@en define @env{ALT_CC_UNDER_TEST}, and for C++ define
@en @env{ALT_CXX_UNDER_TEST}.  These will be written to the
@en @file{site.exp} file used by DejaGnu.  The default is to build each
@en test with the compiler under test using the first of each pair of
@en compiler options from @env{COMPAT_OPTIONS}.  When
@en @env{ALT_CC_UNDER_TEST} or
@en @env{ALT_CXX_UNDER_TEST} is @code{same}, each test is built using
@en the compiler under test but with combinations of the options from
@en @env{COMPAT_OPTIONS}.
候选编译器通过将环境变量定义为安装的编译的全路径名来指定；对于C，
定义@env{ALT_CC_UNDER_TEST}，对于C++，定义@env{ALT_CXX_UNDER_TEST}。
这些将被写入DejaGnu使用的@file{site.exp}文件中。缺省情况，是由要测试的编译器，
使用@env{COMPAT_OPTIONS}中每个编译选项对的第一个，来构建每个测试。
当@env{ALT_CC_UNDER_TEST}或@env{ALT_CXX_UNDER_TEST}为@code{same}时，
每个测试将使用测试编译来构建，但是使用@env{COMPAT_OPTIONS}中的选项组合。
 
@en To run only the C++ compatibility suite using the compiler under test
@en and another version of GCC using specific compiler options, do the
@en following from @file{@var{objdir}/gcc}:
若要对要测试的编译器和另一版本的使用指定编译选项的GCC，
只运行C++兼容性测试包，则在@file{@var{objdir}/gcc}下执行下列命令：

@smallexample
rm site.exp
make -k \
  ALT_CXX_UNDER_TEST=$@{alt_prefix@}/bin/g++ \
  COMPAT_OPTIONS="@var{lists as shown above}" \
  check-c++ \
  RUNTESTFLAGS="compat.exp"
@end smallexample

@en A test that fails when the source files are compiled with different
@en compilers, but passes when the files are compiled with the same
@en compiler, demonstrates incompatibility of the generated code or
@en runtime support.  A test that fails for the alternate compiler but
@en passes for the compiler under test probably tests for a bug that was
@en fixed in the compiler under test but is present in the alternate
@en compiler.
如果一个测试当源文件由不同编译器编译的时候执行失败，
而当文件由同一编译器编译的时候执行成功，则表明生成代码或运行时支持不兼容。
如果一个测试对于候选编译器执行失败，但对于测试编译器却执行成功，
则可能是因为一个bug在测试编译器中已经被修改好，但还存在于候选编译器中。

@en The binary compatibility tests support a small number of test framework
@en commands that appear within comments in a test file.
二进制兼容性测试支持少数在测试文件的注释中出现的测试框架命令。

@en @table @code
@en @item dg-require-*
@en These commands can be used in @file{@var{testname}_main.@var{suffix}}
@en to skip the test if specific support is not available on the target.
@en 
@en @item dg-options
@en The specified options are used for compiling this particular source
@en file, appended to the options from @env{COMPAT_OPTIONS}.  When this
@en command appears in @file{@var{testname}_main.@var{suffix}} the options
@en are also used to link the test program.
@en 
@en @item dg-xfail-if
@en This command can be used in a secondary source file to specify that
@en compilation is expected to fail for particular options on particular
@en targets.
@en @end table
@table @code
@item dg-require-*
这些命令可以用于@file{@var{testname}_main.@var{suffix}}中，
使得当目标机上没有特定支持的时候跳过测试。 

@item dg-options
指定选项用于编译该特定的源文件，将选项添加到@env{COMPAT_OPTIONS}中。
当该命令出现在@file{@var{testname}_main.@var{suffix}}中时，
选项还用于链接测试程序的时候。 

@item dg-xfail-if
该命令可以用在第二个源文件中，来指定在特定目标机上对于特定选项，编译将会失败。 
@end table

@en @node Torture Tests
@en @section Support for torture testing using multiple options
@node Torture Tests
@section 对使用多个选项进行torture测试的支持

@en Throughout the compiler testsuite there are several directories whose
@en tests are run multiple times, each with a different set of options.
@en These are known as torture tests.
@en @file{lib/torture-options.exp} defines procedures to
@en set up these lists:
在整个编译器测试包中，有几个目录，它们的测试程序被运行多次，
每次使用不同的选项集合。这些被称为torture测试。
@file{gcc/testsuite/lib/torture-options.exp}定义了建立这些列表的程序：

@en @table @code
@en @item torture-init
@en Initialize use of torture lists.
@en @item set-torture-options
@en Set lists of torture options to use for tests with and without loops.
@en Optionally combine a set of torture options with a set of other
@en options, as is done with Objective-C runtime options.
@en @item torture-finish
@en Finalize use of torture lists.
@en @end table
@table @code
@item torture-init
初始化对torture列表的使用。
@item set-torture-options
设置用于测试程序的torture选项列表。
可选的，可以将torture选项集合与其它选项集合组合一起，
正如Objective-C运行时选项所用的方式。
@item torture-finish
结束对torture列表的使用。
@end table

@en The @file{.exp} file for a set of tests that use torture options must
@en include calls to these three procedures if:
使用torture选项的用于测试集的文件@file{.exp}，必须包含对这三个程序的调用，如果：

@en @itemize @bullet
@en @item It calls @code{gcc-dg-runtest} and overrides @var{DG_TORTURE_OPTIONS}.
@en 
@en @item It calls @var{$@{tool@}}@code{-torture} or
@en @var{$@{tool@}}@code{-torture-execute}, where @var{tool} is @code{c},
@en @code{fortran}, or @code{objc}.
@en 
@en @item It calls @code{dg-pch}.
@en @end itemize
@itemize @bullet
@item 其调用了@code{gcc-dg-runtest}并且覆写了@var{DG_TORTURE_OPTIONS}

@item 其调用了@var{$@{tool@}}@code{-torture} 或者
@var{$@{tool@}}@code{-torture-execute}，其中@var{tool}为@code{c},
@code{fortran}, 或者@code{objc}.

@item 其调用了@code{dg-pch}.
@end itemize

@en It is not necessary for a @file{.exp} file that calls @code{gcc-dg-runtest}
@en to call the torture procedures if the tests should use the list in
@en @var{DG_TORTURE_OPTIONS} defined in @file{gcc-dg.exp}.
如果测试程序将使用在@file{gcc-dg.exp}中定义的@var{DG_TORTURE_OPTIONS}中的列表，
则文件@file{.exp}不必通过调用@code{gcc-dg-runtest}来调用torture程序。

@en Most uses of torture options can override the default lists by defining
@en @var{TORTURE_OPTIONS} or add to the default list by defining
@en @var{ADDITIONAL_TORTURE_OPTIONS}.  Define these in a @file{.dejagnurc}
@en file or add them to the @file{site.exp} file; for example
大多数对torture选项的使用，
可以通过定义@var{TORTURE_OPTIONS}或者通过定义@var{ADDITIONAL_TORTURE_OPTIONS}
增加到缺省列表中，来覆写缺省列表。在文件@file{.dejagnurc}中定义这些，
或者将它们增加到文件@file{site.exp}中；例如

@smallexample
set ADDITIONAL_TORTURE_OPTIONS  [list \
  @{ -O2 -ftree-loop-linear @} \
  @{ -O2 -fpeel-loops @} ]
@end smallexample

