@c Copyright (c) 2010 Free Software Foundation, Inc.
@c Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.
@c Contributed by Jan Hubicka <jh@suse.cz> and
@c Diego Novillo <dnovillo@google.com>

@node LTO
@chapter Link Time Optimization
@cindex lto
@cindex whopr
@cindex wpa
@cindex ltrans

@section Design Overview

@en Link time optimization is implemented as a GCC front end for a
@en bytecode representation of GIMPLE that is emitted in special sections
@en of @code{.o} files.  Currently, LTO support is enabled in most
@en ELF-based systems, as well as darwin, cygwin and mingw systems.
链接时优化是作为一个GIMPLE字节码表示的前段实现的，这些字节码就存在于@code{.o}文件的特殊section。目前，LTO已经支持大多数基于ELF文件格式的系统，也支持darwin，cygwin和mingw这样的系统。

@en Since GIMPLE bytecode is saved alongside final object code, object
@en files generated with LTO support are larger than regular object files.
@en This ``fat'' object format makes it easy to integrate LTO into
@en existing build systems, as one can, for instance, produce archives of
@en the files.  Additionally, one might be able to ship one set of fat
@en objects which could be used both for development and the production of
@en optimized builds.  A, perhaps surprising, side effect of this feature
@en is that any mistake in the toolchain that leads to LTO information not
@en being used (e.g.@: an older @code{libtool} calling @code{ld} directly).
@en This is both an advantage, as the system is more robust, and a
@en disadvantage, as the user is not informed that the optimization has
@en been disabled.
由于GIMPLE字节码保存在最后的目标文件中，所以支持LTO的目标文件比一般的目标文件大一些。采用这样“大”目标文件格式，LTO功能容易被集成到现有的编译器构建系统中，例如，在构建文件的档案时。

@en The current implementation only produces ``fat'' objects, effectively
@en doubling compilation time and increasing file sizes up to 5x the
@en original size.  This hides the problem that some tools, such as
@en @code{ar} and @code{nm}, need to understand symbol tables of LTO
@en sections.  These tools were extended to use the plugin infrastructure,
@en and with these problems solved, GCC will also support ``slim'' objects
@en consisting of the intermediate code alone.

现在的实现方式只有一种，就是是产生"肥胖"对象文件，虽然这样不仅会让编译时间翻倍，而且会让文件大小增长五倍，但是这样的实现方式掩盖了一个问题，就是一些工具比如@code{ar} 和 @code{nm}需要理解LTO section的符号表。这些工具可以被扩展以使用插件功能，而且，随着这些问题的解决，GCC会支持仅由中间代码组成的"苗条"对象文件。

@en At the highest level, LTO splits the compiler in two.  The first half
@en (the ``writer'') produces a streaming representation of all the
@en internal data structures needed to optimize and generate code.  This
@en includes declarations, types, the callgraph and the GIMPLE representation
@en of function bodies.

从高层次来看，LTO把编译器分割为两个部分。前半部分("写者")产生以流形式表达的所有代码优化和生成需要的内部数据结构。这其中包括函数的声明，类型，调用图和GIMPLE表达。

@en When @option{-flto} is given during compilation of a source file, the
@en pass manager executes all the passes in @code{all_lto_gen_passes}.
@en Currently, this phase is composed of two IPA passes:

当编译源文件使用了选项@option{-flto}，pass管理器在@code{all_lto_gen_passes}中执行所有的pass。现在，这个阶段有两个IPA pass组成:

@itemize @bullet
@item @code{pass_ipa_lto_gimple_out}
@en This pass executes the function @code{lto_output} in
@en @file{lto-streamer-out.c}, which traverses the call graph encoding
@en every reachable declaration, type and function.  This generates a
@en memory representation of all the file sections described below.
这个pass执行了@file{lto-streamer-out.c}的函数@code{lto_output}。这个函数遍历调用图中的每一个可达的声明，类型和函数。这样就生成了所有如下所述的文件段的内存表示。

@item @code{pass_ipa_lto_finish_out}
@en This pass executes the function @code{produce_asm_for_decls} in
@en @file{lto-streamer-out.c}, which takes the memory image built in the
@en previous pass and encodes it in the corresponding ELF file sections.
这个pass执行@file{lto-streamer-out.c}中的@code{produce_asm_for_decls}函数，这个函数把上一个pass构建的内存表示编码保存到相应的ELF的文件段中。
@end itemize

@en The second half of LTO support is the ``reader''.  This is implemented
@en as the GCC front end @file{lto1} in @file{lto/lto.c}.  When
@en @file{collect2} detects a link set of @code{.o}/@code{.a} files with
@en LTO information and the @option{-flto} is enabled, it invokes
@en @file{lto1} which reads the set of files and aggregates them into a
@en single translation unit for optimization.  The main entry point for
@en the reader is @file{lto/lto.c}:@code{lto_main}.

LTO的下半个部分是"读者"。这个部分是作为GCC的前端@file{lto/lto.c}文件@file{lto1}实现的。当@file{collect2}检查出链接文件集合@code{.o}/@code{.a}具有LTO信息，而且选项@option{-flto}被打开，它就调用@file{lto1}，@file{lto1}读入一些文件，把它们聚集成为一个单独的为优化的翻译单元。这个读入功能的主入口点是@file{lto/lto.c}文件的@code{lto_main}函数。

@subsection LTO modes of operation

@en One of the main goals of the GCC link-time infrastructure was to allow
@en effective compilation of large programs.  For this reason GCC implements two
@en link-time compilation modes.

GCC的链接时基础设施的一个主要目标就是能够有效地编译大程序。由于这个原因，GCC实现了两种链接时编译的模式
@enumerate
@en @item	@emph{LTO mode}, in which the whole program is read into the
@en compiler at link-time and optimized in a similar way as if it
@en were a single source-level compilation unit.
@item   @emph{LTO 模式},在这种模式下，整个程序在链接时刻被读入编译器，然后就像对一个源代码级别的编译单元，进行优化。

@en @item	@emph{WHOPR or partitioned mode}, designed to utilize multiple
@en CPUs and/or a distributed compilation environment to quickly link
@en large applications.  WHOPR stands for WHOle Program optimizeR (not to
@en be confused with the semantics of @option{-fwhole-program}).  It
@en partitions the aggregated callgraph from many different @code{.o}
@en files and distributes the compilation of the sub-graphs to different
@en CPUs.
@item  @emph{WHOPR 或分区模式}，这样的设计是为了利用多个CPU和/或分布式编译环境来链接大的应用程序。WHOPR代表"全部程序优化"(不要被@option{-fwhole-program}的语义所疑惑)。  它对从许多不同的@code{.o}文件中产生聚集的调用图进行分块，然后把这些分块后的子图分布到不同的CPU进行编译。

@en Note that distributed compilation is not implemented yet, but since
@en the parallelism is facilitated via generating a @code{Makefile}, it
@en would be easy to implement.
注意分布式编译现在还没有实现，但是由于并行化只是利用生成的一个@code{Makefile}，所以并行编译容易实现。
@end enumerate

@en WHOPR splits LTO into three main stages:
WHOPR 把LTO分成了三个主要阶段:
@enumerate
@en @item Local generation (LGEN)
@item 局部生成 (LGEN)
@en This stage executes in parallel.  Every file in the program is compiled
@en into the intermediate language and packaged together with the local
@en call-graph and summary information.  This stage is the same for both
@en the LTO and WHOPR compilation mode.
这个阶段是并行执行的。程序中的每一个文件被编译成为一种中间表达语言，并且和局部的调用图和总计信息包装在一起。这个阶段对于LTO和WHOPR编译模式是相同的。

@en @item Whole Program Analysis (WPA)
@item 全程序分析 (WPA)
@en WPA is performed sequentially.  The global call-graph is generated, and
@en a global analysis procedure makes transformation decisions.  The global
@en call-graph is partitioned to facilitate parallel optimization during
@en phase 3.  The results of the WPA stage are stored into new object files
@en which contain the partitions of program expressed in the intermediate
@en language and the optimization decisions.
WPA是顺序执行的，生成一个全局调用图，并且有一个全局分析过程来做转换的决定。在第三阶段，全局调用图被分块，以方便并行优化。WPA阶段的结果保存在新的目标文件中，这些新的文件包含用中间语言表示的分块程序和一些优化的决定。

@en @item Local transformations (LTRANS)
@item 局部转换 (LTRANS)
@en This stage executes in parallel.  All the decisions made during phase 2
@en are implemented locally in each partitioned object file, and the final
@en object code is generated.  Optimizations which cannot be decided
@en efficiently during the phase 2 may be performed on the local
@en call-graph partitions.
这个阶段也是并行执行的。所有在阶段二做的决定在每个分块目标文件上实现，并且生成最后的目标代码。无法在第二阶段高效进行的优化可能会在局部分块调用图上进行。
@end enumerate

@en WHOPR can be seen as an extension of the usual LTO mode of
@en compilation.  In LTO, WPA and LTRANS are executed within a single
@en execution of the compiler, after the whole program has been read into
@en memory.
WHOPR可以被看作为普通LTO编译模式的扩展。在LTO模式，当所有程序被读进内存后，WPA和LTRANS在一次编译器运行中运行。

@en When compiling in WHOPR mode, the callgraph is partitioned during
@en the WPA stage.  The whole program is split into a given number of
@en partitions of roughly the same size.  The compiler tries to
@en minimize the number of references which cross partition boundaries.
@en The main advantage of WHOPR is to allow the parallel execution of
@en LTRANS stages, which are the most time-consuming part of the
@en compilation process.  Additionally, it avoids the need to load the
@en whole program into memory.
当在WHOPR编译模式中时，在WPA阶段，调用图被分块。整个程序被分割为大小基本一致的若干分块。编译器尽量减少跨越分块边缘的引用。WHOPR的主要有点是允许并行执行LTRANS阶段，而这个阶段有恰恰是整个编译过程中最耗时的部分。例外，它也避免了把整个程序全部加载到内存。

@section LTO file sections

@en LTO information is stored in several ELF sections inside object files.
@en Data structures and enum codes for sections are defined in
@en @file{lto-streamer.h}.
LTO的信息保存在目标文件的几个段里边。这些段相关的数据结构和枚举代码定义在文件@file{lto-streamer.h}。

@en These sections are emitted from @file{lto-streamer-out.c} and mapped
@en in all at once from @file{lto/lto.c}:@code{lto_file_read}.  The
@en individual functions dealing with the reading/writing of each section
@en are described below.
这些段从@file{lto-streamer-out.c}中生成，并且从@file{lto/lto.c}的函数@code{lto_file_read}一次性映射。处理每个段的读写的单个函数，在下边描述。

@itemize @bullet
@en @item Command line options (@code{.gnu.lto_.opts})
@item 命令行选项 (@code{.gnu.lto_.opts})
@en This section contains the command line options used to generate the
@en object files.  This is used at link time to determine the optimization
@en level and other settings when they are not explicitly specified at the
@en linker command line.
这个段包含了用来生成目标文件的命令行选项。这个段被用来在链接时刻决定优化级别和其他的设置，当这些信息都没有在连接器的命令行中显示地设置。

Currently, GCC does not support combining LTO object files compiled
with different set of the command line options into a single binary.
At link time, the options given on the command line and the options
saved on all the files in a link-time set are applied globally.  No
attempt is made at validating the combination of flags (other than the
usual validation done by option processing).  This is implemented in
@file{lto/lto.c}:@code{lto_read_all_file_options}.


@en @item Symbol table (@code{.gnu.lto_.symtab})
@item 符号表 (@code{.gnu.lto_.symtab})

@en This table replaces the ELF symbol table for functions and variables
@en represented in the LTO IL.  Symbols used and exported by the optimized
@en assembly code of ``fat'' objects might not match the ones used and
@en exported by the intermediate code.  This table is necessary because
@en the intermediate code is less optimized and thus requires a separate
@en symbol table.
这个表替换了LTO中间语言表示的函数和变量的ELF符号表。被"肥胖"对象的优化的汇编代码使用和导出的符号也许并不能匹配由中间代码使用和导出的符号。这个表已经足够了因为中间代码还没有充分优化，所以需要一个单独的符号表。

@en Additionally, the binary code in the ``fat'' object will lack a call
@en to a function, since the call was optimized out at compilation time
@en after the intermediate language was streamed out.  In some special
@en cases, the same optimization may not happen during link-time
@en optimization.  This would lead to an undefined symbol if only one
@en symbol table was used.
另外，"肥胖"对象中的二进制代码缺少对一个函数的调用，因为在中间代码被序列化后，调用在编译时间优化掉了。在一些特殊情况下，同样的优化可能在链接时优化不会发生。如果使用一个符号表，会导致一个未定义的符号。

@en The symbol table is emitted in
这个符号表产生于
@file{lto-streamer-out.c}:@code{produce_symtab}.


@en @item Global declarations and types (@code{.gnu.lto_.decls})
@item 全局声明和类型 (@code{.gnu.lto_.decls})

@en This section contains an intermediate language dump of all
@en declarations and types required to represent the callgraph, static
@en variables and top-level debug info.
这个段包括了中间语言表示的所有声明和类型，这些都是需要表示调用图，静态变量和顶级的调试信息。

@en The contents of this section are emitted in
@en @file{lto-streamer-out.c}:@code{produce_asm_for_decls}.  Types and
@en symbols are emitted in a topological order that preserves the sharing
@en of pointers when the file is read back in
@en (@file{lto.c}:@code{read_cgraph_and_symbols}).
这个段的内容由@file{lto-streamer-out.c}:@code{produce_asm_for_decls}产生。类型和符号按照拓扑顺序生成，为了在文件被再次读入的时候，共享指针。

@en @item The callgraph (@code{.gnu.lto_.cgraph})
@item 调用图 (@code{.gnu.lto_.cgraph})

@en This section contains the basic data structure used by the GCC
@en inter-procedural optimization infrastructure.  This section stores an
@en annotated multi-graph which represents the functions and call sites as
@en well as the variables, aliases and top-level @code{asm} statements.
这个段包含了GCC过程间优化基础设施所使用的数据结构。这个段存储了一个有注释的多图，来表示函数和调用位置，以及变量，别名和顶级@code{asm}语句。

@en This section is emitted in
@en @file{lto-streamer-out.c}:@code{output_cgraph} and read in
@en @file{lto-cgraph.c}:@code{input_cgraph}.
这个段由@file{lto-streamer-out.c}:@code{output_cgraph}生成，由@file{lto-cgraph.c}:@code{input_cgraph}读入。

@en @item IPA references (@code{.gnu.lto_.refs})
@item IPA 引用 (@code{.gnu.lto_.refs})

@en This section contains references between function and static
@en variables.  It is emitted by @file{lto-cgraph.c}:@code{output_refs}
@en and read by @file{lto-cgraph.c}:@code{input_refs}.
这个段包含函数和静态变量之间的引用。这个段由@file{lto-cgraph.c}:@code{output_refs}产生，被@file{lto-cgraph.c}:@code{input_refs}读入。

@en @item Function bodies (@code{.gnu.lto_.function_body.<name>})
@item 函数体 (@code{.gnu.lto_.function_body.<name>})

@en This section contains function bodies in the intermediate language
@en representation.  Every function body is in a separate section to allow
@en copying of the section independently to different object files or
@en reading the function on demand.
这个段包含了在中间语言表示的函数体。没一个函数体都在一个单独的段，这样可以独立地拷贝这个段到不同的目标文件，或者随需地读入函数。

@en Functions are emitted in
@en @file{lto-streamer-out.c}:@code{output_function} and read in
@en @file{lto-streamer-in.c}:@code{input_function}.
函数由@file{lto-streamer-out.c}:@code{output_function}生成，由@file{lto-streamer-in.c}:@code{input_function}读入。

@en @item Static variable initializers (@code{.gnu.lto_.vars})
@item 静态变量初始化 (@code{.gnu.lto_.vars})

@en This section contains all the symbols in the global variable pool.  It
@en is emitted by @file{lto-cgraph.c}:@code{output_varpool} and read in
@en @file{lto-cgraph.c}:@code{input_cgraph}.
这个段包含了全局变量池的所有的符号。由@file{lto-cgraph.c}:@code{output_varpool} 产生，并由@file{lto-cgraph.c}:@code{input_cgraph}读入。

@en @item Summaries and optimization summaries used by IPA passes
@en (@code{.gnu.lto_.<xxx>}, where @code{<xxx>} is one of @code{jmpfuncs},
@en @code{pureconst} or @code{reference})
@item IPA遍用到的总计信息和优化总计信息
(@code{.gnu.lto_.<xxx>}，这里@code{<xxx>}是@code{jmpfuncs}，@code{pureconst}，或@code{reference}其中的一种。

@en These sections are used by IPA passes that need to emit summary
@en information during LTO generation to be read and aggregated at
@en link time.  Each pass is responsible for implementing two pass manager
@en hooks: one for writing the summary and another for reading it in.  The
@en format of these sections is entirely up to each individual pass.  The
@en only requirement is that the writer and reader hooks agree on the
@en format.
这些段都会被IPA使用，生成总计信息，在LTO生成阶段读入，最后在链接时间整合。每一遍都负责实现两个遍管理器钩子函数:一个用来写总计信息，一个用来读入总计信息。信息格式完全由每个遍来决定。唯一的要求就是写部分和读部分在格式上保持一致。

@end itemize


@en @section Using summary information in IPA passes
@section 在IPA遍中使用总计信息

@en Programs are represented internally as a @emph{callgraph} (a
@en multi-graph where nodes are functions and edges are call sites)
@en and a @emph{varpool} (a list of static and external variables in
@en the program).
程序在内部表示为@emph{调用图} (一种多图，节点代表函数，边代表函数调用位置)和一个@emph{变量池} (一个程序静态变量和外部变量的链表)。

@en The inter-procedural optimization is organized as a sequence of
@en individual passes, which operate on the callgraph and the
@en varpool.  To make the implementation of WHOPR possible, every
@en inter-procedural optimization pass is split into several stages
@en that are executed at different times during WHOPR compilation:
过程间优化是由一系列pass组成，这些遍都会操作调用图和变量池。为了使得WHOPR的实现可能，每一个过程间优化遍都被分为几个在WHOPR编译不同时间执行的阶段:

@itemize @bullet
@en @item LGEN time
@item LGEN 时间段
@enumerate
@en @item @emph{Generate summary} (@code{generate_summary} in
@en @code{struct ipa_opt_pass_d}).  This stage analyzes every function
@en body and variable initializer is examined and stores relevant
@en information into a pass-specific data structure.
@item @emph{生成总计信息} (@code{struct ipa_opt_pass_d}中的@code{generate_summary})。这个阶段分析每一个函数体，变量初始化代码被检查，并且把相关信息保存在一个这一遍的数据结构中。

@en @item @emph{Write summary} (@code{write_summary} in
@en @code{struct ipa_opt_pass_d}).  This stage writes all the
@en pass-specific information generated by @code{generate_summary}.
@en Summaries go into their own @code{LTO_section_*} sections that
@en have to be declared in @file{lto-streamer.h}:@code{enum
@en lto_section_type}.  A new section is created by calling
@en @code{create_output_block} and data can be written using the
@en @code{lto_output_*} routines.
@item @emph{写入总计信息} (@code{struct ipa_opt_pass_d}中的@code{write_summary})。这个阶段把所有的由@code{generate_summary}生成的信息写入。这些总计信息被写到它们各自的@code{LTO_section_*} 段。这些段必须在@file{lto-streamer.h}:@code{enum lto_section_type}声明。调用@code{create_output_block}可以创建一个新段，使用@code{lto_output_*}函数写入数据。

@end enumerate

@en @item WPA time
@item WPA 时间段
@enumerate
@en @item @emph{Read summary} (@code{read_summary} in
@en @code{struct ipa_opt_pass_d}).  This stage reads all the
@en pass-specific information in exactly the same order that it was
@en written by @code{write_summary}.
@item @emph{读入总计信息} (@code{struct ipa_opt_pass_d}中的@code{read_summary})。这个阶段读入所有的与该遍有关的信息，顺序和通过@code{write_summary}写入的顺序一致。
@en @item @emph{Execute} (@code{execute} in @code{struct
@en opt_pass}).  This performs inter-procedural propagation.  This
@en must be done without actual access to the individual function
@en bodies or variable initializers.  Typically, this results in a
@en transitive closure operation over the summary information of all
@en the nodes in the callgraph.
@item @emph{执行} (@code{execute} in @code{struct opt_pass})。这个步骤做了过程间的信息繁殖。这个操作必须不能有对单个函数体或者变量初始化函数的实际访问。典型地，这个导致了一个在调用图的所有节点的总计信息的传递闭包操作。

@en @item @emph{Write optimization summary}
@en (@code{write_optimization_summary} in @code{struct
@en ipa_opt_pass_d}).  This writes the result of the inter-procedural
@en propagation into the object file.  This can use the same data
@en structures and helper routines used in @code{write_summary}.
@item @emph{记录优化总计信息}
(@code{write_optimization_summary} 在@code{struct ipa_opt_pass_d})。它把过程间繁殖信息记录到目标文件。它和@code{write_summary}使用了同样的数据结构和函数。
@end enumerate

@item LTRANS time
@enumerate
@en @item @emph{Read optimization summary}
@en (@code{read_optimization_summary} in @code{struct
@en ipa_opt_pass_d}).  The counterpart to
@en @code{write_optimization_summary}.  This reads the interprocedural
@en optimization decisions in exactly the same format emitted by
@en @code{write_optimization_summary}.
@item @emph{读入优化总计信息}
(@code{read_optimization_summary} in @code{struct ipa_opt_pass_d})。对应于@code{write_optimization_summary}。它读入@code{write_optimization_summary}输出的过程间优化决定。

@item @emph{Transform} (@code{function_transform} and
@code{variable_transform} in @code{struct ipa_opt_pass_d}).
The actual function bodies and variable initializers are updated
based on the information passed down from the @emph{Execute} stage.

@item @emph{Transform} (@code{struct ipa_opt_pass_d} 中的@code{function_transform} 和 @code{variable_transform})。
实际的函数体和变量初始化函数根据从@emph{执行}阶段专递下来的信息来更新。

@end enumerate
@end itemize

@en The implementation of the inter-procedural passes are shared
@en between LTO, WHOPR and classic non-LTO compilation.
过程间的多遍优化是在LTO, WHOPR 和典型的非LTO编译之间共享的。

@itemize
@en @item During the traditional file-by-file mode every pass executes its
@en own @emph{Generate summary}, @emph{Execute}, and @emph{Transform}
@en stages within the single execution context of the compiler.
@item 在传统的一个文件接一个文件的编译模式中，每一遍都在单个的编译器运行环境中执行它自己的@emph{Generate summary}阶段，@emph{Execute}阶段和@emph{Transform}阶段。

@en @item In LTO compilation mode, every pass uses @emph{Generate
@en summary} and @emph{Write summary} stages at compilation time,
@en while the @emph{Read summary}, @emph{Execute}, and
@en @emph{Transform} stages are executed at link time.
在LTO编译模式下，每一遍在编译时间使用@emph{Generate @en summary} 阶段和@emph{Write summary}阶段，然而@emph{Read summary}阶段，@emph{Execute}阶段和@emph{Transform} 在链接时间执行。

@en @item In WHOPR mode all stages are used.
@item 在WHOPR模式，所有阶段都会被使用。

@end itemize

@en To simplify development, the GCC pass manager differentiates
@en between normal inter-procedural passes and small inter-procedural
@en passes.  A @emph{small inter-procedural pass}
@en (@code{SIMPLE_IPA_PASS}) is a pass that does
@en everything at once and thus it can not be executed during WPA in
@en WHOPR mode.  It defines only the @emph{Execute} stage and during
@en this stage it accesses and modifies the function bodies.  Such
@en passes are useful for optimization at LGEN or LTRANS time and are
@en used, for example, to implement early optimization before writing
@en object files.  The simple inter-procedural passes can also be used
@en for easier prototyping and development of a new inter-procedural
@en pass.
为了简化开发，GCC遍管理器区分了正常过程间分析的遍和小过程间分析的遍。一个@emph{小过程间分析的遍}(@code{SIMPLE_IPA_PASS})是立刻把所有的事情都做了，所以它不能在WHOPR模式的WPA期间执行。它只定义了@emph{Execute}阶段和在这个阶段，它访问和修改的函数体。这样的遍对已在LGEN时候和LTRANS时候的优化是有用的，而且可以被用来实现在写入目标文件之前的早期优化。这些简单的过程间分析遍也可以被用作一个新的过程间分析遍的早期圆形和开发。

@subsection Virtual clones

One of the main challenges of introducing the WHOPR compilation
mode was addressing the interactions between optimization passes.
In LTO compilation mode, the passes are executed in a sequence,
each of which consists of analysis (or @emph{Generate summary}),
propagation (or @emph{Execute}) and @emph{Transform} stages.
Once the work of one pass is finished, the next pass sees the
updated program representation and can execute.  This makes the
individual passes dependent on each other.

In WHOPR mode all passes first execute their @emph{Generate
summary} stage.  Then summary writing marks the end of the LGEN
stage.  At WPA time,
the summaries are read back into memory and all passes run the
@emph{Execute} stage.  Optimization summaries are streamed and
sent to LTRANS, where all the passes execute the @emph{Transform}
stage.

Most optimization passes split naturally into analysis,
propagation and transformation stages.  But some do not.  The
main problem arises when one pass performs changes and the
following pass gets confused by seeing different callgraphs
between the @emph{Transform} stage and the @emph{Generate summary}
or @emph{Execute} stage.  This means that the passes are required
to communicate their decisions with each other.

To facilitate this communication, the GCC callgraph
infrastructure implements @emph{virtual clones}, a method of
representing the changes performed by the optimization passes in
the callgraph without needing to update function bodies.

A @emph{virtual clone} in the callgraph is a function that has no
associated body, just a description of how to create its body based
on a different function (which itself may be a virtual clone).

The description of function modifications includes adjustments to
the function's signature (which allows, for example, removing or
adding function arguments), substitutions to perform on the
function body, and, for inlined functions, a pointer to the
function that it will be inlined into.

It is also possible to redirect any edge of the callgraph from a
function to its virtual clone.  This implies updating of the call
site to adjust for the new function signature.

Most of the transformations performed by inter-procedural
optimizations can be represented via virtual clones.  For
instance, a constant propagation pass can produce a virtual clone
of the function which replaces one of its arguments by a
constant.  The inliner can represent its decisions by producing a
clone of a function whose body will be later integrated into
a given function.

Using @emph{virtual clones}, the program can be easily updated
during the @emph{Execute} stage, solving most of pass interactions
problems that would otherwise occur during @emph{Transform}.

Virtual clones are later materialized in the LTRANS stage and
turned into real functions.  Passes executed after the virtual
clone were introduced also perform their @emph{Transform} stage
on new functions, so for a pass there is no significant
difference between operating on a real function or a virtual
clone introduced before its @emph{Execute} stage.

Optimization passes then work on virtual clones introduced before
their @emph{Execute} stage as if they were real functions.  The
only difference is that clones are not visible during the
@emph{Generate Summary} stage.

To keep function summaries updated, the callgraph interface
allows an optimizer to register a callback that is called every
time a new clone is introduced as well as when the actual
function or variable is generated or when a function or variable
is removed.  These hooks are registered in the @emph{Generate
summary} stage and allow the pass to keep its information intact
until the @emph{Execute} stage.  The same hooks can also be
registered during the @emph{Execute} stage to keep the
optimization summaries updated for the @emph{Transform} stage.

@subsection IPA references

GCC represents IPA references in the callgraph.  For a function
or variable @code{A}, the @emph{IPA reference} is a list of all
locations where the address of @code{A} is taken and, when
@code{A} is a variable, a list of all direct stores and reads
to/from @code{A}.  References represent an oriented multi-graph on
the union of nodes of the callgraph and the varpool.  See
@file{ipa-reference.c}:@code{ipa_reference_write_optimization_summary}
and
@file{ipa-reference.c}:@code{ipa_reference_read_optimization_summary}
for details.

@subsection Jump functions
Suppose that an optimization pass sees a function @code{A} and it
knows the values of (some of) its arguments.  The @emph{jump
function} describes the value of a parameter of a given function
call in function @code{A} based on this knowledge.

Jump functions are used by several optimizations, such as the
inter-procedural constant propagation pass and the
devirtualization pass.  The inliner also uses jump functions to
perform inlining of callbacks.

@section Whole program assumptions, linker plugin and symbol visibilities

Link-time optimization gives relatively minor benefits when used
alone.  The problem is that propagation of inter-procedural
information does not work well across functions and variables
that are called or referenced by other compilation units (such as
from a dynamically linked library).  We say that such functions
are variables are @emph{externally visible}.

To make the situation even more difficult, many applications
organize themselves as a set of shared libraries, and the default
ELF visibility rules allow one to overwrite any externally
visible symbol with a different symbol at runtime.  This
basically disables any optimizations across such functions and
variables, because the compiler cannot be sure that the function
body it is seeing is the same function body that will be used at
runtime.  Any function or variable not declared @code{static} in
the sources degrades the quality of inter-procedural
optimization.

To avoid this problem the compiler must assume that it sees the
whole program when doing link-time optimization.  Strictly
speaking, the whole program is rarely visible even at link-time.
Standard system libraries are usually linked dynamically or not
provided with the link-time information.  In GCC, the whole
program option (@option{-fwhole-program}) asserts that every
function and variable defined in the current compilation
unit is static, except for function @code{main} (note: at
link time, the current unit is the union of all objects compiled
with LTO).  Since some functions and variables need to
be referenced externally, for example by another DSO or from an
assembler file, GCC also provides the function and variable
attribute @code{externally_visible} which can be used to disable
the effect of @option{-fwhole-program} on a specific symbol.

The whole program mode assumptions are slightly more complex in
C++, where inline functions in headers are put into @emph{COMDAT}
sections.  COMDAT function and variables can be defined by
multiple object files and their bodies are unified at link-time
and dynamic link-time.  COMDAT functions are changed to local only
when their address is not taken and thus un-sharing them with a
library is not harmful.  COMDAT variables always remain externally
visible, however for readonly variables it is assumed that their
initializers cannot be overwritten by a different value.

GCC provides the function and variable attribute
@code{visibility} that can be used to specify the visibility of
externally visible symbols (or alternatively an
@option{-fdefault-visibility} command line option).  ELF defines
the @code{default}, @code{protected}, @code{hidden} and
@code{internal} visibilities.

The most commonly used is visibility is @code{hidden}.  It
specifies that the symbol cannot be referenced from outside of
the current shared library.  Unfortunately, this information
cannot be used directly by the link-time optimization in the
compiler since the whole shared library also might contain
non-LTO objects and those are not visible to the compiler.

GCC solves this problem using linker plugins.  A @emph{linker
plugin} is an interface to the linker that allows an external
program to claim the ownership of a given object file.  The linker
then performs the linking procedure by querying the plugin about
the symbol table of the claimed objects and once the linking
decisions are complete, the plugin is allowed to provide the
final object file before the actual linking is made.  The linker
plugin obtains the symbol resolution information which specifies
which symbols provided by the claimed objects are bound from the
rest of a binary being linked.

Currently, the linker plugin  works only in combination
with the Gold linker, but a GNU ld implementation is under
development.

GCC is designed to be independent of the rest of the toolchain
and aims to support linkers without plugin support.  For this
reason it does not use the linker plugin by default.  Instead,
the object files are examined by @command{collect2} before being
passed to the linker and objects found to have LTO sections are
passed to @command{lto1} first.  This mode does not work for
library archives.  The decision on what object files from the
archive are needed depends on the actual linking and thus GCC
would have to implement the linker itself.  The resolution
information is missing too and thus GCC needs to make an educated
guess based on @option{-fwhole-program}.  Without the linker
plugin GCC also assumes that symbols are declared @code{hidden}
and not referred by non-LTO code by default.

@section Internal flags controlling @code{lto1}

The following flags are passed into @command{lto1} and are not
meant to be used directly from the command line.

@itemize
@item -fwpa
@opindex fwpa
This option runs the serial part of the link-time optimizer
performing the inter-procedural propagation (WPA mode).  The
compiler reads in summary information from all inputs and
performs an analysis based on summary information only.  It
generates object files for subsequent runs of the link-time
optimizer where individual object files are optimized using both
summary information from the WPA mode and the actual function
bodies.  It then drives the LTRANS phase.

@item -fltrans
@opindex fltrans
This option runs the link-time optimizer in the
local-transformation (LTRANS) mode, which reads in output from a
previous run of the LTO in WPA mode.  In the LTRANS mode, LTO
optimizes an object and produces the final assembly.

@item -fltrans-output-list=@var{file}
@opindex fltrans-output-list
This option specifies a file to which the names of LTRANS output
files are written.  This option is only meaningful in conjunction
with @option{-fwpa}.
@end itemize
