@c Copyright (c) 2009, 2010 Free Software Foundation, Inc.
@c Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@en @node Plugins
@en @chapter Plugins
@node Plugins
@chapter 插件
@cindex Plugins

@en @section Loading Plugins
@section 加载插件

@en Plugins are supported on platforms that support @option{-ldl
@en -rdynamic}.  They are loaded by the compiler using @code{dlopen}
@en and invoked at pre-determined locations in the compilation
@en process.
在支持@option{-ldl -rdynamic}的平台上，插件才被支持。它们由编译器使用@code{dlopen}来加载，并在编译过程中预先确定的位置进行调用。

@en Plugins are loaded with
使用

@option{-fplugin=/path/to/@var{name}.so} @option{-fplugin-arg-@var{name}-@var{key1}[=@var{value1}]}

来加载插件。

@en The plugin arguments are parsed by GCC and passed to respective
@en plugins as key-value pairs. Multiple plugins can be invoked by
@en specifying multiple @option{-fplugin} arguments.
插件的参数由GCC解析，并按照“关键字-值”（key-value pairs）的方式传递给相应的插件。可以通过指定多个@option{-fplugin}参数来调用多个插件。

@en A plugin can be simply given by its short name (no dots or
@en slashes). When simply passing @option{-fplugin=@var{name}}, the plugin is
@en loaded from the @file{plugin} directory, so @option{-fplugin=@var{name}} is
@en the same as @option{-fplugin=`gcc -print-file-name=plugin`/@var{name}.so},
@en using backquote shell syntax to query the @file{plugin} directory.
可以直接使用简短的名字（没有点和斜杠）来指定一个插件。当只是简单的传递@option{-fplugin=@var{name}}时，插件会从@file{plugin}目录下被加载，所以@option{-fplugin=@var{name}}等同于@option{-fplugin=`gcc -print-file-name=plugin`/@var{name}.so}，使用反引号shell语法来查询@file{plugin}目录。

@en @section Plugin API
@section 插件的API

@en Plugins are activated by the compiler at specific events as defined in
@en @file{gcc-plugin.h}.  For each event of interest, the plugin should
@en call @code{register_callback} specifying the name of the event and
@en address of the callback function that will handle that event.
插件由编译器在特定的事件上激活，这些事件在@file{gcc-plugin.h}中定义。对于每个感兴趣的事件，插件应该调用@code{register_callback}来指定事件的名字，以及将要处理该事件的回调函数的地址。

@en The header @file{gcc-plugin.h} must be the first gcc header to be included.
头文件@file{gcc-plugin.h}必须为第一个包含的gcc头文件。

@en @subsection Plugin license check
@subsection 插件的版权检查

@en Every plugin should define the global symbol @code{plugin_is_GPL_compatible}
@en to assert that it has been licensed under a GPL-compatible license.
@en If this symbol does not exist, the compiler will emit a fatal error
@en and exit with the error message:
每个插件应该定义全局符号@code{plugin_is_GPL_compatible}来宣称其具有GPL兼容的版权。如果该符号不存在，则编译器会产生一个致命错误，并带着如下错误信息退出：

@smallexample
fatal error: plugin @var{name} is not licensed under a GPL-compatible license
@var{name}: undefined symbol: plugin_is_GPL_compatible
compilation terminated
@end smallexample

@en The declared type of the symbol should be int, to match a forward declaration
@en in @file{gcc-plugin.h} that suppresses C++ mangling.  It does not need to be in
@en any allocated section, though.  The compiler merely asserts that
@en the symbol exists in the global scope.  Something like this is enough:
该符号的声明类型应该为int，从而匹配在@file{gcc-plugin.h}中为了抑制C++ mangling的前向声明。它其实并不需要位于任何分配的section中。编译器仅仅是使用断言来确保该符号在全局作用域中存在。类似于这样的就可以：

@smallexample
int plugin_is_GPL_compatible;
@end smallexample

@en @subsection Plugin initialization
@subsection 插件的初始化

@en Every plugin should export a function called @code{plugin_init} that
@en is called right after the plugin is loaded. This function is
@en responsible for registering all the callbacks required by the plugin
@en and do any other required initialization.
每个插件都应该导出一个叫做@code{plugin_init}的函数，其在插件刚被加载之后调用。该函数负责注册插件需要的所有回调，并做其它所需要的初始化。

@en This function is called from @code{compile_file} right before invoking
@en the parser.  The arguments to @code{plugin_init} are:
该函数就在调用语法分析器之前，由@code{compile_file}来调用。@code{plugin_init}的参数为：

@itemize @bullet
@en @item @code{plugin_info}: Plugin invocation information.
@item @code{plugin_info}: 插件调用信息。
@en @item @code{version}: GCC version.
@item @code{version}: GCC版本。
@end itemize

@en The @code{plugin_info} struct is defined as follows:
@code{plugin_info}结构体的定义如下：

@smallexample
struct plugin_name_args
@{
  char *base_name;              /* Short name of the plugin
                                   (filename without .so suffix). */
  const char *full_name;        /* Path to the plugin as specified with
                                   -fplugin=. */
  int argc;                     /* Number of arguments specified with
                                   -fplugin-arg-.... */
  struct plugin_argument *argv; /* Array of ARGC key-value pairs. */
  const char *version;          /* Version string provided by plugin. */
  const char *help;             /* Help string provided by plugin. */
@}
@end smallexample

@en If initialization fails, @code{plugin_init} must return a non-zero
@en value.  Otherwise, it should return 0.
如果初始化失败，@code{plugin_init}必须翻译一个非零的值。否则，其应该返回0。

@en The version of the GCC compiler loading the plugin is described by the
@en following structure:
加载插件的GCC编译器的版本使用如下结构体来描述：

@smallexample
struct plugin_gcc_version
@{
  const char *basever;
  const char *datestamp;
  const char *devphase;
  const char *revision;
  const char *configuration_arguments;
@};
@end smallexample

@en The function @code{plugin_default_version_check} takes two pointers to
@en such structure and compare them field by field. It can be used by the
@en plugin's @code{plugin_init} function.
函数@code{plugin_default_version_check}接受两个指向该结构的指针，并按照域来进行比较。其可以在插件的@code{plugin_init}函数中使用。

@en The version of GCC used to compile the plugin can be found in the symbol
@en @code{gcc_version} defined in the header @file{plugin-version.h}. The
@en recommended version check to perform looks like
用来编译插件的GCC版本可以在符号@code{gcc_version}中找到，该符号在头文件@file{plugin-version.h}中定义。推荐使用如下的方式来进行版本检查：

@smallexample
#include "plugin-version.h"
...

int
plugin_init (struct plugin_name_args *plugin_info,
             struct plugin_gcc_version *version)
@{
  if (!plugin_default_version_check (version, &gcc_version))
    return 1;

@}
@end smallexample

@en but you can also check the individual fields if you want a less strict check.
不过，如果你想进行不太严格的检查，你还可以只检查单独的域。

@en @subsection Plugin callbacks
@subsection 插件回调

@en Callback functions have the following prototype:
回调函数具有如下的函数原型：

@smallexample
/* The prototype for a plugin callback function.
     gcc_data  - event-specific data provided by GCC
     user_data - plugin-specific data provided by the plug-in.  */
typedef void (*plugin_callback_func)(void *gcc_data, void *user_data);
@end smallexample

@en Callbacks can be invoked at the following pre-determined events:
回调函数可以在如下预定义的事件上被调用：

@smallexample
enum plugin_event
@{
  PLUGIN_PASS_MANAGER_SETUP,    /* To hook into pass manager.  */
  PLUGIN_FINISH_TYPE,           /* After finishing parsing a type.  */
  PLUGIN_FINISH_DECL,           /* After finishing parsing a declaration. */
  PLUGIN_FINISH_UNIT,           /* Useful for summary processing.  */
  PLUGIN_PRE_GENERICIZE,        /* Allows to see low level AST in C and C++ frontends.  */
  PLUGIN_FINISH,                /* Called before GCC exits.  */
  PLUGIN_INFO,                  /* Information about the plugin. */
  PLUGIN_GGC_START,             /* Called at start of GCC Garbage Collection. */
  PLUGIN_GGC_MARKING,           /* Extend the GGC marking. */
  PLUGIN_GGC_END,               /* Called at end of GGC. */
  PLUGIN_REGISTER_GGC_ROOTS,    /* Register an extra GGC root table. */
  PLUGIN_REGISTER_GGC_CACHES,   /* Register an extra GGC cache table. */
  PLUGIN_ATTRIBUTES,            /* Called during attribute registration */
  PLUGIN_START_UNIT,            /* Called before processing a translation unit.  */
  PLUGIN_PRAGMAS,               /* Called during pragma registration. */
  /* Called before first pass from all_passes.  */
  PLUGIN_ALL_PASSES_START,
  /* Called after last pass from all_passes.  */
  PLUGIN_ALL_PASSES_END,
  /* Called before first ipa pass.  */
  PLUGIN_ALL_IPA_PASSES_START,
  /* Called after last ipa pass.  */
  PLUGIN_ALL_IPA_PASSES_END,
  /* Allows to override pass gate decision for current_pass.  */
  PLUGIN_OVERRIDE_GATE,
  /* Called before executing a pass.  */
  PLUGIN_PASS_EXECUTION,
  /* Called before executing subpasses of a GIMPLE_PASS in
     execute_ipa_pass_list.  */
  PLUGIN_EARLY_GIMPLE_PASSES_START,
  /* Called after executing subpasses of a GIMPLE_PASS in
     execute_ipa_pass_list.  */
  PLUGIN_EARLY_GIMPLE_PASSES_END,
  /* Called when a pass is first instantiated.  */
  PLUGIN_NEW_PASS,

  PLUGIN_EVENT_FIRST_DYNAMIC    /* Dummy event used for indexing callback
                                   array.  */
@};
@end smallexample

@en In addition, plugins can also look up the enumerator of a named event,
@en and / or generate new events dynamically, by calling the function
@en @code{get_named_event_id}.
除此之外，插件还可以查找命名事件的枚举变量，并且/或者通过调用函数@code{get_named_event_id}来动态生成新的事件。

@en To register a callback, the plugin calls @code{register_callback} with
@en the arguments:
要注册一个回调，插件使用如下参数来调用@code{register_callback}：

@itemize
@en @item @code{char *name}: Plugin name.
@item @code{char *name}: 插件的名字。
@en @item @code{int event}: The event code.
@item @code{int event}: 事件代码。
@en @item @code{plugin_callback_func callback}: The function that handles @code{event}.
@item @code{plugin_callback_func callback}: 处理@code{event}的函数。
@en @item @code{void *user_data}: Pointer to plugin-specific data.
@item @code{void *user_data}: 指向插件特定数据的指针。
@end itemize

@en For the PLUGIN_PASS_MANAGER_SETUP, PLUGIN_INFO, PLUGIN_REGISTER_GGC_ROOTS
@en and PLUGIN_REGISTER_GGC_CACHES pseudo-events the @code{callback} should be
@en null, and the @code{user_data} is specific.
对于PLUGIN_PASS_MANAGER_SETUP，PLUGIN_INFO，PLUGIN_REGISTER_GGC_ROOTS和PLUGIN_REGISTER_GGC_CACHES这些伪事件，@code{callback}应该为空，@code{user_data}为特定的。

@en When the PLUGIN_PRAGMAS event is triggered (with a null
@en pointer as data from GCC), plugins may register their own pragmas
@en using functions like @code{c_register_pragma} or
@en @code{c_register_pragma_with_expansion}.
当PLUGIN_PRAGMAS事件被触发（使用一个空指针，作为来自GCC的数据），插件可以使用函数，像@code{c_register_pragma}或者@code{c_register_pragma_with_expansion}，来注册它们自己的pragma。

@en @section Interacting with the pass manager
@section 与pass manager进行交互

@en There needs to be a way to add/reorder/remove passes dynamically. This
@en is useful for both analysis plugins (plugging in after a certain pass
@en such as CFG or an IPA pass) and optimization plugins.
需要有一种方法来动态地增加/重排/移除pass。这对分析类型的插件（位于特定pass，例如CFG或者IPA pass，之后）和优化类型的插件都很有帮助。

@en Basic support for inserting new passes or replacing existing passes is
@en provided. A plugin registers a new pass with GCC by calling
@en @code{register_callback} with the @code{PLUGIN_PASS_MANAGER_SETUP}
@en event and a pointer to a @code{struct register_pass_info} object defined as follows
现在已经提供了对插入新的pass或者替换现有pass的基本支持。要注册一个新的pass，插件可以通过使用@code{PLUGIN_PASS_MANAGER_SETUP}事件和指向如下定义的@code{struct register_pass_info}对象的指针，来调用@code{register_callback}：

@smallexample
enum pass_positioning_ops
@{
  PASS_POS_INSERT_AFTER,  // Insert after the reference pass.
  PASS_POS_INSERT_BEFORE, // Insert before the reference pass.
  PASS_POS_REPLACE        // Replace the reference pass.
@};

struct register_pass_info
@{
  struct opt_pass *pass;            /* New pass provided by the plugin.  */
  const char *reference_pass_name;  /* Name of the reference pass for hooking
                                       up the new pass.  */
  int ref_pass_instance_number;     /* Insert the pass at the specified
                                       instance number of the reference pass.  */
                                    /* Do it for every instance if it is 0.  */
  enum pass_positioning_ops pos_op; /* how to insert the new pass.  */
@};


/* Sample plugin code that registers a new pass.  */
int
plugin_init (struct plugin_name_args *plugin_info,
             struct plugin_gcc_version *version)
@{
  struct register_pass_info pass_info;

  ...

  /* Code to fill in the pass_info object with new pass information.  */

  ...

  /* Register the new pass.  */
  register_callback (plugin_info->base_name, PLUGIN_PASS_MANAGER_SETUP, NULL, &pass_info);

  ...
@}
@end smallexample


@en @section Interacting with the GCC Garbage Collector
@section 与GCC垃圾搜集器进行交互

@en Some plugins may want to be informed when GGC (the GCC Garbage
@en Collector) is running. They can register callbacks for the
@en @code{PLUGIN_GGC_START} and @code{PLUGIN_GGC_END} events (for which
@en the callback is called with a null @code{gcc_data}) to be notified of
@en the start or end of the GCC garbage collection.
一些插件想要当GGC（GCC Garbage Collector）运行的时候被告知。它们可以为@code{PLUGIN_GGC_START}和@code{PLUGIN_GGC_END}事件注册回调函数，从而在GCC垃圾搜集开始和结束时被告知。

@en Some plugins may need to have GGC mark additional data. This can be
@en done by registering a callback (called with a null @code{gcc_data})
@en for the @code{PLUGIN_GGC_MARKING} event. Such callbacks can call the
@en @code{ggc_set_mark} routine, preferably thru the @code{ggc_mark} macro
@en (and conversely, these routines should usually not be used in plugins
@en outside of the @code{PLUGIN_GGC_MARKING} event).
一些插件可能需要GGC来标记额外的数据。这可以通过为@code{PLUGIN_GGC_MARKING}事件注册一个回调函数（使用为空的@code{gcc_data}）来完成。这样的回调可以调用@code{ggc_set_mark}例程，最好是通过@code{ggc_mark}宏（反过来，这些例程通常不应该在插件中，@code{PLUGIN_GGC_MARKING}事件之外使用）。

@en Some plugins may need to add extra GGC root tables, e.g. to handle their own
@en @code{GTY}-ed data. This can be done with the @code{PLUGIN_REGISTER_GGC_ROOTS}
@en pseudo-event with a null callback and the extra root table (of type @code{struct
@en ggc_root_tab*}) as @code{user_data}.  Plugins that want to use the
@en @code{if_marked} hash table option can add the extra GGC cache tables generated
@en by @code{gengtype} using the @code{PLUGIN_REGISTER_GGC_CACHES} pseudo-event with
@en a null callback and the extra cache table (of type @code{struct ggc_cache_tab*})
@en as @code{user_data}.  Running the @code{gengtype -p @var{source-dir}
@en @var{file-list} @var{plugin*.c} ...} utility generates these extra root tables.
一些插件可能需要增加额外的GGC root表，例如，来处理它们自己的@code{GTY}数据。这可以通过使用@code{PLUGIN_REGISTER_GGC_ROOTS}伪事件来完成，使用一个空的回调和额外的（@code{struct ggc_root_tab*}类型的）root表作为@code{user_data}。想要使用@code{if_marked}哈希表选项的插件，可以增加额外的GGC cache表，这些是由@code{gengtype}使用@code{PLUGIN_REGISTER_GGC_CACHES}伪事件，一个空回调和作为@code{user_data}的额外的（@code{struct ggc_cache_tab*}类型的）cache表，来生成的。运行@code{gengtype -p @var{source-dir} @var{file-list} @var{plugin*.c} ...}来产生这些额外的root表。

@en You should understand the details of memory management inside GCC
@en before using @code{PLUGIN_GGC_MARKING}, @code{PLUGIN_REGISTER_GGC_ROOTS}
@en or @code{PLUGIN_REGISTER_GGC_CACHES}.
你在使用@code{PLUGIN_GGC_MARKING}，@code{PLUGIN_REGISTER_GGC_ROOTS}或者@code{PLUGIN_REGISTER_GGC_CACHES}之前，应该理解GCC内部的内存管理的详细情况。

@en @section Giving information about a plugin
@section 给出插件的信息

@en A plugin should give some information to the user about itself. This
@en uses the following structure:
插件应该给用户提供自身的一些信息。这使用下列结构：

@smallexample
struct plugin_info
@{
  const char *version;
  const char *help;
@};
@end smallexample

@en Such a structure is passed as the @code{user_data} by the plugin's
@en init routine using @code{register_callback} with the
@en @code{PLUGIN_INFO} pseudo-event and a null callback.
这样的一个结构体作为@code{user_data}由插件的初始化例程来传递，并使用@code{register_callback}，@code{PLUGIN_INFO}伪事件和一个空回调。

@en @section Registering custom attributes or pragmas
@section 注册自定义的attributes或者pragmas

@en For analysis (or other) purposes it is useful to be able to add custom
@en attributes or pragmas.
出于分析（或者其它）目的，能够增加自定义的attributes或者pragmas是有帮助的。

@en The @code{PLUGIN_ATTRIBUTES} callback is called during attribute
@en registration. Use the @code{register_attribute} function to register
@en custom attributes.
@code{PLUGIN_ATTRIBUTES}回调在属性注册的时候被调用。使用@code{register_attribute}函数来注册自定义的属性。

@smallexample
/* Attribute handler callback */
static tree
handle_user_attribute (tree *node, tree name, tree args,
                       int flags, bool *no_add_attrs)
@{
  return NULL_TREE;
@}

/* Attribute definition */
static struct attribute_spec user_attr =
  @{ "user", 1, 1, false,  false, false, handle_user_attribute, false @};

/* Plugin callback called during attribute registration.
Registered with register_callback (plugin_name, PLUGIN_ATTRIBUTES, register_attributes, NULL)
*/
static void
register_attributes (void *event_data, void *data)
@{
  warning (0, G_("Callback to register attributes"));
  register_attribute (&user_attr);
@}

@end smallexample


@en The @code{PLUGIN_PRAGMAS} callback is called during pragmas
@en registration. Use the @code{c_register_pragma} or
@en @code{c_register_pragma_with_expansion} functions to register custom
@en pragmas.
@code{PLUGIN_PRAGMAS}回调在pragmas注册的时候被调用。使用@code{c_register_pragma}或者@code{c_register_pragma_with_expansion}函数来注册自定义的pragmas。

@smallexample
/* Plugin callback called during pragmas registration. Registered with
     register_callback (plugin_name, PLUGIN_PRAGMAS,
                        register_my_pragma, NULL);
*/
static void
register_my_pragma (void *event_data, void *data)
@{
  warning (0, G_("Callback to register pragmas"));
  c_register_pragma ("GCCPLUGIN", "sayhello", handle_pragma_sayhello);
@}
@end smallexample

@en It is suggested to pass @code{"GCCPLUGIN"} (or a short name identifying
@en your plugin) as the ``space'' argument of your pragma.
建议传递@code{"GCCPLUGIN"}（或者一个简短的名字来标识你的插件）作为你的pragma的``space''参数。

@en @section Recording information about pass execution
@section 记录pass的执行信息

@en The event PLUGIN_PASS_EXECUTION passes the pointer to the executed pass
@en (the same as current_pass) as @code{gcc_data} to the callback.  You can also
@en inspect cfun to find out about which function this pass is executed for.
@en Note that this event will only be invoked if the gate check (if
@en applicable, modified by PLUGIN_OVERRIDE_GATE) succeeds.
@en You can use other hooks, like @code{PLUGIN_ALL_PASSES_START},
@en @code{PLUGIN_ALL_PASSES_END}, @code{PLUGIN_ALL_IPA_PASSES_START},
@en @code{PLUGIN_ALL_IPA_PASSES_END}, @code{PLUGIN_EARLY_GIMPLE_PASSES_START},
@en and/or @code{PLUGIN_EARLY_GIMPLE_PASSES_END} to manipulate global state
@en in your plugin(s) in order to get context for the pass execution.
事件PLUGIN_PASS_EXECUTION将指向被执行的pass的指针，作为@code{gcc_data}传递给回调函数。你还可以通过检查cfun来找到该pass所执行的函数。注意，该事件只有当入口检查（gate check）成功时，才会被调用。你可以在你的插件中使用其它钩子，像@code{PLUGIN_ALL_PASSES_START}，@code{PLUGIN_ALL_PASSES_END}，@code{PLUGIN_ALL_IPA_PASSES_START}，@code{PLUGIN_ALL_IPA_PASSES_END}，@code{PLUGIN_EARLY_GIMPLE_PASSES_START}，和/或@code{PLUGIN_EARLY_GIMPLE_PASSES_END}来操纵全局状态，以便获得pass执行的上下文。


@en @section Controlling which passes are being run
@section 控制将要执行的pass

@en After the original gate function for a pass is called, its result
@en - the gate status - is stored as an integer.
@en Then the event @code{PLUGIN_OVERRIDE_GATE} is invoked, with a pointer
@en to the gate status in the @code{gcc_data} parameter to the callback function.
@en A nonzero value of the gate status means that the pass is to be executed.
@en You can both read and write the gate status via the passed pointer.
在pass的原始的入口函数被调用之后，其结果，入口状态，作为整数被存储。然后事件@code{PLUGIN_OVERRIDE_GATE}被激起，在回调函数的@code{gcc_data}参数中使用一个指向入口状态的指针。一个非零值的入口状态意味着该pass将被执行。你可以同时通过传递的指针读取和改写入口状态。

@en @section Keeping track of available passes
@section 跟踪可用的pass

@en When your plugin is loaded, you can inspect the various
@en pass lists to determine what passes are available.  However, other
@en plugins might add new passes.  Also, future changes to GCC might cause
@en generic passes to be added after plugin loading.
@en When a pass is first added to one of the pass lists, the event
@en @code{PLUGIN_NEW_PASS} is invoked, with the callback parameter
@en @code{gcc_data} pointing to the new pass.
当你的插件被加载时，你可以检查各种pass列表来确定哪些pass是可用的。但是，其它插件可能会加入新的pass。而且，GCC将来可能会改成在插件加载之后添加通用的pass。当一个pass首次被增加到一个pass列表时，事件@code{PLUGIN_NEW_PASS}被激起，使用回调参数@code{gcc_data}指向新pass。


@en @section Building GCC plugins
@section 构建GCC插件

@en If plugins are enabled, GCC installs the headers needed to build a
@en plugin (somewhere in the installation tree, e.g. under
@en @file{/usr/local}).  In particular a @file{plugin/include} directory
@en is installed, containing all the header files needed to build plugins.
如果启用了插件技术，GCC会安装需要构建插件的头文件（在安装路径中的某个地方，例如，位于@file{/usr/local}）。特别的，@file{plugin/include}目录会被安装，其包含了构建插件需要的所有头文件。

@en On most systems, you can query this @code{plugin} directory by
@en invoking @command{gcc -print-file-name=plugin} (replace if needed
@en @command{gcc} with the appropriate program path).
在大多系统上，你可以通过命令@command{gcc -print-file-name=plugin}（如果需要，将@command{gcc}替换为合适的程序路径）来查询该@code{plugin}目录。

@en Inside plugins, this @code{plugin} directory name can be queried by
@en calling @code{default_plugin_dir_name ()}.
在插件内部，该@code{plugin}目录名可以通过调用@code{default_plugin_dir_name ()}来查询。

@en Plugins may know, when they are compiled, the GCC version for which
@en @file{plugin-version.h} is provided.  The constant macros
@en @code{GCCPLUGIN_VERSION_MAJOR}, @code{GCCPLUGIN_VERSION_MINOR},
@en @code{GCCPLUGIN_VERSION_PATCHLEVEL}, @code{GCCPLUGIN_VERSION} are
@en integer numbers, so a plugin could ensure it is built for GCC 4.7 with
如果编译插件所用的 GCC 有提供@file{plugin-version.h}，插件可以得知该 GCC 的版本号。常量巨集@code{GCCPLUGIN_VERSION_MAJOR}、@code{GCCPLUGIN_VERSION_MINOR}、@code{GCCPLUGIN_VERSION_PATCHLEVEL}和@code{GCCPLUGIN_VERSION}为整数值，可以借此确保目前是由 GCC 4.7 编译此插件。

@smallexample
#if GCCPLUGIN_VERSION != 4007
#error this GCC plugin is for GCC 4.7
#endif
@end smallexample

@en The following GNU Makefile excerpt shows how to build a simple plugin:
下列GNU Makefile摘抄片段展示了如何构建一个简单的插件：

@smallexample
GCC=gcc
PLUGIN_SOURCE_FILES= plugin1.c plugin2.c
PLUGIN_OBJECT_FILES= $(patsubst %.c,%.o,$(PLUGIN_SOURCE_FILES))
GCCPLUGINS_DIR:= $(shell $(GCC) -print-file-name=plugin)
CFLAGS+= -I$(GCCPLUGINS_DIR)/include -fPIC -O2

plugin.so: $(PLUGIN_OBJECT_FILES)
   $(GCC) -shared $^ -o $@@
@end smallexample

@en A single source file plugin may be built with @code{gcc -I`gcc
@en -print-file-name=plugin`/include -fPIC -shared -O2 plugin.c -o
@en plugin.so}, using backquote shell syntax to query the @file{plugin}
@en directory.
单个文件的插件可以使用@code{gcc -I`gcc -print-file-name=plugin`/include -fPIC -shared -O2 plugin.c -o plugin.so}来构建，使用反引号shell语法来查询@file{plugin}目录。

@en When a plugin needs to use @command{gengtype}, be sure that both
@en @file{gengtype} and @file{gtype.state} have the same version as the
@en GCC for which the plugin is built.
当插件需要使用@command{gengtype}时，务必确认@file{gengtype}和@file{gtype.state}与建构插件所使用的 GCC 的版本相一致。

