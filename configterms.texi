@c Copyright (C) 2001, 2002, 2004, 2008 Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@node Configure Terms
@section Configure Terms and History
@cindex configure terms
@cindex canadian

配置和构建过程有着悠久灿烂的历史，如果不清楚其缘由，很容易使人迷惑不解。
虽然有另外的文献详细描述了配置过程，这里还是给出了一些从事GCC工作都应该
了解的内容。

构建程序要知道三个系统名称：构建时所使用的机器（@dfn{build}），构建完成
后将使用的机器（@dfn{host}），以及GCC未来生成代码所要运行的机器（@dfn{target}）。
在配置GCC时，通过 @option{--build=}, @option{--host=}, @option{--target=}
来指定这些系统名称。

要避免只指定host而不指定build，因为 @command{configure} 程序可能会认为
你所指定的host和build相同（曾经发生过），而实际上可能并非如此。

我们把build, host和target都相同的情况叫做 @dfn{native}（本地的）。如果
build和host相同，但target不同，就叫做 @dfn{cross}（交叉的）。 build, 
host和target都不同的情况则被称为 @dfn{canadian} （加拿大的——用来暗指加
拿大政党状况与当时从事构建工作的人的背景类似）。如果host和 target相同，
但build不同，则表明你在使用交叉编译器来为一个不同的系统构建本地编译器。
有些人把这称为 @dfn{host-x-host}，@dfn{crossed native}（交叉的本地的），
或 @dfn{cross-built native}(交叉构建的本地的）。如果build和target相同，
但host不同，则表明你在使用交叉编译器来构建一个产生构建时所在机器代码的
交叉编译器。这种情况很少见，所以没有通用的方式来描述它。有人建议称之为
@dfn{crossback}。

如果build和host相同，则正要构建的GCC还会被用于构建目标库（比如 
@code{libstdc++}）。如果build和host不同，那么必须事先构建和安装一个交叉
编译器，用于构建目标库（如果使用的配置为 @option{--target=foo-bar}，这个
编译器就叫做 @command{foo-bar-gcc}）。

对于目标库的情况，你所构建的目标机器就是通过 @option{--target} 指定的
机器。所以，build就是在上面进行构建的机器（这没有什么不同），host就是
为其构建的机器（目标库是为target构建的，所以host也就是所指定的target），
同时无需使用target（因为不是在构建编译器，而是在构建库）。configure/make
过程会在必要时调整这些变量。它还会把 @code{$with_cross_host} 设置成 
@option{--host} 的初始值，以供不时之需。

支持库 @code{libiberty} 最多会被构建三次：一次针对host，一次针对target
（即使二者相同），如果build和host不同，还会针对build再构建一次。这样支
持库libiberty就可以被构建过程中生成的所有程序使用了。
