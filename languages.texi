@c Copyright (C) 2002 Free Software Foundation, Inc.
@c This is part of the GCC manual.
@c For copying conditions, see the file gcc.texi.

@en @node Languages
@en @chapter Language Front Ends in GCC
@node 语言
@chapter GCC中的语言前端

@en The interface to front ends for languages in GCC, and in particular
@en the @code{tree} structure (@pxref{GENERIC}), was initially designed for
@en C, and many aspects of it are still somewhat biased towards C and
@en C-like languages.  It is, however, reasonably well suited to other
@en procedural languages, and front ends for many such languages have been
@en written for GCC@.
GCC中的语言前端接口，特别是 @code{tree} 结构（@pxref{GENERIC}），起初是为C设计的，在许多方面仍然有些偏向于C和类C的语言。尽管如此，这种设计也相当适合于其它的过程语言，而且GCC已经拥有了许多这样的语言前端。

@en Writing a compiler as a front end for GCC, rather than compiling
@en directly to assembler or generating C code which is then compiled by
@en GCC, has several advantages:
为GCC写一个前端编译器，而不是直接编译成汇编或者生成C代码然后再用GCC编译，具有多个优势：

@itemize @bullet
@en @item GCC front ends benefit from the support for many different
@en target machines already present in GCC@.
@item GCC前端可以受益于GCC中已有的对众多不同目标机器的支持。
@en @item GCC front ends benefit from all the optimizations in GCC@.  Some
@en of these, such as alias analysis, may work better when GCC is
@en compiling directly from source code then when it is compiling from
@en generated C code.
@item GCC前端可以受益于GCC中的所有优化。其中一些优化，例如别名分析，在GCC直接编译源代码时要比编译生成的C代码效果更好。
@en @item Better debugging information is generated when compiling
@en directly from source code than when going via intermediate generated C
@en code.
@item 直接编译源代码能够比编译中间生成的C代码产生更好的调试信息。
@end itemize

@en Because of the advantages of writing a compiler as a GCC front end,
@en GCC front ends have also been created for languages very different
@en from those for which GCC was designed, such as the declarative
@en logic/functional language Mercury.  For these reasons, it may also be
@en useful to implement compilers created for specialized purposes (for
@en example, as part of a research project) as GCC front ends.
正是由于为GCC编写一个前端编译器有这些优势，使得也有与GCC设计差异很大的语言前端被创建，例如声明式的逻辑/功能语言（declarative logic/functional language）Mercury。由于这些原因，实现针对特殊目的（例如，作为研究项目的一部分）编译器作为GCC前端也是有用的。
